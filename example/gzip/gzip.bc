; ModuleID = 'gzip.bc'
target datalayout = "e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32"
target triple = "i686-pc-windows-msvc16.0.0"

%struct.config = type { i16, i16, i16, i16 }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.stat = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i64, i64 }
%struct.spec_fd_t = type { i32, i32, i32, i8* }
%struct.ct_data = type { %union.anon.5, %union.anon.5 }
%union.anon.5 = type { i16 }
%struct.tree_desc = type { %struct.ct_data*, %struct.ct_data*, i32*, i32, i32, i32, i32 }
%struct._iobuf = type { i8*, i32, i8*, i32, i32, i32, i32, i8* }
%struct.huft = type { i8, i8, %union.anon }
%union.anon = type { %struct.huft* }
%struct._SECURITY_ATTRIBUTES = type { i32, i8*, i32 }

@read_buf = common global i32 (i8*, i32)* null, align 4
@zfile = internal global i32 0, align 4
@bi_buf = internal global i16 0, align 2
@bi_valid = internal global i32 0, align 4
@window_size = global i32 65536, align 4
@good_match = common global i32 0, align 4
@nice_match = common global i32 0, align 4
@max_chain_length = common global i32 0, align 4
@strstart = common global i32 0, align 4
@block_start = common global i32 0, align 4
@prev_length = common global i32 0, align 4
@match_start = common global i32 0, align 4
@.str = private unnamed_addr global [15 x i8] c"bad pack level\00", align 1
@compr_level = internal global i32 0, align 4
@configuration_table = internal global [10 x %struct.config] [%struct.config zeroinitializer, %struct.config { i16 4, i16 4, i16 8, i16 4 }, %struct.config { i16 4, i16 5, i16 16, i16 8 }, %struct.config { i16 4, i16 6, i16 32, i16 32 }, %struct.config { i16 4, i16 4, i16 16, i16 16 }, %struct.config { i16 8, i16 16, i16 32, i16 32 }, %struct.config { i16 8, i16 16, i16 128, i16 128 }, %struct.config { i16 8, i16 32, i16 128, i16 256 }, %struct.config { i16 32, i16 128, i16 258, i16 1024 }, %struct.config { i16 32, i16 258, i16 258, i16 4096 }], align 2
@max_lazy_match = internal global i32 0, align 4
@lookahead = internal global i32 0, align 4
@eofile = internal global i32 0, align 4
@ins_h = internal global i32 0, align 4
@optarg = global i8* null, align 4
@optind = global i32 0, align 4
@opterr = global i32 1, align 4
@optopt = global i32 0, align 4
@last_nonopt = internal global i32 0, align 4
@first_nonopt = internal global i32 0, align 4
@nextchar = internal global i8* null, align 4
@ordering = internal global i32 0, align 4
@.str.1 = private unnamed_addr global [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.1.2 = private unnamed_addr global [3 x i8] c"--\00", align 1
@.str.2 = private unnamed_addr global [30 x i8] c"%s: option `%s' is ambiguous\0A\00", align 1
@.str.3 = private unnamed_addr global [45 x i8] c"%s: option `--%s' doesn't allow an argument\0A\00", align 1
@.str.4 = private unnamed_addr global [45 x i8] c"%s: option `%c%s' doesn't allow an argument\0A\00", align 1
@.str.5 = private unnamed_addr global [38 x i8] c"%s: option `%s' requires an argument\0A\00", align 1
@.str.6 = private unnamed_addr global [32 x i8] c"%s: unrecognized option `--%s'\0A\00", align 1
@.str.7 = private unnamed_addr global [32 x i8] c"%s: unrecognized option `%c%s'\0A\00", align 1
@.str.8 = private unnamed_addr global [1 x i8] zeroinitializer, align 1
@.str.9 = private unnamed_addr global [26 x i8] c"%s: illegal option -- %c\0A\00", align 1
@.str.10 = private unnamed_addr global [39 x i8] c"%s: option requires an argument -- %c\0A\00", align 1
@ascii = global i32 0, align 4
@to_stdout = global i32 0, align 4
@decompress = global i32 0, align 4
@force = global i32 0, align 4
@no_name = global i32 -1, align 4
@no_time = global i32 -1, align 4
@recursive = global i32 0, align 4
@list = global i32 0, align 4
@verbose = global i32 0, align 4
@quiet = global i32 0, align 4
@do_lzw = global i32 0, align 4
@test = global i32 0, align 4
@maxbits = global i32 16, align 4
@method = global i32 8, align 4
@level = global i32 6, align 4
@exit_code = global i32 0, align 4
@args = global i8** null, align 4
@total_in = global i32 0, align 4
@total_out = global i32 0, align 4
@remove_ofname = global i32 0, align 4
@longopts = global [24 x %struct.option] [%struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.12, i32 0, i32 0), i32 0, i32* null, i32 99 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.13, i32 0, i32 0), i32 0, i32* null, i32 99 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.14, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.15, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5.16, i32 0, i32 0), i32 0, i32* null, i32 102 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.17, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.18, i32 0, i32 0), i32 0, i32* null, i32 108 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8.19, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.20, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.21, i32 0, i32 0), i32 0, i32* null, i32 78 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.22, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 1, i32* null, i32 83 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i32 0, i32* null, i32 116 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i32 0, i32* null, i32 118 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i32 0, i32 0), i32 0, i32* null, i32 86 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i32 0, i32* null, i32 49 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i32 0, i32* null, i32 57 }, %struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i32 1, i32* null, i32 98 }, %struct.option zeroinitializer], align 4
@.str.11 = private unnamed_addr global [6 x i8] c"ascii\00", align 1
@.str.1.12 = private unnamed_addr global [10 x i8] c"to-stdout\00", align 1
@.str.2.13 = private unnamed_addr global [7 x i8] c"stdout\00", align 1
@.str.3.14 = private unnamed_addr global [11 x i8] c"decompress\00", align 1
@.str.4.15 = private unnamed_addr global [11 x i8] c"uncompress\00", align 1
@.str.5.16 = private unnamed_addr global [6 x i8] c"force\00", align 1
@.str.6.17 = private unnamed_addr global [5 x i8] c"help\00", align 1
@.str.7.18 = private unnamed_addr global [5 x i8] c"list\00", align 1
@.str.8.19 = private unnamed_addr global [8 x i8] c"license\00", align 1
@.str.9.20 = private unnamed_addr global [8 x i8] c"no-name\00", align 1
@.str.10.21 = private unnamed_addr global [5 x i8] c"name\00", align 1
@.str.11.22 = private unnamed_addr global [6 x i8] c"quiet\00", align 1
@.str.12 = private unnamed_addr global [7 x i8] c"silent\00", align 1
@.str.13 = private unnamed_addr global [10 x i8] c"recursive\00", align 1
@.str.14 = private unnamed_addr global [7 x i8] c"suffix\00", align 1
@.str.15 = private unnamed_addr global [5 x i8] c"test\00", align 1
@.str.16 = private unnamed_addr global [8 x i8] c"no-time\00", align 1
@.str.17 = private unnamed_addr global [8 x i8] c"verbose\00", align 1
@.str.18 = private unnamed_addr global [8 x i8] c"version\00", align 1
@.str.19 = private unnamed_addr global [5 x i8] c"fast\00", align 1
@.str.20 = private unnamed_addr global [5 x i8] c"best\00", align 1
@.str.21 = private unnamed_addr global [4 x i8] c"lzw\00", align 1
@.str.22 = private unnamed_addr global [5 x i8] c"bits\00", align 1
@work = global i32 (i32, i32)* @zip, align 4
@inptr = common global i32 0, align 4
@insize = common global i32 0, align 4
@inbuf = common global [32832 x i8] zeroinitializer, align 1
@part_nb = common global i32 0, align 4
@last_member = common global i32 0, align 4
@ifname = common global [260 x i8] zeroinitializer, align 1
@progname = common global i8* null, align 4
@time_stamp = common global i32 0, align 4
@ofname = common global [260 x i8] zeroinitializer, align 1
@ofd = common global i32 0, align 4
@outbuf = common global [18432 x i8] zeroinitializer, align 1
@d_buf = common global [32768 x i16] zeroinitializer, align 2
@window = common global [65536 x i8] zeroinitializer, align 1
@prev = common global [65536 x i16] zeroinitializer, align 2
@foreground = common global i32 0, align 4
@save_orig_name = common global i32 0, align 4
@ifile_size = common global i32 0, align 4
@env = common global i8* null, align 4
@z_suffix = common global [31 x i8] zeroinitializer, align 1
@z_len = common global i32 0, align 4
@bytes_in = common global i32 0, align 4
@bytes_out = common global i32 0, align 4
@istat = common global %struct.stat zeroinitializer, align 8
@ifd = common global i32 0, align 4
@outcnt = common global i32 0, align 4
@.str.23 = private unnamed_addr global [3 x i8] c"\1F\8B\00", align 1
@.str.24 = private unnamed_addr global [3 x i8] c"\1F\9E\00", align 1
@.str.25 = private unnamed_addr global [56 x i8] c"%s: %s: unknown method %d -- get newer version of gzip\0A\00", align 1
@.str.26 = private unnamed_addr global [50 x i8] c"%s: %s is encrypted -- get newer version of gzip\0A\00", align 1
@.str.27 = private unnamed_addr global [65 x i8] c"%s: %s is a a multi-part gzip file -- get newer version of gzip\0A\00", align 1
@.str.28 = private unnamed_addr global [52 x i8] c"%s: %s has flags 0x%x -- get newer version of gzip\0A\00", align 1
@.str.29 = private unnamed_addr global [24 x i8] c"%s: %s: part number %u\0A\00", align 1
@.str.30 = private unnamed_addr global [41 x i8] c"%s: %s: extra field of %u bytes ignored\0A\00", align 1
@.str.31 = private unnamed_addr global [39 x i8] c"corrupted input -- file name too large\00", align 1
@.str.32 = private unnamed_addr global [5 x i8] c"PK\03\04\00", align 1
@.str.33 = private unnamed_addr global [5 x i8] c"PK\03\04\00", align 1
@.str.34 = private unnamed_addr global [3 x i8] c"\1F\1E\00", align 1
@.str.35 = private unnamed_addr global [3 x i8] c"\1F\9D\00", align 1
@.str.36 = private unnamed_addr global [3 x i8] c"\1F\A0\00", align 1
@.str.37 = private unnamed_addr global [29 x i8] c"\0A%s: %s: not in gzip format\0A\00", align 1
@.str.38 = private unnamed_addr global [53 x i8] c"\0A%s: %s: decompression OK, trailing garbage ignored\0A\00", align 1
@do_exit.in_exit = internal global i32 0, align 4
@mask_bits = global [17 x i16] [i16 0, i16 1, i16 3, i16 7, i16 15, i16 31, i16 63, i16 127, i16 255, i16 511, i16 1023, i16 2047, i16 4095, i16 8191, i16 16383, i16 32767, i16 -1], align 2
@lbits = global i32 9, align 4
@dbits = global i32 6, align 4
@hufts = common global i32 0, align 4
@bb = common global i32 0, align 4
@bk = common global i32 0, align 4
@cplens = internal global [31 x i16] [i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 13, i16 15, i16 17, i16 19, i16 23, i16 27, i16 31, i16 35, i16 43, i16 51, i16 59, i16 67, i16 83, i16 99, i16 115, i16 131, i16 163, i16 195, i16 227, i16 258, i16 0, i16 0], align 2
@cplext = internal global [31 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1, i16 1, i16 1, i16 1, i16 2, i16 2, i16 2, i16 2, i16 3, i16 3, i16 3, i16 3, i16 4, i16 4, i16 4, i16 4, i16 5, i16 5, i16 5, i16 5, i16 0, i16 99, i16 99], align 2
@cpdist = internal global [30 x i16] [i16 1, i16 2, i16 3, i16 4, i16 5, i16 7, i16 9, i16 13, i16 17, i16 25, i16 33, i16 49, i16 65, i16 97, i16 129, i16 193, i16 257, i16 385, i16 513, i16 769, i16 1025, i16 1537, i16 2049, i16 3073, i16 4097, i16 6145, i16 8193, i16 12289, i16 16385, i16 24577], align 2
@cpdext = internal global [30 x i16] [i16 0, i16 0, i16 0, i16 0, i16 1, i16 1, i16 2, i16 2, i16 3, i16 3, i16 4, i16 4, i16 5, i16 5, i16 6, i16 6, i16 7, i16 7, i16 8, i16 8, i16 9, i16 9, i16 10, i16 10, i16 11, i16 11, i16 12, i16 12, i16 13, i16 13], align 2
@border = internal global [19 x i32] [i32 16, i32 17, i32 18, i32 0, i32 8, i32 7, i32 9, i32 6, i32 10, i32 5, i32 11, i32 4, i32 12, i32 3, i32 13, i32 2, i32 14, i32 1, i32 15], align 4
@.str.39 = private unnamed_addr global [26 x i8] c" incomplete literal tree\0A\00", align 1
@.str.1.40 = private unnamed_addr global [27 x i8] c" incomplete distance tree\0A\00", align 1
@msg_done = internal global i32 0, align 4
@.str.41 = private unnamed_addr global [44 x i8] c"output in compress .Z format not supported\0A\00", align 1
@"\01?hMutexList@@3PAPAXA" = global [20 x i8*] zeroinitializer, align 4
@"\01?MutexFuncList@@3PAPAXA" = global [20 x i8*] zeroinitializer, align 4
@"\01?WhileEndFlag@@3PAHA" = global [20 x i32] zeroinitializer, align 4
@"\01?GlobalSignal@@3HA" = global i32 -1, align 4
@"\01?GlobalThreadID@@3HA" = global i32 -1, align 4
@"\01?thresholdForOthread@@3HA" = global i32 2, align 4
@"\01?threadNumForOthread@@3HA" = global i32 10, align 4
@"\01?FunctionGrgphForOthread@@3PAY0DOI@HA" = global [20 x [1000 x i32]] zeroinitializer, align 4
@"\01?totalnum@@3HA" = global i32 0, align 4
@"\01?CalcCallNumForOthread@@3PAY0DOI@HA" = global [20 x [1000 x i32]] zeroinitializer, align 4
@.str.42 = private unnamed_addr global [12 x i8] c"total = %d\0A\00", align 1
@.str.1.43 = private unnamed_addr global [10 x i8] c"%d-%d:%d\0A\00", align 1
@dbglvl = global i32 4, align 4
@seedi = common global i32 0, align 4
@spec_fd = common global [3 x %struct.spec_fd_t] zeroinitializer, align 4
@.str.44 = private unnamed_addr global [11 x i8] c"spec_init\0A\00", align 1
@.str.1.45 = private unnamed_addr global [36 x i8] c"spec_init: Error mallocing memory!\0A\00", align 1
@.str.2.46 = private unnamed_addr global [17 x i8] c"Creating Chunks\0A\00", align 1
@.str.3.47 = private unnamed_addr global [19 x i8] c"Creating Chunk %d\0A\00", align 1
@.str.4.48 = private unnamed_addr global [20 x i8] c"Filling input file\0A\00", align 1
@.str.5.49 = private unnamed_addr global [24 x i8] c"Can't open file %s: %s\0A\00", align 1
@.str.6.50 = private unnamed_addr global [27 x i8] c"Error reading from %s: %s\0A\00", align 1
@.str.7.51 = private unnamed_addr global [22 x i8] c"Duplicating %d bytes\0A\00", align 1
@.str.8.52 = private unnamed_addr global [25 x i8] c"spec_read: %d, %x, %d = \00", align 1
@.str.9.53 = private unnamed_addr global [34 x i8] c"spec_read: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str.10.54 = private unnamed_addr global [5 x i8] c"EOF\0A\00", align 1
@.str.11.55 = private unnamed_addr global [4 x i8] c"%d\0A\00", align 1
@.str.12.56 = private unnamed_addr global [17 x i8] c"spec_getc: %d = \00", align 1
@.str.13.57 = private unnamed_addr global [34 x i8] c"spec_read: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str.14.58 = private unnamed_addr global [5 x i8] c"EOF\0A\00", align 1
@.str.15.59 = private unnamed_addr global [4 x i8] c"%d\0A\00", align 1
@.str.16.60 = private unnamed_addr global [19 x i8] c"spec_ungetc: %d = \00", align 1
@.str.17.61 = private unnamed_addr global [34 x i8] c"spec_read: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str.18.62 = private unnamed_addr global [26 x i8] c"spec_ungetc: pos %d <= 0\0A\00", align 1
@.str.19.63 = private unnamed_addr global [72 x i8] c"spec_ungetc: can't unget something that wasn't what was in the buffer!\0A\00", align 1
@.str.20.64 = private unnamed_addr global [4 x i8] c"%d\0A\00", align 1
@.str.21.65 = private unnamed_addr global [26 x i8] c"spec_write: %d, %x, %d = \00", align 1
@.str.22.66 = private unnamed_addr global [35 x i8] c"spec_write: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str.23.67 = private unnamed_addr global [4 x i8] c"%d\0A\00", align 1
@.str.24.68 = private unnamed_addr global [21 x i8] c"spec_putc: %d, %d = \00", align 1
@.str.25.69 = private unnamed_addr global [35 x i8] c"spec_write: fd=%d, > MAX_SPEC_FD!\0A\00", align 1
@.str.26.70 = private unnamed_addr global [15 x i8] c"input.combined\00", align 1
@.str.27.71 = private unnamed_addr global [20 x i8] c"Loading Input Data\0A\00", align 1
@.str.28.72 = private unnamed_addr global [31 x i8] c"Input data %d bytes in length\0A\00", align 1
@.str.29.73 = private unnamed_addr global [31 x i8] c"main: Error mallocing memory!\0A\00", align 1
@.str.30.74 = private unnamed_addr global [34 x i8] c"Compressing Input Data, level %d\0A\00", align 1
@.str.31.75 = private unnamed_addr global [36 x i8] c"Compressed data %d bytes in length\0A\00", align 1
@.str.32.76 = private unnamed_addr global [20 x i8] c"Uncompressing Data\0A\00", align 1
@.str.33.77 = private unnamed_addr global [38 x i8] c"Uncompressed data %d bytes in length\0A\00", align 1
@.str.34.78 = private unnamed_addr global [35 x i8] c"Tested %dMB buffer: Miscompared!!\0A\00", align 1
@.str.35.79 = private unnamed_addr global [38 x i8] c"Uncompressed data compared correctly\0A\00", align 1
@.str.36.80 = private unnamed_addr global [25 x i8] c"Tested %dMB buffer: OK!\0A\00", align 1
@.str.37.81 = private unnamed_addr global [23 x i8] c"result=%ld,time=%lf s\0A\00", align 1
@file_type = common global i16* null, align 4
@file_method = common global i32* null, align 4
@input_len = internal global i32 0, align 4
@compressed_len = internal global i32 0, align 4
@static_dtree = internal global [30 x %struct.ct_data] zeroinitializer, align 2
@base_length = internal global [29 x i32] zeroinitializer, align 4
@extra_lbits = internal global [29 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0], align 4
@length_code = internal global [256 x i8] zeroinitializer, align 1
@base_dist = internal global [30 x i32] zeroinitializer, align 4
@extra_dbits = internal global [30 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13], align 4
@dist_code = internal global [512 x i8] zeroinitializer, align 1
@bl_count = internal global [16 x i16] zeroinitializer, align 2
@static_ltree = internal global [288 x %struct.ct_data] zeroinitializer, align 2
@dyn_ltree = internal global [573 x %struct.ct_data] zeroinitializer, align 2
@dyn_dtree = internal global [61 x %struct.ct_data] zeroinitializer, align 2
@bl_tree = internal global [39 x %struct.ct_data] zeroinitializer, align 2
@static_len = internal global i32 0, align 4
@opt_len = internal global i32 0, align 4
@last_flags = internal global i32 0, align 4
@last_dist = internal global i32 0, align 4
@last_lit = internal global i32 0, align 4
@flags = internal global i8 0, align 1
@flag_bit = internal global i8 0, align 1
@flag_buf = internal global [4096 x i8] zeroinitializer, align 1
@.str.2.84 = private unnamed_addr global [23 x i8] c"-l used on binary file\00", align 1
@.str.1.85 = private unnamed_addr global [1 x i8] zeroinitializer, align 1
@l_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 0), i32* getelementptr inbounds ([29 x i32], [29 x i32]* @extra_lbits, i32 0, i32 0), i32 257, i32 286, i32 15, i32 0 }, align 4
@heap_len = internal global i32 0, align 4
@heap_max = internal global i32 0, align 4
@heap = internal global [573 x i32] zeroinitializer, align 4
@depth = internal global [573 x i8] zeroinitializer, align 1
@d_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i32 0, i32 0), i32* getelementptr inbounds ([30 x i32], [30 x i32]* @extra_dbits, i32 0, i32 0), i32 0, i32 30, i32 15, i32 0 }, align 4
@bl_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 0), %struct.ct_data* null, i32* getelementptr inbounds ([19 x i32], [19 x i32]* @extra_blbits, i32 0, i32 0), i32 0, i32 19, i32 7, i32 0 }, align 4
@extra_blbits = internal global [19 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 3, i32 7], align 4
@bl_order = internal global [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 1
@.str.86 = private unnamed_addr global [15 x i8] c"block vanished\00", align 1
@bitbuf = internal global i16 0, align 2
@subbitbuf = internal global i32 0, align 4
@bitcount = internal global i32 0, align 4
@blocksize = internal global i32 0, align 4
@j = internal global i32 0, align 4
@done = internal global i32 0, align 4
@decode.i = internal global i32 0, align 4
@pt_len = internal global [19 x i8] zeroinitializer, align 1
@pt_table = internal global [256 x i16] zeroinitializer, align 2
@.str.91 = private unnamed_addr global [11 x i8] c"Bad table\0A\00", align 1
@block_mode = global i32 128, align 4
@.str.94 = private unnamed_addr global [38 x i8] c"\0A%s: %s: warning, unknown flags 0x%x\0A\00", align 1
@.str.1.95 = private unnamed_addr global [59 x i8] c"\0A%s: %s: compressed with %d bits, can only handle %d bits\0A\00", align 1
@.str.2.96 = private unnamed_addr global [15 x i8] c"corrupt input.\00", align 1
@.str.3.97 = private unnamed_addr global [15 x i8] c"corrupt input.\00", align 1
@.str.4.98 = private unnamed_addr global [46 x i8] c"corrupt input. Use zcat to recover some data.\00", align 1
@orig_len = internal global i32 0, align 4
@max_len = internal global i32 0, align 4
@.str.1.101 = private unnamed_addr global [50 x i8] c"invalid compressed data -- Huffman code > 32 bits\00", align 1
@leaves = internal global [26 x i32] zeroinitializer, align 4
@.str.2.102 = private unnamed_addr global [32 x i8] c"too many leaves in Huffman tree\00", align 1
@lit_base = internal global [26 x i32] zeroinitializer, align 4
@literal = internal global [256 x i8] zeroinitializer, align 1
@parents = internal global [26 x i32] zeroinitializer, align 4
@peek_bits = internal global i32 0, align 4
@valid = internal global i32 0, align 4
@bitbuf.104 = internal global i32 0, align 4
@.str.105 = private unnamed_addr global [38 x i8] c"invalid compressed data--length error\00", align 1
@pkzip = global i32 0, align 4
@ext_header = global i32 0, align 4
@decrypt = common global i32 0, align 4
@key = common global i8* null, align 4
@.str.108 = private unnamed_addr global [31 x i8] c"\0A%s: %s: not a valid zip file\0A\00", align 1
@.str.1.109 = private unnamed_addr global [58 x i8] c"\0A%s: %s: first entry not deflated or stored -- use unzip\0A\00", align 1
@.str.2.110 = private unnamed_addr global [38 x i8] c"\0A%s: %s: encrypted file -- use unzip\0A\00", align 1
@.str.3.113 = private unnamed_addr global [14 x i8] c"out of memory\00", align 1
@.str.4.114 = private unnamed_addr global [41 x i8] c"invalid compressed data--format violated\00", align 1
@.str.5.115 = private unnamed_addr global [18 x i8] c"len %ld, siz %ld\0A\00", align 1
@.str.6.116 = private unnamed_addr global [41 x i8] c"invalid compressed data--length mismatch\00", align 1
@.str.7.117 = private unnamed_addr global [31 x i8] c"internal error, invalid method\00", align 1
@.str.8.118 = private unnamed_addr global [35 x i8] c"invalid compressed data--crc error\00", align 1
@.str.9.119 = private unnamed_addr global [38 x i8] c"invalid compressed data--length error\00", align 1
@.str.10.120 = private unnamed_addr global [46 x i8] c"%s: %s has more than one entry--rest ignored\0A\00", align 1
@.str.11.121 = private unnamed_addr global [45 x i8] c"%s: %s has more than one entry -- unchanged\0A\00", align 1
@crc_32_tab = global [256 x i32] [i32 0, i32 1996959894, i32 -301047508, i32 -1727442502, i32 124634137, i32 1886057615, i32 -379345611, i32 -1637575261, i32 249268274, i32 2044508324, i32 -522852066, i32 -1747789432, i32 162941995, i32 2125561021, i32 -407360249, i32 -1866523247, i32 498536548, i32 1789927666, i32 -205950648, i32 -2067906082, i32 450548861, i32 1843258603, i32 -187386543, i32 -2083289657, i32 325883990, i32 1684777152, i32 -43845254, i32 -1973040660, i32 335633487, i32 1661365465, i32 -99664541, i32 -1928851979, i32 997073096, i32 1281953886, i32 -715111964, i32 -1570279054, i32 1006888145, i32 1258607687, i32 -770865667, i32 -1526024853, i32 901097722, i32 1119000684, i32 -608450090, i32 -1396901568, i32 853044451, i32 1172266101, i32 -589951537, i32 -1412350631, i32 651767980, i32 1373503546, i32 -925412992, i32 -1076862698, i32 565507253, i32 1454621731, i32 -809855591, i32 -1195530993, i32 671266974, i32 1594198024, i32 -972236366, i32 -1324619484, i32 795835527, i32 1483230225, i32 -1050600021, i32 -1234817731, i32 1994146192, i32 31158534, i32 -1731059524, i32 -271249366, i32 1907459465, i32 112637215, i32 -1614814043, i32 -390540237, i32 2013776290, i32 251722036, i32 -1777751922, i32 -519137256, i32 2137656763, i32 141376813, i32 -1855689577, i32 -429695999, i32 1802195444, i32 476864866, i32 -2056965928, i32 -228458418, i32 1812370925, i32 453092731, i32 -2113342271, i32 -183516073, i32 1706088902, i32 314042704, i32 -1950435094, i32 -54949764, i32 1658658271, i32 366619977, i32 -1932296973, i32 -69972891, i32 1303535960, i32 984961486, i32 -1547960204, i32 -725929758, i32 1256170817, i32 1037604311, i32 -1529756563, i32 -740887301, i32 1131014506, i32 879679996, i32 -1385723834, i32 -631195440, i32 1141124467, i32 855842277, i32 -1442165665, i32 -586318647, i32 1342533948, i32 654459306, i32 -1106571248, i32 -921952122, i32 1466479909, i32 544179635, i32 -1184443383, i32 -832445281, i32 1591671054, i32 702138776, i32 -1328506846, i32 -942167884, i32 1504918807, i32 783551873, i32 -1212326853, i32 -1061524307, i32 -306674912, i32 -1698712650, i32 62317068, i32 1957810842, i32 -355121351, i32 -1647151185, i32 81470997, i32 1943803523, i32 -480048366, i32 -1805370492, i32 225274430, i32 2053790376, i32 -468791541, i32 -1828061283, i32 167816743, i32 2097651377, i32 -267414716, i32 -2029476910, i32 503444072, i32 1762050814, i32 -144550051, i32 -2140837941, i32 426522225, i32 1852507879, i32 -19653770, i32 -1982649376, i32 282753626, i32 1742555852, i32 -105259153, i32 -1900089351, i32 397917763, i32 1622183637, i32 -690576408, i32 -1580100738, i32 953729732, i32 1340076626, i32 -776247311, i32 -1497606297, i32 1068828381, i32 1219638859, i32 -670225446, i32 -1358292148, i32 906185462, i32 1090812512, i32 -547295293, i32 -1469587627, i32 829329135, i32 1181335161, i32 -882789492, i32 -1134132454, i32 628085408, i32 1382605366, i32 -871598187, i32 -1156888829, i32 570562233, i32 1426400815, i32 -977650754, i32 -1296233688, i32 733239954, i32 1555261956, i32 -1026031705, i32 -1244606671, i32 752459403, i32 1541320221, i32 -1687895376, i32 -328994266, i32 1969922972, i32 40735498, i32 -1677130071, i32 -351390145, i32 1913087877, i32 83908371, i32 -1782625662, i32 -491226604, i32 2075208622, i32 213261112, i32 -1831694693, i32 -438977011, i32 2094854071, i32 198958881, i32 -2032938284, i32 -237706686, i32 1759359992, i32 534414190, i32 -2118248755, i32 -155638181, i32 1873836001, i32 414664567, i32 -2012718362, i32 -15766928, i32 1711684554, i32 285281116, i32 -1889165569, i32 -127750551, i32 1634467795, i32 376229701, i32 -1609899400, i32 -686959890, i32 1308918612, i32 956543938, i32 -1486412191, i32 -799009033, i32 1231636301, i32 1047427035, i32 -1362007478, i32 -640263460, i32 1088359270, i32 936918000, i32 -1447252397, i32 -558129467, i32 1202900863, i32 817233897, i32 -1111625188, i32 -893730166, i32 1404277552, i32 615818150, i32 -1160759803, i32 -841546093, i32 1423857449, i32 601450431, i32 -1285129682, i32 -1000256840, i32 1567103746, i32 711928724, i32 -1274298825, i32 -1022587231, i32 1510334235, i32 755167117], align 4
@.str.9.126 = private unnamed_addr global [6 x i8] c"\0A%s: \00", align 1
@.str.7.129 = private unnamed_addr global [6 x i8] c"\0A%s: \00", align 1
@.str.8.130 = private unnamed_addr global [28 x i8] c"%s: unexpected end of file\0A\00", align 1
@updcrc.crc = internal global i32 -1, align 4
@.str.11.143 = private unnamed_addr global [14 x i8] c"out of memory\00", align 1
@.str.5.146 = private unnamed_addr global [13 x i8] c"\0A%s: %s: %s\0A\00", align 1
@.str.147 = private unnamed_addr global [3 x i8] c" \09\00", align 1
@.str.1.148 = private unnamed_addr global [3 x i8] c" \09\00", align 1
@.str.2.149 = private unnamed_addr global [14 x i8] c"out of memory\00", align 1
@.str.3.150 = private unnamed_addr global [8 x i8] c"argc<=0\00", align 1
@.str.4.151 = private unnamed_addr global [3 x i8] c" \09\00", align 1
@.str.6.154 = private unnamed_addr global [23 x i8] c"%s: %s: warning: %s%s\0A\00", align 1
@.str.10.155 = private unnamed_addr global [12 x i8] c"%2ld.%1ld%%\00", align 1
@header_bytes = common global i32 0, align 4
@.str.160 = private unnamed_addr global [3 x i8] c"\1F\8B\00", align 1
@.str.1.161 = private unnamed_addr global [3 x i8] c"\1F\8B\00", align 1
@crc = internal global i32 0, align 4

; Function Attrs: noinline nounwind
define void @bi_init(i32 %zipfile) #0 {
entry:
  %zipfile.addr = alloca i32, align 4
  store i32 %zipfile, i32* %zipfile.addr, align 4
  %0 = load i32, i32* %zipfile.addr, align 4
  store i32 %0, i32* @zfile, align 4
  store i16 0, i16* @bi_buf, align 2
  store i32 0, i32* @bi_valid, align 4
  %1 = load i32, i32* @zfile, align 4
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 (i8*, i32)* @file_read, i32 (i8*, i32)** @read_buf, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind
define void @send_bits(i32 %value, i32 %length) #0 {
entry:
  %length.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* @bi_valid, align 4
  %1 = load i32, i32* %length.addr, align 4
  %sub = sub nsw i32 16, %1
  %cmp = icmp sgt i32 %0, %sub
  br i1 %cmp, label %if.then, label %if.else35

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32, i32* @bi_valid, align 4
  %shl = shl i32 %2, %3
  %4 = load i16, i16* @bi_buf, align 2
  %conv = zext i16 %4 to i32
  %or = or i32 %conv, %shl
  %conv1 = trunc i32 %or to i16
  store i16 %conv1, i16* @bi_buf, align 2
  %5 = load i32, i32* @outcnt, align 4
  %cmp2 = icmp ult i32 %5, 16382
  br i1 %cmp2, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %6 = load i16, i16* @bi_buf, align 2
  %conv5 = zext i16 %6 to i32
  %and = and i32 %conv5, 255
  %conv6 = trunc i32 %and to i8
  %7 = load i32, i32* @outcnt, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* @outcnt, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %7
  store i8 %conv6, i8* %arrayidx, align 1
  %8 = load i16, i16* @bi_buf, align 2
  %conv7 = zext i16 %8 to i32
  %shr = ashr i32 %conv7, 8
  %conv8 = trunc i32 %shr to i8
  %9 = load i32, i32* @outcnt, align 4
  %inc9 = add i32 %9, 1
  store i32 %inc9, i32* @outcnt, align 4
  %arrayidx10 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %9
  store i8 %conv8, i8* %arrayidx10, align 1
  br label %if.end28

if.else:                                          ; preds = %if.then
  %10 = load i16, i16* @bi_buf, align 2
  %conv11 = zext i16 %10 to i32
  %and12 = and i32 %conv11, 255
  %conv13 = trunc i32 %and12 to i8
  %11 = load i32, i32* @outcnt, align 4
  %inc14 = add i32 %11, 1
  store i32 %inc14, i32* @outcnt, align 4
  %arrayidx15 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %11
  store i8 %conv13, i8* %arrayidx15, align 1
  %12 = load i32, i32* @outcnt, align 4
  %cmp16 = icmp eq i32 %12, 16384
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.else
  call void @flush_outbuf()
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.else
  %13 = load i16, i16* @bi_buf, align 2
  %conv19 = zext i16 %13 to i32
  %shr20 = ashr i32 %conv19, 8
  %conv21 = trunc i32 %shr20 to i8
  %14 = load i32, i32* @outcnt, align 4
  %inc22 = add i32 %14, 1
  store i32 %inc22, i32* @outcnt, align 4
  %arrayidx23 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %14
  store i8 %conv21, i8* %arrayidx23, align 1
  %15 = load i32, i32* @outcnt, align 4
  %cmp24 = icmp eq i32 %15, 16384
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end
  call void @flush_outbuf()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then4
  %16 = load i32, i32* %value.addr, align 4
  %conv29 = trunc i32 %16 to i16
  %conv30 = zext i16 %conv29 to i32
  %17 = load i32, i32* @bi_valid, align 4
  %sub31 = sub i32 16, %17
  %shr32 = ashr i32 %conv30, %sub31
  %conv33 = trunc i32 %shr32 to i16
  store i16 %conv33, i16* @bi_buf, align 2
  %18 = load i32, i32* %length.addr, align 4
  %sub34 = sub i32 %18, 16
  %19 = load i32, i32* @bi_valid, align 4
  %add = add i32 %19, %sub34
  store i32 %add, i32* @bi_valid, align 4
  br label %if.end41

if.else35:                                        ; preds = %entry
  %20 = load i32, i32* %value.addr, align 4
  %21 = load i32, i32* @bi_valid, align 4
  %shl36 = shl i32 %20, %21
  %22 = load i16, i16* @bi_buf, align 2
  %conv37 = zext i16 %22 to i32
  %or38 = or i32 %conv37, %shl36
  %conv39 = trunc i32 %or38 to i16
  store i16 %conv39, i16* @bi_buf, align 2
  %23 = load i32, i32* %length.addr, align 4
  %24 = load i32, i32* @bi_valid, align 4
  %add40 = add nsw i32 %24, %23
  store i32 %add40, i32* @bi_valid, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.else35, %if.end28
  ret void
}

; Function Attrs: noinline nounwind
define i32 @bi_reverse(i32 %code, i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %res = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %res, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* %code.addr, align 4
  %and = and i32 %0, 1
  %1 = load i32, i32* %res, align 4
  %or = or i32 %1, %and
  store i32 %or, i32* %res, align 4
  %2 = load i32, i32* %code.addr, align 4
  %shr = lshr i32 %2, 1
  store i32 %shr, i32* %code.addr, align 4
  %3 = load i32, i32* %res, align 4
  %shl = shl i32 %3, 1
  store i32 %shl, i32* %res, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %4 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i32, i32* %res, align 4
  %shr1 = lshr i32 %5, 1
  ret i32 %shr1
}

; Function Attrs: noinline nounwind
define void @bi_windup() #0 {
entry:
  %0 = load i32, i32* @bi_valid, align 4
  %cmp = icmp sgt i32 %0, 8
  br i1 %cmp, label %if.then, label %if.else26

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @outcnt, align 4
  %cmp1 = icmp ult i32 %1, 16382
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %2 = load i16, i16* @bi_buf, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 255
  %conv3 = trunc i32 %and to i8
  %3 = load i32, i32* @outcnt, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* @outcnt, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %3
  store i8 %conv3, i8* %arrayidx, align 1
  %4 = load i16, i16* @bi_buf, align 2
  %conv4 = zext i16 %4 to i32
  %shr = ashr i32 %conv4, 8
  %conv5 = trunc i32 %shr to i8
  %5 = load i32, i32* @outcnt, align 4
  %inc6 = add i32 %5, 1
  store i32 %inc6, i32* @outcnt, align 4
  %arrayidx7 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %5
  store i8 %conv5, i8* %arrayidx7, align 1
  br label %if.end25

if.else:                                          ; preds = %if.then
  %6 = load i16, i16* @bi_buf, align 2
  %conv8 = zext i16 %6 to i32
  %and9 = and i32 %conv8, 255
  %conv10 = trunc i32 %and9 to i8
  %7 = load i32, i32* @outcnt, align 4
  %inc11 = add i32 %7, 1
  store i32 %inc11, i32* @outcnt, align 4
  %arrayidx12 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %7
  store i8 %conv10, i8* %arrayidx12, align 1
  %8 = load i32, i32* @outcnt, align 4
  %cmp13 = icmp eq i32 %8, 16384
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.else
  call void @flush_outbuf()
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.else
  %9 = load i16, i16* @bi_buf, align 2
  %conv16 = zext i16 %9 to i32
  %shr17 = ashr i32 %conv16, 8
  %conv18 = trunc i32 %shr17 to i8
  %10 = load i32, i32* @outcnt, align 4
  %inc19 = add i32 %10, 1
  store i32 %inc19, i32* @outcnt, align 4
  %arrayidx20 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %10
  store i8 %conv18, i8* %arrayidx20, align 1
  %11 = load i32, i32* @outcnt, align 4
  %cmp21 = icmp eq i32 %11, 16384
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  call void @flush_outbuf()
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then2
  br label %if.end38

if.else26:                                        ; preds = %entry
  %12 = load i32, i32* @bi_valid, align 4
  %cmp27 = icmp sgt i32 %12, 0
  br i1 %cmp27, label %if.then29, label %if.end37

if.then29:                                        ; preds = %if.else26
  %13 = load i16, i16* @bi_buf, align 2
  %conv30 = trunc i16 %13 to i8
  %14 = load i32, i32* @outcnt, align 4
  %inc31 = add i32 %14, 1
  store i32 %inc31, i32* @outcnt, align 4
  %arrayidx32 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %14
  store i8 %conv30, i8* %arrayidx32, align 1
  %15 = load i32, i32* @outcnt, align 4
  %cmp33 = icmp eq i32 %15, 16384
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.then29
  call void @flush_outbuf()
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then29
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.else26
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end25
  store i16 0, i16* @bi_buf, align 2
  store i32 0, i32* @bi_valid, align 4
  ret void
}

; Function Attrs: noinline nounwind
define void @copy_block(i8* %buf, i32 %len, i32 %header) #0 {
entry:
  %header.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  store i32 %header, i32* %header.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  call void @bi_windup()
  %0 = load i32, i32* %header.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end69

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @outcnt, align 4
  %cmp = icmp ult i32 %1, 16382
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %2 = load i32, i32* %len.addr, align 4
  %conv = trunc i32 %2 to i16
  %conv2 = zext i16 %conv to i32
  %and = and i32 %conv2, 255
  %conv3 = trunc i32 %and to i8
  %3 = load i32, i32* @outcnt, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* @outcnt, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %3
  store i8 %conv3, i8* %arrayidx, align 1
  %4 = load i32, i32* %len.addr, align 4
  %conv4 = trunc i32 %4 to i16
  %conv5 = zext i16 %conv4 to i32
  %shr = ashr i32 %conv5, 8
  %conv6 = trunc i32 %shr to i8
  %5 = load i32, i32* @outcnt, align 4
  %inc7 = add i32 %5, 1
  store i32 %inc7, i32* @outcnt, align 4
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %5
  store i8 %conv6, i8* %arrayidx8, align 1
  br label %if.end28

if.else:                                          ; preds = %if.then
  %6 = load i32, i32* %len.addr, align 4
  %conv9 = trunc i32 %6 to i16
  %conv10 = zext i16 %conv9 to i32
  %and11 = and i32 %conv10, 255
  %conv12 = trunc i32 %and11 to i8
  %7 = load i32, i32* @outcnt, align 4
  %inc13 = add i32 %7, 1
  store i32 %inc13, i32* @outcnt, align 4
  %arrayidx14 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %7
  store i8 %conv12, i8* %arrayidx14, align 1
  %8 = load i32, i32* @outcnt, align 4
  %cmp15 = icmp eq i32 %8, 16384
  br i1 %cmp15, label %if.then17, label %if.end

if.then17:                                        ; preds = %if.else
  call void @flush_outbuf()
  br label %if.end

if.end:                                           ; preds = %if.then17, %if.else
  %9 = load i32, i32* %len.addr, align 4
  %conv18 = trunc i32 %9 to i16
  %conv19 = zext i16 %conv18 to i32
  %shr20 = ashr i32 %conv19, 8
  %conv21 = trunc i32 %shr20 to i8
  %10 = load i32, i32* @outcnt, align 4
  %inc22 = add i32 %10, 1
  store i32 %inc22, i32* @outcnt, align 4
  %arrayidx23 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %10
  store i8 %conv21, i8* %arrayidx23, align 1
  %11 = load i32, i32* @outcnt, align 4
  %cmp24 = icmp eq i32 %11, 16384
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end
  call void @flush_outbuf()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then1
  %12 = load i32, i32* @outcnt, align 4
  %cmp29 = icmp ult i32 %12, 16382
  br i1 %cmp29, label %if.then31, label %if.else45

if.then31:                                        ; preds = %if.end28
  %13 = load i32, i32* %len.addr, align 4
  %neg = xor i32 %13, -1
  %conv32 = trunc i32 %neg to i16
  %conv33 = zext i16 %conv32 to i32
  %and34 = and i32 %conv33, 255
  %conv35 = trunc i32 %and34 to i8
  %14 = load i32, i32* @outcnt, align 4
  %inc36 = add i32 %14, 1
  store i32 %inc36, i32* @outcnt, align 4
  %arrayidx37 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %14
  store i8 %conv35, i8* %arrayidx37, align 1
  %15 = load i32, i32* %len.addr, align 4
  %neg38 = xor i32 %15, -1
  %conv39 = trunc i32 %neg38 to i16
  %conv40 = zext i16 %conv39 to i32
  %shr41 = ashr i32 %conv40, 8
  %conv42 = trunc i32 %shr41 to i8
  %16 = load i32, i32* @outcnt, align 4
  %inc43 = add i32 %16, 1
  store i32 %inc43, i32* @outcnt, align 4
  %arrayidx44 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %16
  store i8 %conv42, i8* %arrayidx44, align 1
  br label %if.end68

if.else45:                                        ; preds = %if.end28
  %17 = load i32, i32* %len.addr, align 4
  %neg46 = xor i32 %17, -1
  %conv47 = trunc i32 %neg46 to i16
  %conv48 = zext i16 %conv47 to i32
  %and49 = and i32 %conv48, 255
  %conv50 = trunc i32 %and49 to i8
  %18 = load i32, i32* @outcnt, align 4
  %inc51 = add i32 %18, 1
  store i32 %inc51, i32* @outcnt, align 4
  %arrayidx52 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %18
  store i8 %conv50, i8* %arrayidx52, align 1
  %19 = load i32, i32* @outcnt, align 4
  %cmp53 = icmp eq i32 %19, 16384
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.else45
  call void @flush_outbuf()
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.else45
  %20 = load i32, i32* %len.addr, align 4
  %neg57 = xor i32 %20, -1
  %conv58 = trunc i32 %neg57 to i16
  %conv59 = zext i16 %conv58 to i32
  %shr60 = ashr i32 %conv59, 8
  %conv61 = trunc i32 %shr60 to i8
  %21 = load i32, i32* @outcnt, align 4
  %inc62 = add i32 %21, 1
  store i32 %inc62, i32* @outcnt, align 4
  %arrayidx63 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %21
  store i8 %conv61, i8* %arrayidx63, align 1
  %22 = load i32, i32* @outcnt, align 4
  %cmp64 = icmp eq i32 %22, 16384
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end56
  call void @flush_outbuf()
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end56
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then31
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end76, %if.end69
  %23 = load i32, i32* %len.addr, align 4
  %dec = add i32 %23, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool70 = icmp ne i32 %23, 0
  br i1 %tobool70, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %24 = load i8*, i8** %buf.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr, i8** %buf.addr, align 4
  %25 = load i8, i8* %24, align 1
  %26 = load i32, i32* @outcnt, align 4
  %inc71 = add i32 %26, 1
  store i32 %inc71, i32* @outcnt, align 4
  %arrayidx72 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %26
  store i8 %25, i8* %arrayidx72, align 1
  %27 = load i32, i32* @outcnt, align 4
  %cmp73 = icmp eq i32 %27, 16384
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %while.body
  call void @flush_outbuf()
  br label %if.end76

if.end76:                                         ; preds = %if.then75, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind
define void @lm_init(i32 %pack_level, i16* %flags) #0 {
entry:
  %flags.addr = alloca i16*, align 4
  %pack_level.addr = alloca i32, align 4
  %j = alloca i32, align 4
  store i16* %flags, i16** %flags.addr, align 4
  store i32 %pack_level, i32* %pack_level.addr, align 4
  %0 = load i32, i32* %pack_level.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %pack_level.addr, align 4
  %cmp1 = icmp sgt i32 %1, 9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %2 = load i32, i32* %pack_level.addr, align 4
  store i32 %2, i32* @compr_level, align 4
  call void @llvm.memset.p0i8.i32(i8* bitcast (i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768) to i8*), i8 0, i32 65536, i32 1, i1 false)
  %3 = load i32, i32* %pack_level.addr, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i32 0, i32 %3
  %max_lazy = getelementptr inbounds %struct.config, %struct.config* %arrayidx, i32 0, i32 1
  %4 = load i16, i16* %max_lazy, align 2
  %conv = zext i16 %4 to i32
  store i32 %conv, i32* @max_lazy_match, align 4
  %5 = load i32, i32* %pack_level.addr, align 4
  %arrayidx2 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i32 0, i32 %5
  %good_length = getelementptr inbounds %struct.config, %struct.config* %arrayidx2, i32 0, i32 0
  %6 = load i16, i16* %good_length, align 2
  %conv3 = zext i16 %6 to i32
  store i32 %conv3, i32* @good_match, align 4
  %7 = load i32, i32* %pack_level.addr, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i32 0, i32 %7
  %nice_length = getelementptr inbounds %struct.config, %struct.config* %arrayidx4, i32 0, i32 2
  %8 = load i16, i16* %nice_length, align 2
  %conv5 = zext i16 %8 to i32
  store i32 %conv5, i32* @nice_match, align 4
  %9 = load i32, i32* %pack_level.addr, align 4
  %arrayidx6 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i32 0, i32 %9
  %max_chain = getelementptr inbounds %struct.config, %struct.config* %arrayidx6, i32 0, i32 3
  %10 = load i16, i16* %max_chain, align 2
  %conv7 = zext i16 %10 to i32
  store i32 %conv7, i32* @max_chain_length, align 4
  %11 = load i32, i32* %pack_level.addr, align 4
  %cmp8 = icmp eq i32 %11, 1
  br i1 %cmp8, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end
  %12 = load i16*, i16** %flags.addr, align 4
  %13 = load i16, i16* %12, align 2
  %conv11 = zext i16 %13 to i32
  %or = or i32 %conv11, 4
  %conv12 = trunc i32 %or to i16
  store i16 %conv12, i16* %12, align 2
  br label %if.end20

if.else:                                          ; preds = %if.end
  %14 = load i32, i32* %pack_level.addr, align 4
  %cmp13 = icmp eq i32 %14, 9
  br i1 %cmp13, label %if.then15, label %if.end19

if.then15:                                        ; preds = %if.else
  %15 = load i16*, i16** %flags.addr, align 4
  %16 = load i16, i16* %15, align 2
  %conv16 = zext i16 %16 to i32
  %or17 = or i32 %conv16, 2
  %conv18 = trunc i32 %or17 to i16
  store i16 %conv18, i16* %15, align 2
  br label %if.end19

if.end19:                                         ; preds = %if.then15, %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then10
  store i32 0, i32* @strstart, align 4
  store i32 0, i32* @block_start, align 4
  %17 = load i32 (i8*, i32)*, i32 (i8*, i32)** @read_buf, align 4
  %call = call i32 %17(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 65536)
  store i32 %call, i32* @lookahead, align 4
  %18 = load i32, i32* @lookahead, align 4
  %cmp21 = icmp eq i32 %18, 0
  br i1 %cmp21, label %if.then26, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %if.end20
  %19 = load i32, i32* @lookahead, align 4
  %cmp24 = icmp eq i32 %19, -1
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %lor.lhs.false23, %if.end20
  store i32 1, i32* @eofile, align 4
  store i32 0, i32* @lookahead, align 4
  br label %for.end

if.end27:                                         ; preds = %lor.lhs.false23
  store i32 0, i32* @eofile, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end27
  %20 = load i32, i32* @lookahead, align 4
  %cmp28 = icmp ult i32 %20, 262
  br i1 %cmp28, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %21 = load i32, i32* @eofile, align 4
  %tobool = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %22 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %22, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  call void @fill_window()
  br label %while.cond

while.end:                                        ; preds = %land.end
  store i32 0, i32* @ins_h, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %23 = load i32, i32* %j, align 4
  %cmp30 = icmp ult i32 %23, 2
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* @ins_h, align 4
  %shl = shl i32 %24, 5
  %25 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %25
  %26 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %26 to i32
  %xor = xor i32 %shl, %conv33
  %and = and i32 %xor, 32767
  store i32 %and, i32* @ins_h, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %j, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.then26
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #1

; Function Attrs: noinline nounwind
define internal void @fill_window() #0 {
entry:
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %more = alloca i32, align 4
  %0 = load i32, i32* @window_size, align 4
  %1 = load i32, i32* @lookahead, align 4
  %sub = sub i32 %0, %1
  %2 = load i32, i32* @strstart, align 4
  %sub1 = sub i32 %sub, %2
  store i32 %sub1, i32* %more, align 4
  %3 = load i32, i32* %more, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %more, align 4
  %dec = add i32 %4, -1
  store i32 %dec, i32* %more, align 4
  br label %if.end31

if.else:                                          ; preds = %entry
  %5 = load i32, i32* @strstart, align 4
  %cmp2 = icmp uge i32 %5, 65274
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 32768), i32 32768, i32 1, i1 false)
  %6 = load i32, i32* @match_start, align 4
  %sub4 = sub i32 %6, 32768
  store i32 %sub4, i32* @match_start, align 4
  %7 = load i32, i32* @strstart, align 4
  %sub5 = sub i32 %7, 32768
  store i32 %sub5, i32* @strstart, align 4
  %8 = load i32, i32* @block_start, align 4
  %sub6 = sub nsw i32 %8, 32768
  store i32 %sub6, i32* @block_start, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %9 = load i32, i32* %n, align 4
  %cmp7 = icmp ult i32 %9, 32768
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %10
  %11 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %11 to i32
  store i32 %conv, i32* %m, align 4
  %12 = load i32, i32* %m, align 4
  %cmp8 = icmp uge i32 %12, 32768
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load i32, i32* %m, align 4
  %sub10 = sub i32 %13, 32768
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub10, %cond.true ], [ 0, %cond.false ]
  %conv11 = trunc i32 %cond to i16
  %14 = load i32, i32* %n, align 4
  %arrayidx12 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %14
  store i16 %conv11, i16* %arrayidx12, align 2
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %15 = load i32, i32* %n, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %n, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc28, %for.end
  %16 = load i32, i32* %n, align 4
  %cmp14 = icmp ult i32 %16, 32768
  br i1 %cmp14, label %for.body16, label %for.end30

for.body16:                                       ; preds = %for.cond13
  %17 = load i32, i32* %n, align 4
  %arrayidx17 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %17
  %18 = load i16, i16* %arrayidx17, align 2
  %conv18 = zext i16 %18 to i32
  store i32 %conv18, i32* %m, align 4
  %19 = load i32, i32* %m, align 4
  %cmp19 = icmp uge i32 %19, 32768
  br i1 %cmp19, label %cond.true21, label %cond.false23

cond.true21:                                      ; preds = %for.body16
  %20 = load i32, i32* %m, align 4
  %sub22 = sub i32 %20, 32768
  br label %cond.end24

cond.false23:                                     ; preds = %for.body16
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi i32 [ %sub22, %cond.true21 ], [ 0, %cond.false23 ]
  %conv26 = trunc i32 %cond25 to i16
  %21 = load i32, i32* %n, align 4
  %arrayidx27 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %21
  store i16 %conv26, i16* %arrayidx27, align 2
  br label %for.inc28

for.inc28:                                        ; preds = %cond.end24
  %22 = load i32, i32* %n, align 4
  %inc29 = add i32 %22, 1
  store i32 %inc29, i32* %n, align 4
  br label %for.cond13

for.end30:                                        ; preds = %for.cond13
  %23 = load i32, i32* %more, align 4
  %add = add i32 %23, 32768
  store i32 %add, i32* %more, align 4
  br label %if.end

if.end:                                           ; preds = %for.end30, %if.else
  br label %if.end31

if.end31:                                         ; preds = %if.end, %if.then
  %24 = load i32, i32* @eofile, align 4
  %tobool = icmp ne i32 %24, 0
  br i1 %tobool, label %if.end42, label %if.then32

if.then32:                                        ; preds = %if.end31
  %25 = load i32 (i8*, i32)*, i32 (i8*, i32)** @read_buf, align 4
  %26 = load i32, i32* %more, align 4
  %27 = load i32, i32* @strstart, align 4
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %27
  %28 = load i32, i32* @lookahead, align 4
  %add.ptr33 = getelementptr inbounds i8, i8* %add.ptr, i32 %28
  %call = call i32 %25(i8* %add.ptr33, i32 %26)
  store i32 %call, i32* %n, align 4
  %29 = load i32, i32* %n, align 4
  %cmp34 = icmp eq i32 %29, 0
  br i1 %cmp34, label %if.then38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then32
  %30 = load i32, i32* %n, align 4
  %cmp36 = icmp eq i32 %30, -1
  br i1 %cmp36, label %if.then38, label %if.else39

if.then38:                                        ; preds = %lor.lhs.false, %if.then32
  store i32 1, i32* @eofile, align 4
  br label %if.end41

if.else39:                                        ; preds = %lor.lhs.false
  %31 = load i32, i32* %n, align 4
  %32 = load i32, i32* @lookahead, align 4
  %add40 = add i32 %32, %31
  store i32 %add40, i32* @lookahead, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then38
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end31
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #1

; Function Attrs: noinline nounwind
define i32 @longest_match(i32 %cur_match) #0 {
entry:
  %cur_match.addr = alloca i32, align 4
  %chain_length = alloca i32, align 4
  %scan = alloca i8*, align 4
  %match = alloca i8*, align 4
  %len = alloca i32, align 4
  %best_len = alloca i32, align 4
  %limit = alloca i32, align 4
  %strend = alloca i8*, align 4
  %scan_end1 = alloca i8, align 1
  %scan_end = alloca i8, align 1
  store i32 %cur_match, i32* %cur_match.addr, align 4
  %0 = load i32, i32* @max_chain_length, align 4
  store i32 %0, i32* %chain_length, align 4
  %1 = load i32, i32* @strstart, align 4
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %1
  store i8* %add.ptr, i8** %scan, align 4
  %2 = load i32, i32* @prev_length, align 4
  store i32 %2, i32* %best_len, align 4
  %3 = load i32, i32* @strstart, align 4
  %cmp = icmp ugt i32 %3, 32506
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* @strstart, align 4
  %sub = sub i32 %4, 32506
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %limit, align 4
  %5 = load i32, i32* @strstart, align 4
  %add.ptr1 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %5
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr1, i32 258
  store i8* %add.ptr2, i8** %strend, align 4
  %6 = load i32, i32* %best_len, align 4
  %sub3 = sub nsw i32 %6, 1
  %7 = load i8*, i8** %scan, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %sub3
  %8 = load i8, i8* %arrayidx, align 1
  store i8 %8, i8* %scan_end1, align 1
  %9 = load i32, i32* %best_len, align 4
  %10 = load i8*, i8** %scan, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %10, i32 %9
  %11 = load i8, i8* %arrayidx4, align 1
  store i8 %11, i8* %scan_end, align 1
  %12 = load i32, i32* @prev_length, align 4
  %13 = load i32, i32* @good_match, align 4
  %cmp5 = icmp uge i32 %12, %13
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %14 = load i32, i32* %chain_length, align 4
  %shr = lshr i32 %14, 2
  store i32 %shr, i32* %chain_length, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %do.body

do.body:                                          ; preds = %land.end110, %if.end
  %15 = load i32, i32* %cur_match.addr, align 4
  %add.ptr6 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %15
  store i8* %add.ptr6, i8** %match, align 4
  %16 = load i32, i32* %best_len, align 4
  %17 = load i8*, i8** %match, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %17, i32 %16
  %18 = load i8, i8* %arrayidx7, align 1
  %conv = zext i8 %18 to i32
  %19 = load i8, i8* %scan_end, align 1
  %conv8 = zext i8 %19 to i32
  %cmp9 = icmp ne i32 %conv, %conv8
  br i1 %cmp9, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body
  %20 = load i32, i32* %best_len, align 4
  %sub11 = sub nsw i32 %20, 1
  %21 = load i8*, i8** %match, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %21, i32 %sub11
  %22 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %22 to i32
  %23 = load i8, i8* %scan_end1, align 1
  %conv14 = zext i8 %23 to i32
  %cmp15 = icmp ne i32 %conv13, %conv14
  br i1 %cmp15, label %if.then28, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %24 = load i8*, i8** %match, align 4
  %25 = load i8, i8* %24, align 1
  %conv18 = zext i8 %25 to i32
  %26 = load i8*, i8** %scan, align 4
  %27 = load i8, i8* %26, align 1
  %conv19 = zext i8 %27 to i32
  %cmp20 = icmp ne i32 %conv18, %conv19
  br i1 %cmp20, label %if.then28, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %lor.lhs.false17
  %28 = load i8*, i8** %match, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr, i8** %match, align 4
  %29 = load i8, i8* %incdec.ptr, align 1
  %conv23 = zext i8 %29 to i32
  %30 = load i8*, i8** %scan, align 4
  %arrayidx24 = getelementptr inbounds i8, i8* %30, i32 1
  %31 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %31 to i32
  %cmp26 = icmp ne i32 %conv23, %conv25
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %lor.lhs.false22, %lor.lhs.false17, %lor.lhs.false, %do.body
  br label %do.cond102

if.end29:                                         ; preds = %lor.lhs.false22
  %32 = load i8*, i8** %scan, align 4
  %add.ptr30 = getelementptr inbounds i8, i8* %32, i32 2
  store i8* %add.ptr30, i8** %scan, align 4
  %33 = load i8*, i8** %match, align 4
  %incdec.ptr31 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr31, i8** %match, align 4
  br label %do.body32

do.body32:                                        ; preds = %land.end, %if.end29
  br label %do.cond

do.cond:                                          ; preds = %do.body32
  %34 = load i8*, i8** %scan, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr33, i8** %scan, align 4
  %35 = load i8, i8* %incdec.ptr33, align 1
  %conv34 = zext i8 %35 to i32
  %36 = load i8*, i8** %match, align 4
  %incdec.ptr35 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr35, i8** %match, align 4
  %37 = load i8, i8* %incdec.ptr35, align 1
  %conv36 = zext i8 %37 to i32
  %cmp37 = icmp eq i32 %conv34, %conv36
  br i1 %cmp37, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %do.cond
  %38 = load i8*, i8** %scan, align 4
  %incdec.ptr39 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr39, i8** %scan, align 4
  %39 = load i8, i8* %incdec.ptr39, align 1
  %conv40 = zext i8 %39 to i32
  %40 = load i8*, i8** %match, align 4
  %incdec.ptr41 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %incdec.ptr41, i8** %match, align 4
  %41 = load i8, i8* %incdec.ptr41, align 1
  %conv42 = zext i8 %41 to i32
  %cmp43 = icmp eq i32 %conv40, %conv42
  br i1 %cmp43, label %land.lhs.true45, label %land.end

land.lhs.true45:                                  ; preds = %land.lhs.true
  %42 = load i8*, i8** %scan, align 4
  %incdec.ptr46 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr46, i8** %scan, align 4
  %43 = load i8, i8* %incdec.ptr46, align 1
  %conv47 = zext i8 %43 to i32
  %44 = load i8*, i8** %match, align 4
  %incdec.ptr48 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr48, i8** %match, align 4
  %45 = load i8, i8* %incdec.ptr48, align 1
  %conv49 = zext i8 %45 to i32
  %cmp50 = icmp eq i32 %conv47, %conv49
  br i1 %cmp50, label %land.lhs.true52, label %land.end

land.lhs.true52:                                  ; preds = %land.lhs.true45
  %46 = load i8*, i8** %scan, align 4
  %incdec.ptr53 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %incdec.ptr53, i8** %scan, align 4
  %47 = load i8, i8* %incdec.ptr53, align 1
  %conv54 = zext i8 %47 to i32
  %48 = load i8*, i8** %match, align 4
  %incdec.ptr55 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr55, i8** %match, align 4
  %49 = load i8, i8* %incdec.ptr55, align 1
  %conv56 = zext i8 %49 to i32
  %cmp57 = icmp eq i32 %conv54, %conv56
  br i1 %cmp57, label %land.lhs.true59, label %land.end

land.lhs.true59:                                  ; preds = %land.lhs.true52
  %50 = load i8*, i8** %scan, align 4
  %incdec.ptr60 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr60, i8** %scan, align 4
  %51 = load i8, i8* %incdec.ptr60, align 1
  %conv61 = zext i8 %51 to i32
  %52 = load i8*, i8** %match, align 4
  %incdec.ptr62 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %incdec.ptr62, i8** %match, align 4
  %53 = load i8, i8* %incdec.ptr62, align 1
  %conv63 = zext i8 %53 to i32
  %cmp64 = icmp eq i32 %conv61, %conv63
  br i1 %cmp64, label %land.lhs.true66, label %land.end

land.lhs.true66:                                  ; preds = %land.lhs.true59
  %54 = load i8*, i8** %scan, align 4
  %incdec.ptr67 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr67, i8** %scan, align 4
  %55 = load i8, i8* %incdec.ptr67, align 1
  %conv68 = zext i8 %55 to i32
  %56 = load i8*, i8** %match, align 4
  %incdec.ptr69 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr69, i8** %match, align 4
  %57 = load i8, i8* %incdec.ptr69, align 1
  %conv70 = zext i8 %57 to i32
  %cmp71 = icmp eq i32 %conv68, %conv70
  br i1 %cmp71, label %land.lhs.true73, label %land.end

land.lhs.true73:                                  ; preds = %land.lhs.true66
  %58 = load i8*, i8** %scan, align 4
  %incdec.ptr74 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr74, i8** %scan, align 4
  %59 = load i8, i8* %incdec.ptr74, align 1
  %conv75 = zext i8 %59 to i32
  %60 = load i8*, i8** %match, align 4
  %incdec.ptr76 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr76, i8** %match, align 4
  %61 = load i8, i8* %incdec.ptr76, align 1
  %conv77 = zext i8 %61 to i32
  %cmp78 = icmp eq i32 %conv75, %conv77
  br i1 %cmp78, label %land.lhs.true80, label %land.end

land.lhs.true80:                                  ; preds = %land.lhs.true73
  %62 = load i8*, i8** %scan, align 4
  %incdec.ptr81 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr81, i8** %scan, align 4
  %63 = load i8, i8* %incdec.ptr81, align 1
  %conv82 = zext i8 %63 to i32
  %64 = load i8*, i8** %match, align 4
  %incdec.ptr83 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr83, i8** %match, align 4
  %65 = load i8, i8* %incdec.ptr83, align 1
  %conv84 = zext i8 %65 to i32
  %cmp85 = icmp eq i32 %conv82, %conv84
  br i1 %cmp85, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true80
  %66 = load i8*, i8** %scan, align 4
  %67 = load i8*, i8** %strend, align 4
  %cmp87 = icmp ult i8* %66, %67
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true80, %land.lhs.true73, %land.lhs.true66, %land.lhs.true59, %land.lhs.true52, %land.lhs.true45, %land.lhs.true, %do.cond
  %68 = phi i1 [ false, %land.lhs.true80 ], [ false, %land.lhs.true73 ], [ false, %land.lhs.true66 ], [ false, %land.lhs.true59 ], [ false, %land.lhs.true52 ], [ false, %land.lhs.true45 ], [ false, %land.lhs.true ], [ false, %do.cond ], [ %cmp87, %land.rhs ]
  br i1 %68, label %do.body32, label %do.end

do.end:                                           ; preds = %land.end
  %69 = load i8*, i8** %strend, align 4
  %70 = load i8*, i8** %scan, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %69 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %70 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub89 = sub nsw i32 258, %sub.ptr.sub
  store i32 %sub89, i32* %len, align 4
  %71 = load i8*, i8** %strend, align 4
  %add.ptr90 = getelementptr inbounds i8, i8* %71, i32 -258
  store i8* %add.ptr90, i8** %scan, align 4
  %72 = load i32, i32* %len, align 4
  %73 = load i32, i32* %best_len, align 4
  %cmp91 = icmp sgt i32 %72, %73
  br i1 %cmp91, label %if.then93, label %if.end101

if.then93:                                        ; preds = %do.end
  %74 = load i32, i32* %cur_match.addr, align 4
  store i32 %74, i32* @match_start, align 4
  %75 = load i32, i32* %len, align 4
  store i32 %75, i32* %best_len, align 4
  %76 = load i32, i32* %len, align 4
  %77 = load i32, i32* @nice_match, align 4
  %cmp94 = icmp sge i32 %76, %77
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.then93
  br label %do.end111

if.end97:                                         ; preds = %if.then93
  %78 = load i32, i32* %best_len, align 4
  %sub98 = sub nsw i32 %78, 1
  %79 = load i8*, i8** %scan, align 4
  %arrayidx99 = getelementptr inbounds i8, i8* %79, i32 %sub98
  %80 = load i8, i8* %arrayidx99, align 1
  store i8 %80, i8* %scan_end1, align 1
  %81 = load i32, i32* %best_len, align 4
  %82 = load i8*, i8** %scan, align 4
  %arrayidx100 = getelementptr inbounds i8, i8* %82, i32 %81
  %83 = load i8, i8* %arrayidx100, align 1
  store i8 %83, i8* %scan_end, align 1
  br label %if.end101

if.end101:                                        ; preds = %if.end97, %do.end
  br label %do.cond102

do.cond102:                                       ; preds = %if.end101, %if.then28
  %84 = load i32, i32* %cur_match.addr, align 4
  %and = and i32 %84, 32767
  %arrayidx103 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %and
  %85 = load i16, i16* %arrayidx103, align 2
  %conv104 = zext i16 %85 to i32
  store i32 %conv104, i32* %cur_match.addr, align 4
  %86 = load i32, i32* %limit, align 4
  %cmp105 = icmp ugt i32 %conv104, %86
  br i1 %cmp105, label %land.rhs107, label %land.end110

land.rhs107:                                      ; preds = %do.cond102
  %87 = load i32, i32* %chain_length, align 4
  %dec = add i32 %87, -1
  store i32 %dec, i32* %chain_length, align 4
  %cmp108 = icmp ne i32 %dec, 0
  br label %land.end110

land.end110:                                      ; preds = %land.rhs107, %do.cond102
  %88 = phi i1 [ false, %do.cond102 ], [ %cmp108, %land.rhs107 ]
  br i1 %88, label %do.body, label %do.end111

do.end111:                                        ; preds = %land.end110, %if.then96
  %89 = load i32, i32* %best_len, align 4
  ret i32 %89
}

; Function Attrs: noinline nounwind
define i32 @deflate() #0 {
entry:
  %retval = alloca i32, align 4
  %hash_head = alloca i32, align 4
  %prev_match = alloca i32, align 4
  %flush = alloca i32, align 4
  %match_available = alloca i32, align 4
  %match_length = alloca i32, align 4
  store i32 0, i32* %match_available, align 4
  store i32 2, i32* %match_length, align 4
  %0 = load i32, i32* @compr_level, align 4
  %cmp = icmp sle i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @deflate_fast()
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.end
  %1 = load i32, i32* @lookahead, align 4
  %cmp1 = icmp ne i32 %1, 0
  br i1 %cmp1, label %while.body, label %while.end100

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* @ins_h, align 4
  %shl = shl i32 %2, 5
  %3 = load i32, i32* @strstart, align 4
  %add = add i32 %3, 3
  %sub = sub i32 %add, 1
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %sub
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %xor = xor i32 %shl, %conv
  %and = and i32 %xor, 32767
  store i32 %and, i32* @ins_h, align 4
  %5 = load i32, i32* @ins_h, align 4
  %arrayidx2 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %5
  %6 = load i16, i16* %arrayidx2, align 2
  %conv3 = zext i16 %6 to i32
  store i32 %conv3, i32* %hash_head, align 4
  %conv4 = trunc i32 %conv3 to i16
  %7 = load i32, i32* @strstart, align 4
  %and5 = and i32 %7, 32767
  %arrayidx6 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %and5
  store i16 %conv4, i16* %arrayidx6, align 2
  %8 = load i32, i32* @strstart, align 4
  %conv7 = trunc i32 %8 to i16
  %9 = load i32, i32* @ins_h, align 4
  %arrayidx8 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %9
  store i16 %conv7, i16* %arrayidx8, align 2
  %10 = load i32, i32* %match_length, align 4
  store i32 %10, i32* @prev_length, align 4
  %11 = load i32, i32* @match_start, align 4
  store i32 %11, i32* %prev_match, align 4
  store i32 2, i32* %match_length, align 4
  %12 = load i32, i32* %hash_head, align 4
  %cmp9 = icmp ne i32 %12, 0
  br i1 %cmp9, label %land.lhs.true, label %if.end31

land.lhs.true:                                    ; preds = %while.body
  %13 = load i32, i32* @prev_length, align 4
  %14 = load i32, i32* @max_lazy_match, align 4
  %cmp11 = icmp ult i32 %13, %14
  br i1 %cmp11, label %land.lhs.true13, label %if.end31

land.lhs.true13:                                  ; preds = %land.lhs.true
  %15 = load i32, i32* @strstart, align 4
  %16 = load i32, i32* %hash_head, align 4
  %sub14 = sub i32 %15, %16
  %cmp15 = icmp ule i32 %sub14, 32506
  br i1 %cmp15, label %if.then17, label %if.end31

if.then17:                                        ; preds = %land.lhs.true13
  %17 = load i32, i32* %hash_head, align 4
  %call18 = call i32 @longest_match(i32 %17)
  store i32 %call18, i32* %match_length, align 4
  %18 = load i32, i32* %match_length, align 4
  %19 = load i32, i32* @lookahead, align 4
  %cmp19 = icmp ugt i32 %18, %19
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.then17
  %20 = load i32, i32* @lookahead, align 4
  store i32 %20, i32* %match_length, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %if.then17
  %21 = load i32, i32* %match_length, align 4
  %cmp23 = icmp eq i32 %21, 3
  br i1 %cmp23, label %land.lhs.true25, label %if.end30

land.lhs.true25:                                  ; preds = %if.end22
  %22 = load i32, i32* @strstart, align 4
  %23 = load i32, i32* @match_start, align 4
  %sub26 = sub i32 %22, %23
  %cmp27 = icmp ugt i32 %sub26, 4096
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %land.lhs.true25
  %24 = load i32, i32* %match_length, align 4
  %dec = add i32 %24, -1
  store i32 %dec, i32* %match_length, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %land.lhs.true25, %if.end22
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %land.lhs.true13, %land.lhs.true, %while.body
  %25 = load i32, i32* @prev_length, align 4
  %cmp32 = icmp uge i32 %25, 3
  br i1 %cmp32, label %land.lhs.true34, label %if.else

land.lhs.true34:                                  ; preds = %if.end31
  %26 = load i32, i32* %match_length, align 4
  %27 = load i32, i32* @prev_length, align 4
  %cmp35 = icmp ule i32 %26, %27
  br i1 %cmp35, label %if.then37, label %if.else

if.then37:                                        ; preds = %land.lhs.true34
  %28 = load i32, i32* @prev_length, align 4
  %sub38 = sub i32 %28, 3
  %29 = load i32, i32* @strstart, align 4
  %sub39 = sub i32 %29, 1
  %30 = load i32, i32* %prev_match, align 4
  %sub40 = sub i32 %sub39, %30
  %call41 = call i32 @ct_tally(i32 %sub40, i32 %sub38)
  store i32 %call41, i32* %flush, align 4
  %31 = load i32, i32* @prev_length, align 4
  %sub42 = sub i32 %31, 1
  %32 = load i32, i32* @lookahead, align 4
  %sub43 = sub i32 %32, %sub42
  store i32 %sub43, i32* @lookahead, align 4
  %33 = load i32, i32* @prev_length, align 4
  %sub44 = sub i32 %33, 2
  store i32 %sub44, i32* @prev_length, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then37
  %34 = load i32, i32* @strstart, align 4
  %inc = add i32 %34, 1
  store i32 %inc, i32* @strstart, align 4
  %35 = load i32, i32* @ins_h, align 4
  %shl45 = shl i32 %35, 5
  %36 = load i32, i32* @strstart, align 4
  %add46 = add i32 %36, 3
  %sub47 = sub i32 %add46, 1
  %arrayidx48 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %sub47
  %37 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %37 to i32
  %xor50 = xor i32 %shl45, %conv49
  %and51 = and i32 %xor50, 32767
  store i32 %and51, i32* @ins_h, align 4
  %38 = load i32, i32* @ins_h, align 4
  %arrayidx52 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %38
  %39 = load i16, i16* %arrayidx52, align 2
  %conv53 = zext i16 %39 to i32
  store i32 %conv53, i32* %hash_head, align 4
  %conv54 = trunc i32 %conv53 to i16
  %40 = load i32, i32* @strstart, align 4
  %and55 = and i32 %40, 32767
  %arrayidx56 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %and55
  store i16 %conv54, i16* %arrayidx56, align 2
  %41 = load i32, i32* @strstart, align 4
  %conv57 = trunc i32 %41 to i16
  %42 = load i32, i32* @ins_h, align 4
  %arrayidx58 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %42
  store i16 %conv57, i16* %arrayidx58, align 2
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %43 = load i32, i32* @prev_length, align 4
  %dec59 = add i32 %43, -1
  store i32 %dec59, i32* @prev_length, align 4
  %cmp60 = icmp ne i32 %dec59, 0
  br i1 %cmp60, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %match_available, align 4
  store i32 2, i32* %match_length, align 4
  %44 = load i32, i32* @strstart, align 4
  %inc62 = add i32 %44, 1
  store i32 %inc62, i32* @strstart, align 4
  %45 = load i32, i32* %flush, align 4
  %tobool = icmp ne i32 %45, 0
  br i1 %tobool, label %if.then63, label %if.end69

if.then63:                                        ; preds = %do.end
  %46 = load i32, i32* @strstart, align 4
  %47 = load i32, i32* @block_start, align 4
  %sub64 = sub nsw i32 %46, %47
  %48 = load i32, i32* @block_start, align 4
  %cmp65 = icmp sge i32 %48, 0
  br i1 %cmp65, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then63
  %49 = load i32, i32* @block_start, align 4
  %arrayidx67 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %49
  br label %cond.end

cond.false:                                       ; preds = %if.then63
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arrayidx67, %cond.true ], [ null, %cond.false ]
  %call68 = call i32 @flush_block(i8* %cond, i32 %sub64, i32 0)
  %50 = load i32, i32* @strstart, align 4
  store i32 %50, i32* @block_start, align 4
  br label %if.end69

if.end69:                                         ; preds = %cond.end, %do.end
  br label %if.end94

if.else:                                          ; preds = %land.lhs.true34, %if.end31
  %51 = load i32, i32* %match_available, align 4
  %tobool70 = icmp ne i32 %51, 0
  br i1 %tobool70, label %if.then71, label %if.else90

if.then71:                                        ; preds = %if.else
  %52 = load i32, i32* @strstart, align 4
  %sub72 = sub i32 %52, 1
  %arrayidx73 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %sub72
  %53 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %53 to i32
  %call75 = call i32 @ct_tally(i32 0, i32 %conv74)
  %tobool76 = icmp ne i32 %call75, 0
  br i1 %tobool76, label %if.then77, label %if.end87

if.then77:                                        ; preds = %if.then71
  %54 = load i32, i32* @strstart, align 4
  %55 = load i32, i32* @block_start, align 4
  %sub78 = sub nsw i32 %54, %55
  %56 = load i32, i32* @block_start, align 4
  %cmp79 = icmp sge i32 %56, 0
  br i1 %cmp79, label %cond.true81, label %cond.false83

cond.true81:                                      ; preds = %if.then77
  %57 = load i32, i32* @block_start, align 4
  %arrayidx82 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %57
  br label %cond.end84

cond.false83:                                     ; preds = %if.then77
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false83, %cond.true81
  %cond85 = phi i8* [ %arrayidx82, %cond.true81 ], [ null, %cond.false83 ]
  %call86 = call i32 @flush_block(i8* %cond85, i32 %sub78, i32 0)
  %58 = load i32, i32* @strstart, align 4
  store i32 %58, i32* @block_start, align 4
  br label %if.end87

if.end87:                                         ; preds = %cond.end84, %if.then71
  %59 = load i32, i32* @strstart, align 4
  %inc88 = add i32 %59, 1
  store i32 %inc88, i32* @strstart, align 4
  %60 = load i32, i32* @lookahead, align 4
  %dec89 = add i32 %60, -1
  store i32 %dec89, i32* @lookahead, align 4
  br label %if.end93

if.else90:                                        ; preds = %if.else
  store i32 1, i32* %match_available, align 4
  %61 = load i32, i32* @strstart, align 4
  %inc91 = add i32 %61, 1
  store i32 %inc91, i32* @strstart, align 4
  %62 = load i32, i32* @lookahead, align 4
  %dec92 = add i32 %62, -1
  store i32 %dec92, i32* @lookahead, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.else90, %if.end87
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.end69
  br label %while.cond95

while.cond95:                                     ; preds = %while.body99, %if.end94
  %63 = load i32, i32* @lookahead, align 4
  %cmp96 = icmp ult i32 %63, 262
  br i1 %cmp96, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond95
  %64 = load i32, i32* @eofile, align 4
  %tobool98 = icmp ne i32 %64, 0
  %lnot = xor i1 %tobool98, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond95
  %65 = phi i1 [ false, %while.cond95 ], [ %lnot, %land.rhs ]
  br i1 %65, label %while.body99, label %while.end

while.body99:                                     ; preds = %land.end
  call void @fill_window()
  br label %while.cond95

while.end:                                        ; preds = %land.end
  br label %while.cond

while.end100:                                     ; preds = %while.cond
  %66 = load i32, i32* %match_available, align 4
  %tobool101 = icmp ne i32 %66, 0
  br i1 %tobool101, label %if.then102, label %if.end107

if.then102:                                       ; preds = %while.end100
  %67 = load i32, i32* @strstart, align 4
  %sub103 = sub i32 %67, 1
  %arrayidx104 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %sub103
  %68 = load i8, i8* %arrayidx104, align 1
  %conv105 = zext i8 %68 to i32
  %call106 = call i32 @ct_tally(i32 0, i32 %conv105)
  br label %if.end107

if.end107:                                        ; preds = %if.then102, %while.end100
  %69 = load i32, i32* @strstart, align 4
  %70 = load i32, i32* @block_start, align 4
  %sub108 = sub nsw i32 %69, %70
  %71 = load i32, i32* @block_start, align 4
  %cmp109 = icmp sge i32 %71, 0
  br i1 %cmp109, label %cond.true111, label %cond.false113

cond.true111:                                     ; preds = %if.end107
  %72 = load i32, i32* @block_start, align 4
  %arrayidx112 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %72
  br label %cond.end114

cond.false113:                                    ; preds = %if.end107
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false113, %cond.true111
  %cond115 = phi i8* [ %arrayidx112, %cond.true111 ], [ null, %cond.false113 ]
  %call116 = call i32 @flush_block(i8* %cond115, i32 %sub108, i32 1)
  store i32 %call116, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end114, %if.then
  %73 = load i32, i32* %retval, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind
define internal i32 @deflate_fast() #0 {
entry:
  %hash_head = alloca i32, align 4
  %flush = alloca i32, align 4
  %match_length = alloca i32, align 4
  store i32 0, i32* %match_length, align 4
  store i32 2, i32* @prev_length, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %0 = load i32, i32* @lookahead, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end74

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* @ins_h, align 4
  %shl = shl i32 %1, 5
  %2 = load i32, i32* @strstart, align 4
  %add = add i32 %2, 3
  %sub = sub i32 %add, 1
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %sub
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %xor = xor i32 %shl, %conv
  %and = and i32 %xor, 32767
  store i32 %and, i32* @ins_h, align 4
  %4 = load i32, i32* @ins_h, align 4
  %arrayidx1 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %4
  %5 = load i16, i16* %arrayidx1, align 2
  %conv2 = zext i16 %5 to i32
  store i32 %conv2, i32* %hash_head, align 4
  %conv3 = trunc i32 %conv2 to i16
  %6 = load i32, i32* @strstart, align 4
  %and4 = and i32 %6, 32767
  %arrayidx5 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %and4
  store i16 %conv3, i16* %arrayidx5, align 2
  %7 = load i32, i32* @strstart, align 4
  %conv6 = trunc i32 %7 to i16
  %8 = load i32, i32* @ins_h, align 4
  %arrayidx7 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %8
  store i16 %conv6, i16* %arrayidx7, align 2
  %9 = load i32, i32* %hash_head, align 4
  %cmp8 = icmp ne i32 %9, 0
  br i1 %cmp8, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %while.body
  %10 = load i32, i32* @strstart, align 4
  %11 = load i32, i32* %hash_head, align 4
  %sub10 = sub i32 %10, %11
  %cmp11 = icmp ule i32 %sub10, 32506
  br i1 %cmp11, label %if.then, label %if.end16

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %hash_head, align 4
  %call = call i32 @longest_match(i32 %12)
  store i32 %call, i32* %match_length, align 4
  %13 = load i32, i32* %match_length, align 4
  %14 = load i32, i32* @lookahead, align 4
  %cmp13 = icmp ugt i32 %13, %14
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %15 = load i32, i32* @lookahead, align 4
  store i32 %15, i32* %match_length, align 4
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  br label %if.end16

if.end16:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %16 = load i32, i32* %match_length, align 4
  %cmp17 = icmp uge i32 %16, 3
  br i1 %cmp17, label %if.then19, label %if.else55

if.then19:                                        ; preds = %if.end16
  %17 = load i32, i32* %match_length, align 4
  %sub20 = sub i32 %17, 3
  %18 = load i32, i32* @strstart, align 4
  %19 = load i32, i32* @match_start, align 4
  %sub21 = sub i32 %18, %19
  %call22 = call i32 @ct_tally(i32 %sub21, i32 %sub20)
  store i32 %call22, i32* %flush, align 4
  %20 = load i32, i32* %match_length, align 4
  %21 = load i32, i32* @lookahead, align 4
  %sub23 = sub i32 %21, %20
  store i32 %sub23, i32* @lookahead, align 4
  %22 = load i32, i32* %match_length, align 4
  %23 = load i32, i32* @max_lazy_match, align 4
  %cmp24 = icmp ule i32 %22, %23
  br i1 %cmp24, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then19
  %24 = load i32, i32* %match_length, align 4
  %dec = add i32 %24, -1
  store i32 %dec, i32* %match_length, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then26
  %25 = load i32, i32* @strstart, align 4
  %inc = add i32 %25, 1
  store i32 %inc, i32* @strstart, align 4
  %26 = load i32, i32* @ins_h, align 4
  %shl27 = shl i32 %26, 5
  %27 = load i32, i32* @strstart, align 4
  %add28 = add i32 %27, 3
  %sub29 = sub i32 %add28, 1
  %arrayidx30 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %sub29
  %28 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %28 to i32
  %xor32 = xor i32 %shl27, %conv31
  %and33 = and i32 %xor32, 32767
  store i32 %and33, i32* @ins_h, align 4
  %29 = load i32, i32* @ins_h, align 4
  %arrayidx34 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %29
  %30 = load i16, i16* %arrayidx34, align 2
  %conv35 = zext i16 %30 to i32
  store i32 %conv35, i32* %hash_head, align 4
  %conv36 = trunc i32 %conv35 to i16
  %31 = load i32, i32* @strstart, align 4
  %and37 = and i32 %31, 32767
  %arrayidx38 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %and37
  store i16 %conv36, i16* %arrayidx38, align 2
  %32 = load i32, i32* @strstart, align 4
  %conv39 = trunc i32 %32 to i16
  %33 = load i32, i32* @ins_h, align 4
  %arrayidx40 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %33
  store i16 %conv39, i16* %arrayidx40, align 2
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %34 = load i32, i32* %match_length, align 4
  %dec41 = add i32 %34, -1
  store i32 %dec41, i32* %match_length, align 4
  %cmp42 = icmp ne i32 %dec41, 0
  br i1 %cmp42, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %35 = load i32, i32* @strstart, align 4
  %inc44 = add i32 %35, 1
  store i32 %inc44, i32* @strstart, align 4
  br label %if.end54

if.else:                                          ; preds = %if.then19
  %36 = load i32, i32* %match_length, align 4
  %37 = load i32, i32* @strstart, align 4
  %add45 = add i32 %37, %36
  store i32 %add45, i32* @strstart, align 4
  store i32 0, i32* %match_length, align 4
  %38 = load i32, i32* @strstart, align 4
  %arrayidx46 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %38
  %39 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %39 to i32
  store i32 %conv47, i32* @ins_h, align 4
  %40 = load i32, i32* @ins_h, align 4
  %shl48 = shl i32 %40, 5
  %41 = load i32, i32* @strstart, align 4
  %add49 = add i32 %41, 1
  %arrayidx50 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %add49
  %42 = load i8, i8* %arrayidx50, align 1
  %conv51 = zext i8 %42 to i32
  %xor52 = xor i32 %shl48, %conv51
  %and53 = and i32 %xor52, 32767
  store i32 %and53, i32* @ins_h, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.else, %do.end
  br label %if.end61

if.else55:                                        ; preds = %if.end16
  %43 = load i32, i32* @strstart, align 4
  %arrayidx56 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %43
  %44 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %44 to i32
  %call58 = call i32 @ct_tally(i32 0, i32 %conv57)
  store i32 %call58, i32* %flush, align 4
  %45 = load i32, i32* @lookahead, align 4
  %dec59 = add i32 %45, -1
  store i32 %dec59, i32* @lookahead, align 4
  %46 = load i32, i32* @strstart, align 4
  %inc60 = add i32 %46, 1
  store i32 %inc60, i32* @strstart, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.else55, %if.end54
  %47 = load i32, i32* %flush, align 4
  %tobool = icmp ne i32 %47, 0
  br i1 %tobool, label %if.then62, label %if.end68

if.then62:                                        ; preds = %if.end61
  %48 = load i32, i32* @strstart, align 4
  %49 = load i32, i32* @block_start, align 4
  %sub63 = sub nsw i32 %48, %49
  %50 = load i32, i32* @block_start, align 4
  %cmp64 = icmp sge i32 %50, 0
  br i1 %cmp64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then62
  %51 = load i32, i32* @block_start, align 4
  %arrayidx66 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %51
  br label %cond.end

cond.false:                                       ; preds = %if.then62
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arrayidx66, %cond.true ], [ null, %cond.false ]
  %call67 = call i32 @flush_block(i8* %cond, i32 %sub63, i32 0)
  %52 = load i32, i32* @strstart, align 4
  store i32 %52, i32* @block_start, align 4
  br label %if.end68

if.end68:                                         ; preds = %cond.end, %if.end61
  br label %while.cond69

while.cond69:                                     ; preds = %while.body73, %if.end68
  %53 = load i32, i32* @lookahead, align 4
  %cmp70 = icmp ult i32 %53, 262
  br i1 %cmp70, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond69
  %54 = load i32, i32* @eofile, align 4
  %tobool72 = icmp ne i32 %54, 0
  %lnot = xor i1 %tobool72, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond69
  %55 = phi i1 [ false, %while.cond69 ], [ %lnot, %land.rhs ]
  br i1 %55, label %while.body73, label %while.end

while.body73:                                     ; preds = %land.end
  call void @fill_window()
  br label %while.cond69

while.end:                                        ; preds = %land.end
  br label %while.cond

while.end74:                                      ; preds = %while.cond
  %56 = load i32, i32* @strstart, align 4
  %57 = load i32, i32* @block_start, align 4
  %sub75 = sub nsw i32 %56, %57
  %58 = load i32, i32* @block_start, align 4
  %cmp76 = icmp sge i32 %58, 0
  br i1 %cmp76, label %cond.true78, label %cond.false80

cond.true78:                                      ; preds = %while.end74
  %59 = load i32, i32* @block_start, align 4
  %arrayidx79 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %59
  br label %cond.end81

cond.false80:                                     ; preds = %while.end74
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false80, %cond.true78
  %cond82 = phi i8* [ %arrayidx79, %cond.true78 ], [ null, %cond.false80 ]
  %call83 = call i32 @flush_block(i8* %cond82, i32 %sub75, i32 1)
  ret i32 %call83
}

; Function Attrs: noinline nounwind
define i32 @_getopt_internal(i32 %argc, i8** %argv, i8* %optstring, %struct.option* %longopts, i32* %longind, i32 %long_only) #0 {
entry:
  %retval = alloca i32, align 4
  %long_only.addr = alloca i32, align 4
  %longind.addr = alloca i32*, align 4
  %longopts.addr = alloca %struct.option*, align 4
  %optstring.addr = alloca i8*, align 4
  %argv.addr = alloca i8**, align 4
  %argc.addr = alloca i32, align 4
  %option_index = alloca i32, align 4
  %p = alloca %struct.option*, align 4
  %s = alloca i8*, align 4
  %exact = alloca i32, align 4
  %ambig = alloca i32, align 4
  %pfound = alloca %struct.option*, align 4
  %indfound = alloca i32, align 4
  %c = alloca i8, align 1
  %temp = alloca i8*, align 4
  store i32 %long_only, i32* %long_only.addr, align 4
  store i32* %longind, i32** %longind.addr, align 4
  store %struct.option* %longopts, %struct.option** %longopts.addr, align 4
  store i8* %optstring, i8** %optstring.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8* null, i8** @optarg, align 4
  %0 = load i32, i32* @optind, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end17

if.then:                                          ; preds = %entry
  store i32 1, i32* @optind, align 4
  store i32 1, i32* @last_nonopt, align 4
  store i32 1, i32* @first_nonopt, align 4
  store i8* null, i8** @nextchar, align 4
  %1 = load i8*, i8** %optstring.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 45
  br i1 %cmp1, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  store i32 2, i32* @ordering, align 4
  %3 = load i8*, i8** %optstring.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %optstring.addr, align 4
  br label %if.end16

if.else:                                          ; preds = %if.then
  %4 = load i8*, i8** %optstring.addr, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %5 to i32
  %cmp6 = icmp eq i32 %conv5, 43
  br i1 %cmp6, label %if.then8, label %if.else10

if.then8:                                         ; preds = %if.else
  store i32 0, i32* @ordering, align 4
  %6 = load i8*, i8** %optstring.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr9, i8** %optstring.addr, align 4
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  %cmp11 = icmp ne i8* %call, null
  br i1 %cmp11, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.else10
  store i32 0, i32* @ordering, align 4
  br label %if.end

if.else14:                                        ; preds = %if.else10
  store i32 1, i32* @ordering, align 4
  br label %if.end

if.end:                                           ; preds = %if.else14, %if.then13
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then8
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then3
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %entry
  %7 = load i8*, i8** @nextchar, align 4
  %cmp18 = icmp eq i8* %7, null
  br i1 %cmp18, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end17
  %8 = load i8*, i8** @nextchar, align 4
  %9 = load i8, i8* %8, align 1
  %conv20 = sext i8 %9 to i32
  %cmp21 = icmp eq i32 %conv20, 0
  br i1 %cmp21, label %if.then23, label %if.end109

if.then23:                                        ; preds = %lor.lhs.false, %if.end17
  %10 = load i32, i32* @ordering, align 4
  %cmp24 = icmp eq i32 %10, 1
  br i1 %cmp24, label %if.then26, label %if.end50

if.then26:                                        ; preds = %if.then23
  %11 = load i32, i32* @first_nonopt, align 4
  %12 = load i32, i32* @last_nonopt, align 4
  %cmp27 = icmp ne i32 %11, %12
  br i1 %cmp27, label %land.lhs.true, label %if.else32

land.lhs.true:                                    ; preds = %if.then26
  %13 = load i32, i32* @last_nonopt, align 4
  %14 = load i32, i32* @optind, align 4
  %cmp29 = icmp ne i32 %13, %14
  br i1 %cmp29, label %if.then31, label %if.else32

if.then31:                                        ; preds = %land.lhs.true
  %15 = load i8**, i8*** %argv.addr, align 4
  call void @exchange(i8** %15)
  br label %if.end37

if.else32:                                        ; preds = %land.lhs.true, %if.then26
  %16 = load i32, i32* @last_nonopt, align 4
  %17 = load i32, i32* @optind, align 4
  %cmp33 = icmp ne i32 %16, %17
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.else32
  %18 = load i32, i32* @optind, align 4
  store i32 %18, i32* @first_nonopt, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.else32
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then31
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end37
  %19 = load i32, i32* @optind, align 4
  %20 = load i32, i32* %argc.addr, align 4
  %cmp38 = icmp slt i32 %19, %20
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %21 = load i32, i32* @optind, align 4
  %22 = load i8**, i8*** %argv.addr, align 4
  %arrayidx40 = getelementptr inbounds i8*, i8** %22, i32 %21
  %23 = load i8*, i8** %arrayidx40, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %23, i32 0
  %24 = load i8, i8* %arrayidx41, align 1
  %conv42 = sext i8 %24 to i32
  %cmp43 = icmp ne i32 %conv42, 45
  br i1 %cmp43, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %25 = load i32, i32* @optind, align 4
  %26 = load i8**, i8*** %argv.addr, align 4
  %arrayidx45 = getelementptr inbounds i8*, i8** %26, i32 %25
  %27 = load i8*, i8** %arrayidx45, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %28 to i32
  %cmp48 = icmp eq i32 %conv47, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %29 = phi i1 [ true, %land.rhs ], [ %cmp48, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %30 = phi i1 [ false, %while.cond ], [ %29, %lor.end ]
  br i1 %30, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %31 = load i32, i32* @optind, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* @optind, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %32 = load i32, i32* @optind, align 4
  store i32 %32, i32* @last_nonopt, align 4
  br label %if.end50

if.end50:                                         ; preds = %while.end, %if.then23
  %33 = load i32, i32* @optind, align 4
  %34 = load i32, i32* %argc.addr, align 4
  %cmp51 = icmp ne i32 %33, %34
  br i1 %cmp51, label %land.lhs.true53, label %if.end70

land.lhs.true53:                                  ; preds = %if.end50
  %35 = load i32, i32* @optind, align 4
  %36 = load i8**, i8*** %argv.addr, align 4
  %arrayidx54 = getelementptr inbounds i8*, i8** %36, i32 %35
  %37 = load i8*, i8** %arrayidx54, align 4
  %call55 = call i32 @strcmp(i8* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.2, i32 0, i32 0))
  %tobool = icmp ne i32 %call55, 0
  br i1 %tobool, label %if.end70, label %if.then56

if.then56:                                        ; preds = %land.lhs.true53
  %38 = load i32, i32* @optind, align 4
  %inc57 = add nsw i32 %38, 1
  store i32 %inc57, i32* @optind, align 4
  %39 = load i32, i32* @first_nonopt, align 4
  %40 = load i32, i32* @last_nonopt, align 4
  %cmp58 = icmp ne i32 %39, %40
  br i1 %cmp58, label %land.lhs.true60, label %if.else64

land.lhs.true60:                                  ; preds = %if.then56
  %41 = load i32, i32* @last_nonopt, align 4
  %42 = load i32, i32* @optind, align 4
  %cmp61 = icmp ne i32 %41, %42
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %land.lhs.true60
  %43 = load i8**, i8*** %argv.addr, align 4
  call void @exchange(i8** %43)
  br label %if.end69

if.else64:                                        ; preds = %land.lhs.true60, %if.then56
  %44 = load i32, i32* @first_nonopt, align 4
  %45 = load i32, i32* @last_nonopt, align 4
  %cmp65 = icmp eq i32 %44, %45
  br i1 %cmp65, label %if.then67, label %if.end68

if.then67:                                        ; preds = %if.else64
  %46 = load i32, i32* @optind, align 4
  store i32 %46, i32* @first_nonopt, align 4
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %if.else64
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then63
  %47 = load i32, i32* %argc.addr, align 4
  store i32 %47, i32* @last_nonopt, align 4
  %48 = load i32, i32* %argc.addr, align 4
  store i32 %48, i32* @optind, align 4
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %land.lhs.true53, %if.end50
  %49 = load i32, i32* @optind, align 4
  %50 = load i32, i32* %argc.addr, align 4
  %cmp71 = icmp eq i32 %49, %50
  br i1 %cmp71, label %if.then73, label %if.end78

if.then73:                                        ; preds = %if.end70
  %51 = load i32, i32* @first_nonopt, align 4
  %52 = load i32, i32* @last_nonopt, align 4
  %cmp74 = icmp ne i32 %51, %52
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.then73
  %53 = load i32, i32* @first_nonopt, align 4
  store i32 %53, i32* @optind, align 4
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %if.then73
  store i32 -1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end70
  %54 = load i32, i32* @optind, align 4
  %55 = load i8**, i8*** %argv.addr, align 4
  %arrayidx79 = getelementptr inbounds i8*, i8** %55, i32 %54
  %56 = load i8*, i8** %arrayidx79, align 4
  %arrayidx80 = getelementptr inbounds i8, i8* %56, i32 0
  %57 = load i8, i8* %arrayidx80, align 1
  %conv81 = sext i8 %57 to i32
  %cmp82 = icmp ne i32 %conv81, 45
  br i1 %cmp82, label %if.then90, label %lor.lhs.false84

lor.lhs.false84:                                  ; preds = %if.end78
  %58 = load i32, i32* @optind, align 4
  %59 = load i8**, i8*** %argv.addr, align 4
  %arrayidx85 = getelementptr inbounds i8*, i8** %59, i32 %58
  %60 = load i8*, i8** %arrayidx85, align 4
  %arrayidx86 = getelementptr inbounds i8, i8* %60, i32 1
  %61 = load i8, i8* %arrayidx86, align 1
  %conv87 = sext i8 %61 to i32
  %cmp88 = icmp eq i32 %conv87, 0
  br i1 %cmp88, label %if.then90, label %if.end97

if.then90:                                        ; preds = %lor.lhs.false84, %if.end78
  %62 = load i32, i32* @ordering, align 4
  %cmp91 = icmp eq i32 %62, 0
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %if.then90
  store i32 -1, i32* %retval, align 4
  br label %return

if.end94:                                         ; preds = %if.then90
  %63 = load i32, i32* @optind, align 4
  %inc95 = add nsw i32 %63, 1
  store i32 %inc95, i32* @optind, align 4
  %64 = load i8**, i8*** %argv.addr, align 4
  %arrayidx96 = getelementptr inbounds i8*, i8** %64, i32 %63
  %65 = load i8*, i8** %arrayidx96, align 4
  store i8* %65, i8** @optarg, align 4
  store i32 1, i32* %retval, align 4
  br label %return

if.end97:                                         ; preds = %lor.lhs.false84
  %66 = load i32, i32* @optind, align 4
  %67 = load i8**, i8*** %argv.addr, align 4
  %arrayidx98 = getelementptr inbounds i8*, i8** %67, i32 %66
  %68 = load i8*, i8** %arrayidx98, align 4
  %add.ptr = getelementptr inbounds i8, i8* %68, i32 1
  %69 = load %struct.option*, %struct.option** %longopts.addr, align 4
  %cmp99 = icmp ne %struct.option* %69, null
  br i1 %cmp99, label %land.rhs101, label %land.end107

land.rhs101:                                      ; preds = %if.end97
  %70 = load i32, i32* @optind, align 4
  %71 = load i8**, i8*** %argv.addr, align 4
  %arrayidx102 = getelementptr inbounds i8*, i8** %71, i32 %70
  %72 = load i8*, i8** %arrayidx102, align 4
  %arrayidx103 = getelementptr inbounds i8, i8* %72, i32 1
  %73 = load i8, i8* %arrayidx103, align 1
  %conv104 = sext i8 %73 to i32
  %cmp105 = icmp eq i32 %conv104, 45
  br label %land.end107

land.end107:                                      ; preds = %land.rhs101, %if.end97
  %74 = phi i1 [ false, %if.end97 ], [ %cmp105, %land.rhs101 ]
  %land.ext = zext i1 %74 to i32
  %add.ptr108 = getelementptr inbounds i8, i8* %add.ptr, i32 %land.ext
  store i8* %add.ptr108, i8** @nextchar, align 4
  br label %if.end109

if.end109:                                        ; preds = %land.end107, %lor.lhs.false
  %75 = load %struct.option*, %struct.option** %longopts.addr, align 4
  %cmp110 = icmp ne %struct.option* %75, null
  br i1 %cmp110, label %land.lhs.true112, label %if.end294

land.lhs.true112:                                 ; preds = %if.end109
  %76 = load i32, i32* @optind, align 4
  %77 = load i8**, i8*** %argv.addr, align 4
  %arrayidx113 = getelementptr inbounds i8*, i8** %77, i32 %76
  %78 = load i8*, i8** %arrayidx113, align 4
  %arrayidx114 = getelementptr inbounds i8, i8* %78, i32 0
  %79 = load i8, i8* %arrayidx114, align 1
  %conv115 = sext i8 %79 to i32
  %cmp116 = icmp eq i32 %conv115, 45
  br i1 %cmp116, label %land.lhs.true118, label %if.end294

land.lhs.true118:                                 ; preds = %land.lhs.true112
  %80 = load i32, i32* @optind, align 4
  %81 = load i8**, i8*** %argv.addr, align 4
  %arrayidx119 = getelementptr inbounds i8*, i8** %81, i32 %80
  %82 = load i8*, i8** %arrayidx119, align 4
  %arrayidx120 = getelementptr inbounds i8, i8* %82, i32 1
  %83 = load i8, i8* %arrayidx120, align 1
  %conv121 = sext i8 %83 to i32
  %cmp122 = icmp eq i32 %conv121, 45
  br i1 %cmp122, label %if.then126, label %lor.lhs.false124

lor.lhs.false124:                                 ; preds = %land.lhs.true118
  %84 = load i32, i32* %long_only.addr, align 4
  %tobool125 = icmp ne i32 %84, 0
  br i1 %tobool125, label %if.then126, label %if.end294

if.then126:                                       ; preds = %lor.lhs.false124, %land.lhs.true118
  %85 = load i8*, i8** @nextchar, align 4
  store i8* %85, i8** %s, align 4
  store i32 0, i32* %exact, align 4
  store i32 0, i32* %ambig, align 4
  store %struct.option* null, %struct.option** %pfound, align 4
  store i32 0, i32* %indfound, align 4
  br label %while.cond127

while.cond127:                                    ; preds = %while.body136, %if.then126
  %86 = load i8*, i8** %s, align 4
  %87 = load i8, i8* %86, align 1
  %conv128 = sext i8 %87 to i32
  %tobool129 = icmp ne i32 %conv128, 0
  br i1 %tobool129, label %land.rhs130, label %land.end134

land.rhs130:                                      ; preds = %while.cond127
  %88 = load i8*, i8** %s, align 4
  %89 = load i8, i8* %88, align 1
  %conv131 = sext i8 %89 to i32
  %cmp132 = icmp ne i32 %conv131, 61
  br label %land.end134

land.end134:                                      ; preds = %land.rhs130, %while.cond127
  %90 = phi i1 [ false, %while.cond127 ], [ %cmp132, %land.rhs130 ]
  br i1 %90, label %while.body136, label %while.end138

while.body136:                                    ; preds = %land.end134
  %91 = load i8*, i8** %s, align 4
  %incdec.ptr137 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr137, i8** %s, align 4
  br label %while.cond127

while.end138:                                     ; preds = %land.end134
  %92 = load %struct.option*, %struct.option** %longopts.addr, align 4
  store %struct.option* %92, %struct.option** %p, align 4
  store i32 0, i32* %option_index, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end138
  %93 = load %struct.option*, %struct.option** %p, align 4
  %name = getelementptr inbounds %struct.option, %struct.option* %93, i32 0, i32 0
  %94 = load i8*, i8** %name, align 4
  %tobool139 = icmp ne i8* %94, null
  br i1 %tobool139, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %95 = load i8*, i8** %s, align 4
  %96 = load i8*, i8** @nextchar, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %95 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %96 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %97 = load i8*, i8** @nextchar, align 4
  %98 = load %struct.option*, %struct.option** %p, align 4
  %name140 = getelementptr inbounds %struct.option, %struct.option* %98, i32 0, i32 0
  %99 = load i8*, i8** %name140, align 4
  %call141 = call i32 @strncmp(i8* %99, i8* %97, i32 %sub.ptr.sub)
  %tobool142 = icmp ne i32 %call141, 0
  br i1 %tobool142, label %if.end159, label %if.then143

if.then143:                                       ; preds = %for.body
  %100 = load i8*, i8** %s, align 4
  %101 = load i8*, i8** @nextchar, align 4
  %sub.ptr.lhs.cast144 = ptrtoint i8* %100 to i32
  %sub.ptr.rhs.cast145 = ptrtoint i8* %101 to i32
  %sub.ptr.sub146 = sub i32 %sub.ptr.lhs.cast144, %sub.ptr.rhs.cast145
  %102 = load %struct.option*, %struct.option** %p, align 4
  %name147 = getelementptr inbounds %struct.option, %struct.option* %102, i32 0, i32 0
  %103 = load i8*, i8** %name147, align 4
  %call148 = call i32 @my_strlen(i8* %103)
  %cmp149 = icmp eq i32 %sub.ptr.sub146, %call148
  br i1 %cmp149, label %if.then151, label %if.else152

if.then151:                                       ; preds = %if.then143
  %104 = load %struct.option*, %struct.option** %p, align 4
  store %struct.option* %104, %struct.option** %pfound, align 4
  %105 = load i32, i32* %option_index, align 4
  store i32 %105, i32* %indfound, align 4
  store i32 1, i32* %exact, align 4
  br label %for.end

if.else152:                                       ; preds = %if.then143
  %106 = load %struct.option*, %struct.option** %pfound, align 4
  %cmp153 = icmp eq %struct.option* %106, null
  br i1 %cmp153, label %if.then155, label %if.else156

if.then155:                                       ; preds = %if.else152
  %107 = load %struct.option*, %struct.option** %p, align 4
  store %struct.option* %107, %struct.option** %pfound, align 4
  %108 = load i32, i32* %option_index, align 4
  store i32 %108, i32* %indfound, align 4
  br label %if.end157

if.else156:                                       ; preds = %if.else152
  store i32 1, i32* %ambig, align 4
  br label %if.end157

if.end157:                                        ; preds = %if.else156, %if.then155
  br label %if.end158

if.end158:                                        ; preds = %if.end157
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end159
  %109 = load %struct.option*, %struct.option** %p, align 4
  %incdec.ptr160 = getelementptr inbounds %struct.option, %struct.option* %109, i32 1
  store %struct.option* %incdec.ptr160, %struct.option** %p, align 4
  %110 = load i32, i32* %option_index, align 4
  %inc161 = add nsw i32 %110, 1
  store i32 %inc161, i32* %option_index, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then151, %for.cond
  %111 = load i32, i32* %ambig, align 4
  %tobool162 = icmp ne i32 %111, 0
  br i1 %tobool162, label %land.lhs.true163, label %if.end177

land.lhs.true163:                                 ; preds = %for.end
  %112 = load i32, i32* %exact, align 4
  %tobool164 = icmp ne i32 %112, 0
  br i1 %tobool164, label %if.end177, label %if.then165

if.then165:                                       ; preds = %land.lhs.true163
  %113 = load i32, i32* @opterr, align 4
  %tobool166 = icmp ne i32 %113, 0
  br i1 %tobool166, label %if.then167, label %if.end173

if.then167:                                       ; preds = %if.then165
  %114 = load i32, i32* @optind, align 4
  %115 = load i8**, i8*** %argv.addr, align 4
  %arrayidx168 = getelementptr inbounds i8*, i8** %115, i32 %114
  %116 = load i8*, i8** %arrayidx168, align 4
  %117 = load i8**, i8*** %argv.addr, align 4
  %arrayidx169 = getelementptr inbounds i8*, i8** %117, i32 0
  %118 = load i8*, i8** %arrayidx169, align 4
  %call170 = call %struct._iobuf* @__iob_func()
  %arrayidx171 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call170, i32 2
  %call172 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx171, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8* %118, i8* %116)
  br label %if.end173

if.end173:                                        ; preds = %if.then167, %if.then165
  %119 = load i8*, i8** @nextchar, align 4
  %call174 = call i32 @my_strlen(i8* %119)
  %120 = load i8*, i8** @nextchar, align 4
  %add.ptr175 = getelementptr inbounds i8, i8* %120, i32 %call174
  store i8* %add.ptr175, i8** @nextchar, align 4
  %121 = load i32, i32* @optind, align 4
  %inc176 = add nsw i32 %121, 1
  store i32 %inc176, i32* @optind, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end177:                                        ; preds = %land.lhs.true163, %for.end
  %122 = load %struct.option*, %struct.option** %pfound, align 4
  %cmp178 = icmp ne %struct.option* %122, null
  br i1 %cmp178, label %if.then180, label %if.end256

if.then180:                                       ; preds = %if.end177
  %123 = load i32, i32* %indfound, align 4
  store i32 %123, i32* %option_index, align 4
  %124 = load i32, i32* @optind, align 4
  %inc181 = add nsw i32 %124, 1
  store i32 %inc181, i32* @optind, align 4
  %125 = load i8*, i8** %s, align 4
  %126 = load i8, i8* %125, align 1
  %tobool182 = icmp ne i8 %126, 0
  br i1 %tobool182, label %if.then183, label %if.else216

if.then183:                                       ; preds = %if.then180
  %127 = load %struct.option*, %struct.option** %pfound, align 4
  %has_arg = getelementptr inbounds %struct.option, %struct.option* %127, i32 0, i32 1
  %128 = load i32, i32* %has_arg, align 4
  %tobool184 = icmp ne i32 %128, 0
  br i1 %tobool184, label %if.then185, label %if.else187

if.then185:                                       ; preds = %if.then183
  %129 = load i8*, i8** %s, align 4
  %add.ptr186 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %add.ptr186, i8** @optarg, align 4
  br label %if.end215

if.else187:                                       ; preds = %if.then183
  %130 = load i32, i32* @opterr, align 4
  %tobool188 = icmp ne i32 %130, 0
  br i1 %tobool188, label %if.then189, label %if.end212

if.then189:                                       ; preds = %if.else187
  %131 = load i32, i32* @optind, align 4
  %sub = sub nsw i32 %131, 1
  %132 = load i8**, i8*** %argv.addr, align 4
  %arrayidx190 = getelementptr inbounds i8*, i8** %132, i32 %sub
  %133 = load i8*, i8** %arrayidx190, align 4
  %arrayidx191 = getelementptr inbounds i8, i8* %133, i32 1
  %134 = load i8, i8* %arrayidx191, align 1
  %conv192 = sext i8 %134 to i32
  %cmp193 = icmp eq i32 %conv192, 45
  br i1 %cmp193, label %if.then195, label %if.else201

if.then195:                                       ; preds = %if.then189
  %135 = load %struct.option*, %struct.option** %pfound, align 4
  %name196 = getelementptr inbounds %struct.option, %struct.option* %135, i32 0, i32 0
  %136 = load i8*, i8** %name196, align 4
  %137 = load i8**, i8*** %argv.addr, align 4
  %arrayidx197 = getelementptr inbounds i8*, i8** %137, i32 0
  %138 = load i8*, i8** %arrayidx197, align 4
  %call198 = call %struct._iobuf* @__iob_func()
  %arrayidx199 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call198, i32 2
  %call200 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx199, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i32 0, i32 0), i8* %138, i8* %136)
  br label %if.end211

if.else201:                                       ; preds = %if.then189
  %139 = load %struct.option*, %struct.option** %pfound, align 4
  %name202 = getelementptr inbounds %struct.option, %struct.option* %139, i32 0, i32 0
  %140 = load i8*, i8** %name202, align 4
  %141 = load i32, i32* @optind, align 4
  %sub203 = sub nsw i32 %141, 1
  %142 = load i8**, i8*** %argv.addr, align 4
  %arrayidx204 = getelementptr inbounds i8*, i8** %142, i32 %sub203
  %143 = load i8*, i8** %arrayidx204, align 4
  %arrayidx205 = getelementptr inbounds i8, i8* %143, i32 0
  %144 = load i8, i8* %arrayidx205, align 1
  %conv206 = sext i8 %144 to i32
  %145 = load i8**, i8*** %argv.addr, align 4
  %arrayidx207 = getelementptr inbounds i8*, i8** %145, i32 0
  %146 = load i8*, i8** %arrayidx207, align 4
  %call208 = call %struct._iobuf* @__iob_func()
  %arrayidx209 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call208, i32 2
  %call210 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx209, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i32 0, i32 0), i8* %146, i32 %conv206, i8* %140)
  br label %if.end211

if.end211:                                        ; preds = %if.else201, %if.then195
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.else187
  %147 = load i8*, i8** @nextchar, align 4
  %call213 = call i32 @my_strlen(i8* %147)
  %148 = load i8*, i8** @nextchar, align 4
  %add.ptr214 = getelementptr inbounds i8, i8* %148, i32 %call213
  store i8* %add.ptr214, i8** @nextchar, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end215:                                        ; preds = %if.then185
  br label %if.end244

if.else216:                                       ; preds = %if.then180
  %149 = load %struct.option*, %struct.option** %pfound, align 4
  %has_arg217 = getelementptr inbounds %struct.option, %struct.option* %149, i32 0, i32 1
  %150 = load i32, i32* %has_arg217, align 4
  %cmp218 = icmp eq i32 %150, 1
  br i1 %cmp218, label %if.then220, label %if.end243

if.then220:                                       ; preds = %if.else216
  %151 = load i32, i32* @optind, align 4
  %152 = load i32, i32* %argc.addr, align 4
  %cmp221 = icmp slt i32 %151, %152
  br i1 %cmp221, label %if.then223, label %if.else226

if.then223:                                       ; preds = %if.then220
  %153 = load i32, i32* @optind, align 4
  %inc224 = add nsw i32 %153, 1
  store i32 %inc224, i32* @optind, align 4
  %154 = load i8**, i8*** %argv.addr, align 4
  %arrayidx225 = getelementptr inbounds i8*, i8** %154, i32 %153
  %155 = load i8*, i8** %arrayidx225, align 4
  store i8* %155, i8** @optarg, align 4
  br label %if.end242

if.else226:                                       ; preds = %if.then220
  %156 = load i32, i32* @opterr, align 4
  %tobool227 = icmp ne i32 %156, 0
  br i1 %tobool227, label %if.then228, label %if.end235

if.then228:                                       ; preds = %if.else226
  %157 = load i32, i32* @optind, align 4
  %sub229 = sub nsw i32 %157, 1
  %158 = load i8**, i8*** %argv.addr, align 4
  %arrayidx230 = getelementptr inbounds i8*, i8** %158, i32 %sub229
  %159 = load i8*, i8** %arrayidx230, align 4
  %160 = load i8**, i8*** %argv.addr, align 4
  %arrayidx231 = getelementptr inbounds i8*, i8** %160, i32 0
  %161 = load i8*, i8** %arrayidx231, align 4
  %call232 = call %struct._iobuf* @__iob_func()
  %arrayidx233 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call232, i32 2
  %call234 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx233, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i32 0, i32 0), i8* %161, i8* %159)
  br label %if.end235

if.end235:                                        ; preds = %if.then228, %if.else226
  %162 = load i8*, i8** @nextchar, align 4
  %call236 = call i32 @my_strlen(i8* %162)
  %163 = load i8*, i8** @nextchar, align 4
  %add.ptr237 = getelementptr inbounds i8, i8* %163, i32 %call236
  store i8* %add.ptr237, i8** @nextchar, align 4
  %164 = load i8*, i8** %optstring.addr, align 4
  %arrayidx238 = getelementptr inbounds i8, i8* %164, i32 0
  %165 = load i8, i8* %arrayidx238, align 1
  %conv239 = sext i8 %165 to i32
  %cmp240 = icmp eq i32 %conv239, 58
  %cond = select i1 %cmp240, i32 58, i32 0
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end242:                                        ; preds = %if.then223
  br label %if.end243

if.end243:                                        ; preds = %if.end242, %if.else216
  br label %if.end244

if.end244:                                        ; preds = %if.end243, %if.end215
  %166 = load i8*, i8** @nextchar, align 4
  %call245 = call i32 @my_strlen(i8* %166)
  %167 = load i8*, i8** @nextchar, align 4
  %add.ptr246 = getelementptr inbounds i8, i8* %167, i32 %call245
  store i8* %add.ptr246, i8** @nextchar, align 4
  %168 = load i32*, i32** %longind.addr, align 4
  %cmp247 = icmp ne i32* %168, null
  br i1 %cmp247, label %if.then249, label %if.end250

if.then249:                                       ; preds = %if.end244
  %169 = load i32, i32* %option_index, align 4
  %170 = load i32*, i32** %longind.addr, align 4
  store i32 %169, i32* %170, align 4
  br label %if.end250

if.end250:                                        ; preds = %if.then249, %if.end244
  %171 = load %struct.option*, %struct.option** %pfound, align 4
  %flag = getelementptr inbounds %struct.option, %struct.option* %171, i32 0, i32 2
  %172 = load i32*, i32** %flag, align 4
  %tobool251 = icmp ne i32* %172, null
  br i1 %tobool251, label %if.then252, label %if.end254

if.then252:                                       ; preds = %if.end250
  %173 = load %struct.option*, %struct.option** %pfound, align 4
  %val = getelementptr inbounds %struct.option, %struct.option* %173, i32 0, i32 3
  %174 = load i32, i32* %val, align 4
  %175 = load %struct.option*, %struct.option** %pfound, align 4
  %flag253 = getelementptr inbounds %struct.option, %struct.option* %175, i32 0, i32 2
  %176 = load i32*, i32** %flag253, align 4
  store i32 %174, i32* %176, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end254:                                        ; preds = %if.end250
  %177 = load %struct.option*, %struct.option** %pfound, align 4
  %val255 = getelementptr inbounds %struct.option, %struct.option* %177, i32 0, i32 3
  %178 = load i32, i32* %val255, align 4
  store i32 %178, i32* %retval, align 4
  br label %return

if.end256:                                        ; preds = %if.end177
  %179 = load i32, i32* %long_only.addr, align 4
  %tobool257 = icmp ne i32 %179, 0
  br i1 %tobool257, label %lor.lhs.false258, label %if.then269

lor.lhs.false258:                                 ; preds = %if.end256
  %180 = load i32, i32* @optind, align 4
  %181 = load i8**, i8*** %argv.addr, align 4
  %arrayidx259 = getelementptr inbounds i8*, i8** %181, i32 %180
  %182 = load i8*, i8** %arrayidx259, align 4
  %arrayidx260 = getelementptr inbounds i8, i8* %182, i32 1
  %183 = load i8, i8* %arrayidx260, align 1
  %conv261 = sext i8 %183 to i32
  %cmp262 = icmp eq i32 %conv261, 45
  br i1 %cmp262, label %if.then269, label %lor.lhs.false264

lor.lhs.false264:                                 ; preds = %lor.lhs.false258
  %184 = load i8*, i8** @nextchar, align 4
  %185 = load i8, i8* %184, align 1
  %conv265 = sext i8 %185 to i32
  %186 = load i8*, i8** %optstring.addr, align 4
  %call266 = call i8* @my_index(i8* %186, i32 %conv265)
  %cmp267 = icmp eq i8* %call266, null
  br i1 %cmp267, label %if.then269, label %if.end293

if.then269:                                       ; preds = %lor.lhs.false264, %lor.lhs.false258, %if.end256
  %187 = load i32, i32* @opterr, align 4
  %tobool270 = icmp ne i32 %187, 0
  br i1 %tobool270, label %if.then271, label %if.end291

if.then271:                                       ; preds = %if.then269
  %188 = load i32, i32* @optind, align 4
  %189 = load i8**, i8*** %argv.addr, align 4
  %arrayidx272 = getelementptr inbounds i8*, i8** %189, i32 %188
  %190 = load i8*, i8** %arrayidx272, align 4
  %arrayidx273 = getelementptr inbounds i8, i8* %190, i32 1
  %191 = load i8, i8* %arrayidx273, align 1
  %conv274 = sext i8 %191 to i32
  %cmp275 = icmp eq i32 %conv274, 45
  br i1 %cmp275, label %if.then277, label %if.else282

if.then277:                                       ; preds = %if.then271
  %192 = load i8*, i8** @nextchar, align 4
  %193 = load i8**, i8*** %argv.addr, align 4
  %arrayidx278 = getelementptr inbounds i8*, i8** %193, i32 0
  %194 = load i8*, i8** %arrayidx278, align 4
  %call279 = call %struct._iobuf* @__iob_func()
  %arrayidx280 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call279, i32 2
  %call281 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx280, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i32 0, i32 0), i8* %194, i8* %192)
  br label %if.end290

if.else282:                                       ; preds = %if.then271
  %195 = load i8*, i8** @nextchar, align 4
  %196 = load i32, i32* @optind, align 4
  %197 = load i8**, i8*** %argv.addr, align 4
  %arrayidx283 = getelementptr inbounds i8*, i8** %197, i32 %196
  %198 = load i8*, i8** %arrayidx283, align 4
  %arrayidx284 = getelementptr inbounds i8, i8* %198, i32 0
  %199 = load i8, i8* %arrayidx284, align 1
  %conv285 = sext i8 %199 to i32
  %200 = load i8**, i8*** %argv.addr, align 4
  %arrayidx286 = getelementptr inbounds i8*, i8** %200, i32 0
  %201 = load i8*, i8** %arrayidx286, align 4
  %call287 = call %struct._iobuf* @__iob_func()
  %arrayidx288 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call287, i32 2
  %call289 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx288, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i32 0, i32 0), i8* %201, i32 %conv285, i8* %195)
  br label %if.end290

if.end290:                                        ; preds = %if.else282, %if.then277
  br label %if.end291

if.end291:                                        ; preds = %if.end290, %if.then269
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i32 0, i32 0), i8** @nextchar, align 4
  %202 = load i32, i32* @optind, align 4
  %inc292 = add nsw i32 %202, 1
  store i32 %inc292, i32* @optind, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end293:                                        ; preds = %lor.lhs.false264
  br label %if.end294

if.end294:                                        ; preds = %if.end293, %lor.lhs.false124, %land.lhs.true112, %if.end109
  %203 = load i8*, i8** @nextchar, align 4
  %incdec.ptr295 = getelementptr inbounds i8, i8* %203, i32 1
  store i8* %incdec.ptr295, i8** @nextchar, align 4
  %204 = load i8, i8* %203, align 1
  store i8 %204, i8* %c, align 1
  %205 = load i8, i8* %c, align 1
  %conv296 = sext i8 %205 to i32
  %206 = load i8*, i8** %optstring.addr, align 4
  %call297 = call i8* @my_index(i8* %206, i32 %conv296)
  store i8* %call297, i8** %temp, align 4
  %207 = load i8*, i8** @nextchar, align 4
  %208 = load i8, i8* %207, align 1
  %conv298 = sext i8 %208 to i32
  %cmp299 = icmp eq i32 %conv298, 0
  br i1 %cmp299, label %if.then301, label %if.end303

if.then301:                                       ; preds = %if.end294
  %209 = load i32, i32* @optind, align 4
  %inc302 = add nsw i32 %209, 1
  store i32 %inc302, i32* @optind, align 4
  br label %if.end303

if.end303:                                        ; preds = %if.then301, %if.end294
  %210 = load i8*, i8** %temp, align 4
  %cmp304 = icmp eq i8* %210, null
  br i1 %cmp304, label %if.then310, label %lor.lhs.false306

lor.lhs.false306:                                 ; preds = %if.end303
  %211 = load i8, i8* %c, align 1
  %conv307 = sext i8 %211 to i32
  %cmp308 = icmp eq i32 %conv307, 58
  br i1 %cmp308, label %if.then310, label %if.end320

if.then310:                                       ; preds = %lor.lhs.false306, %if.end303
  %212 = load i32, i32* @opterr, align 4
  %tobool311 = icmp ne i32 %212, 0
  br i1 %tobool311, label %if.then312, label %if.end318

if.then312:                                       ; preds = %if.then310
  %213 = load i8, i8* %c, align 1
  %conv313 = sext i8 %213 to i32
  %214 = load i8**, i8*** %argv.addr, align 4
  %arrayidx314 = getelementptr inbounds i8*, i8** %214, i32 0
  %215 = load i8*, i8** %arrayidx314, align 4
  %call315 = call %struct._iobuf* @__iob_func()
  %arrayidx316 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call315, i32 2
  %call317 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx316, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i32 0, i32 0), i8* %215, i32 %conv313)
  br label %if.end318

if.end318:                                        ; preds = %if.then312, %if.then310
  %216 = load i8, i8* %c, align 1
  %conv319 = sext i8 %216 to i32
  store i32 %conv319, i32* @optopt, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end320:                                        ; preds = %lor.lhs.false306
  %217 = load i8*, i8** %temp, align 4
  %arrayidx321 = getelementptr inbounds i8, i8* %217, i32 1
  %218 = load i8, i8* %arrayidx321, align 1
  %conv322 = sext i8 %218 to i32
  %cmp323 = icmp eq i32 %conv322, 58
  br i1 %cmp323, label %if.then325, label %if.end370

if.then325:                                       ; preds = %if.end320
  %219 = load i8*, i8** %temp, align 4
  %arrayidx326 = getelementptr inbounds i8, i8* %219, i32 2
  %220 = load i8, i8* %arrayidx326, align 1
  %conv327 = sext i8 %220 to i32
  %cmp328 = icmp eq i32 %conv327, 58
  br i1 %cmp328, label %if.then330, label %if.else338

if.then330:                                       ; preds = %if.then325
  %221 = load i8*, i8** @nextchar, align 4
  %222 = load i8, i8* %221, align 1
  %conv331 = sext i8 %222 to i32
  %cmp332 = icmp ne i32 %conv331, 0
  br i1 %cmp332, label %if.then334, label %if.else336

if.then334:                                       ; preds = %if.then330
  %223 = load i8*, i8** @nextchar, align 4
  store i8* %223, i8** @optarg, align 4
  %224 = load i32, i32* @optind, align 4
  %inc335 = add nsw i32 %224, 1
  store i32 %inc335, i32* @optind, align 4
  br label %if.end337

if.else336:                                       ; preds = %if.then330
  store i8* null, i8** @optarg, align 4
  br label %if.end337

if.end337:                                        ; preds = %if.else336, %if.then334
  store i8* null, i8** @nextchar, align 4
  br label %if.end369

if.else338:                                       ; preds = %if.then325
  %225 = load i8*, i8** @nextchar, align 4
  %226 = load i8, i8* %225, align 1
  %conv339 = sext i8 %226 to i32
  %cmp340 = icmp ne i32 %conv339, 0
  br i1 %cmp340, label %if.then342, label %if.else344

if.then342:                                       ; preds = %if.else338
  %227 = load i8*, i8** @nextchar, align 4
  store i8* %227, i8** @optarg, align 4
  %228 = load i32, i32* @optind, align 4
  %inc343 = add nsw i32 %228, 1
  store i32 %inc343, i32* @optind, align 4
  br label %if.end368

if.else344:                                       ; preds = %if.else338
  %229 = load i32, i32* @optind, align 4
  %230 = load i32, i32* %argc.addr, align 4
  %cmp345 = icmp eq i32 %229, %230
  br i1 %cmp345, label %if.then347, label %if.else364

if.then347:                                       ; preds = %if.else344
  %231 = load i32, i32* @opterr, align 4
  %tobool348 = icmp ne i32 %231, 0
  br i1 %tobool348, label %if.then349, label %if.end355

if.then349:                                       ; preds = %if.then347
  %232 = load i8, i8* %c, align 1
  %conv350 = sext i8 %232 to i32
  %233 = load i8**, i8*** %argv.addr, align 4
  %arrayidx351 = getelementptr inbounds i8*, i8** %233, i32 0
  %234 = load i8*, i8** %arrayidx351, align 4
  %call352 = call %struct._iobuf* @__iob_func()
  %arrayidx353 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call352, i32 2
  %call354 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx353, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i32 0, i32 0), i8* %234, i32 %conv350)
  br label %if.end355

if.end355:                                        ; preds = %if.then349, %if.then347
  %235 = load i8, i8* %c, align 1
  %conv356 = sext i8 %235 to i32
  store i32 %conv356, i32* @optopt, align 4
  %236 = load i8*, i8** %optstring.addr, align 4
  %arrayidx357 = getelementptr inbounds i8, i8* %236, i32 0
  %237 = load i8, i8* %arrayidx357, align 1
  %conv358 = sext i8 %237 to i32
  %cmp359 = icmp eq i32 %conv358, 58
  br i1 %cmp359, label %if.then361, label %if.else362

if.then361:                                       ; preds = %if.end355
  store i8 58, i8* %c, align 1
  br label %if.end363

if.else362:                                       ; preds = %if.end355
  store i8 0, i8* %c, align 1
  br label %if.end363

if.end363:                                        ; preds = %if.else362, %if.then361
  br label %if.end367

if.else364:                                       ; preds = %if.else344
  %238 = load i32, i32* @optind, align 4
  %inc365 = add nsw i32 %238, 1
  store i32 %inc365, i32* @optind, align 4
  %239 = load i8**, i8*** %argv.addr, align 4
  %arrayidx366 = getelementptr inbounds i8*, i8** %239, i32 %238
  %240 = load i8*, i8** %arrayidx366, align 4
  store i8* %240, i8** @optarg, align 4
  br label %if.end367

if.end367:                                        ; preds = %if.else364, %if.end363
  br label %if.end368

if.end368:                                        ; preds = %if.end367, %if.then342
  store i8* null, i8** @nextchar, align 4
  br label %if.end369

if.end369:                                        ; preds = %if.end368, %if.end337
  br label %if.end370

if.end370:                                        ; preds = %if.end369, %if.end320
  %241 = load i8, i8* %c, align 1
  %conv371 = sext i8 %241 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end370, %if.end318, %if.end291, %if.end254, %if.then252, %if.end235, %if.end212, %if.end173, %if.end94, %if.then93, %if.end77
  %242 = load i32, i32* %retval, align 4
  ret i32 %242
}

declare i8* @getenv(i8*) #2

; Function Attrs: noinline nounwind
define internal void @exchange(i8** %argv) #0 {
entry:
  %argv.addr = alloca i8**, align 4
  %temp = alloca i8*, align 4
  %first = alloca i8**, align 4
  %last = alloca i8**, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* @first_nonopt, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 %0
  store i8** %arrayidx, i8*** %first, align 4
  %2 = load i32, i32* @optind, align 4
  %sub = sub nsw i32 %2, 1
  %3 = load i8**, i8*** %argv.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 %sub
  store i8** %arrayidx1, i8*** %last, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i8**, i8*** %first, align 4
  %5 = load i8**, i8*** %last, align 4
  %cmp = icmp ult i8** %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8**, i8*** %first, align 4
  %7 = load i8*, i8** %6, align 4
  store i8* %7, i8** %temp, align 4
  %8 = load i8**, i8*** %last, align 4
  %9 = load i8*, i8** %8, align 4
  %10 = load i8**, i8*** %first, align 4
  store i8* %9, i8** %10, align 4
  %11 = load i8*, i8** %temp, align 4
  %12 = load i8**, i8*** %last, align 4
  store i8* %11, i8** %12, align 4
  %13 = load i8**, i8*** %first, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %13, i32 1
  store i8** %incdec.ptr, i8*** %first, align 4
  %14 = load i8**, i8*** %last, align 4
  %incdec.ptr2 = getelementptr inbounds i8*, i8** %14, i32 -1
  store i8** %incdec.ptr2, i8*** %last, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32, i32* @first_nonopt, align 4
  %16 = load i8**, i8*** %argv.addr, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %16, i32 %15
  store i8** %arrayidx3, i8*** %first, align 4
  %17 = load i32, i32* @optind, align 4
  %18 = load i32, i32* @last_nonopt, align 4
  %sub4 = sub nsw i32 %17, %18
  %19 = load i32, i32* @first_nonopt, align 4
  %add = add nsw i32 %19, %sub4
  store i32 %add, i32* @first_nonopt, align 4
  %20 = load i32, i32* @first_nonopt, align 4
  %sub5 = sub nsw i32 %20, 1
  %21 = load i8**, i8*** %argv.addr, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %21, i32 %sub5
  store i8** %arrayidx6, i8*** %last, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body9, %while.end
  %22 = load i8**, i8*** %first, align 4
  %23 = load i8**, i8*** %last, align 4
  %cmp8 = icmp ult i8** %22, %23
  br i1 %cmp8, label %while.body9, label %while.end12

while.body9:                                      ; preds = %while.cond7
  %24 = load i8**, i8*** %first, align 4
  %25 = load i8*, i8** %24, align 4
  store i8* %25, i8** %temp, align 4
  %26 = load i8**, i8*** %last, align 4
  %27 = load i8*, i8** %26, align 4
  %28 = load i8**, i8*** %first, align 4
  store i8* %27, i8** %28, align 4
  %29 = load i8*, i8** %temp, align 4
  %30 = load i8**, i8*** %last, align 4
  store i8* %29, i8** %30, align 4
  %31 = load i8**, i8*** %first, align 4
  %incdec.ptr10 = getelementptr inbounds i8*, i8** %31, i32 1
  store i8** %incdec.ptr10, i8*** %first, align 4
  %32 = load i8**, i8*** %last, align 4
  %incdec.ptr11 = getelementptr inbounds i8*, i8** %32, i32 -1
  store i8** %incdec.ptr11, i8*** %last, align 4
  br label %while.cond7

while.end12:                                      ; preds = %while.cond7
  %33 = load i32, i32* @first_nonopt, align 4
  %34 = load i8**, i8*** %argv.addr, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %34, i32 %33
  store i8** %arrayidx13, i8*** %first, align 4
  %35 = load i32, i32* @optind, align 4
  store i32 %35, i32* @last_nonopt, align 4
  %36 = load i32, i32* @last_nonopt, align 4
  %sub14 = sub nsw i32 %36, 1
  %37 = load i8**, i8*** %argv.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %37, i32 %sub14
  store i8** %arrayidx15, i8*** %last, align 4
  br label %while.cond16

while.cond16:                                     ; preds = %while.body18, %while.end12
  %38 = load i8**, i8*** %first, align 4
  %39 = load i8**, i8*** %last, align 4
  %cmp17 = icmp ult i8** %38, %39
  br i1 %cmp17, label %while.body18, label %while.end21

while.body18:                                     ; preds = %while.cond16
  %40 = load i8**, i8*** %first, align 4
  %41 = load i8*, i8** %40, align 4
  store i8* %41, i8** %temp, align 4
  %42 = load i8**, i8*** %last, align 4
  %43 = load i8*, i8** %42, align 4
  %44 = load i8**, i8*** %first, align 4
  store i8* %43, i8** %44, align 4
  %45 = load i8*, i8** %temp, align 4
  %46 = load i8**, i8*** %last, align 4
  store i8* %45, i8** %46, align 4
  %47 = load i8**, i8*** %first, align 4
  %incdec.ptr19 = getelementptr inbounds i8*, i8** %47, i32 1
  store i8** %incdec.ptr19, i8*** %first, align 4
  %48 = load i8**, i8*** %last, align 4
  %incdec.ptr20 = getelementptr inbounds i8*, i8** %48, i32 -1
  store i8** %incdec.ptr20, i8*** %last, align 4
  br label %while.cond16

while.end21:                                      ; preds = %while.cond16
  ret void
}

declare i32 @strcmp(i8*, i8*) #2

declare i32 @strncmp(i8*, i8*, i32) #2

; Function Attrs: noinline nounwind
define internal i32 @my_strlen(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %n, align 4
  ret i32 %3
}

declare dllimport %struct._iobuf* @__iob_func() #2

declare dllimport i32 @fprintf(%struct._iobuf*, i8*, ...) #2

; Function Attrs: noinline nounwind
define internal i8* @my_index(i8* %str, i32 %chr) #0 {
entry:
  %retval = alloca i8*, align 4
  %chr.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 4
  store i32 %chr, i32* %chr.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %str.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %chr.addr, align 4
  %cmp = icmp eq i32 %conv, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i8*, i8** %str.addr, align 4
  store i8* %5, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %7 = load i8*, i8** %retval, align 4
  ret i8* %7
}

; Function Attrs: noinline nounwind
define i32 @getopt(i32 %argc, i8** %argv, i8* %optstring) #0 {
entry:
  %optstring.addr = alloca i8*, align 4
  %argv.addr = alloca i8**, align 4
  %argc.addr = alloca i32, align 4
  store i8* %optstring, i8** %optstring.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  %0 = load i8*, i8** %optstring.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %2 = load i32, i32* %argc.addr, align 4
  %call = call i32 @_getopt_internal(i32 %2, i8** %1, i8* %0, %struct.option* null, i32* null, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind
define i32 @getopt_long(i32 %argc, i8** %argv, i8* %options, %struct.option* %long_options, i32* %opt_index) #0 {
entry:
  %opt_index.addr = alloca i32*, align 4
  %long_options.addr = alloca %struct.option*, align 4
  %options.addr = alloca i8*, align 4
  %argv.addr = alloca i8**, align 4
  %argc.addr = alloca i32, align 4
  store i32* %opt_index, i32** %opt_index.addr, align 4
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 4
  store i8* %options, i8** %options.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  %0 = load i32*, i32** %opt_index.addr, align 4
  %1 = load %struct.option*, %struct.option** %long_options.addr, align 4
  %2 = load i8*, i8** %options.addr, align 4
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i32, i32* %argc.addr, align 4
  %call = call i32 @_getopt_internal(i32 %4, i8** %3, i8* %2, %struct.option* %1, i32* %0, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind
define i32 @get_method(i32 %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %flags = alloca i8, align 1
  %magic = alloca [2 x i8], align 1
  %stamp = alloca i32, align 4
  %part = alloca i32, align 4
  %len = alloca i32, align 4
  %c = alloca i8, align 1
  %p = alloca i8*, align 4
  %base = alloca i8*, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* @force, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @to_stdout, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* @inptr, align 4
  %3 = load i32, i32* @insize, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %4 = load i32, i32* @inptr, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call = call i32 @fill_inbuf(i32 1)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ]
  %conv2 = trunc i32 %cond to i8
  %arrayidx3 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  store i8 %conv2, i8* %arrayidx3, align 1
  %6 = load i32, i32* @inptr, align 4
  %7 = load i32, i32* @insize, align 4
  %cmp4 = icmp ult i32 %6, %7
  br i1 %cmp4, label %cond.true6, label %cond.false10

cond.true6:                                       ; preds = %cond.end
  %8 = load i32, i32* @inptr, align 4
  %inc7 = add i32 %8, 1
  store i32 %inc7, i32* @inptr, align 4
  %arrayidx8 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %9 to i32
  br label %cond.end12

cond.false10:                                     ; preds = %cond.end
  %call11 = call i32 @fill_inbuf(i32 1)
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false10, %cond.true6
  %cond13 = phi i32 [ %conv9, %cond.true6 ], [ %call11, %cond.false10 ]
  %conv14 = trunc i32 %cond13 to i8
  %arrayidx15 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 1
  store i8 %conv14, i8* %arrayidx15, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %10 = load i32, i32* @inptr, align 4
  %11 = load i32, i32* @insize, align 4
  %cmp16 = icmp ult i32 %10, %11
  br i1 %cmp16, label %cond.true18, label %cond.false22

cond.true18:                                      ; preds = %if.else
  %12 = load i32, i32* @inptr, align 4
  %inc19 = add i32 %12, 1
  store i32 %inc19, i32* @inptr, align 4
  %arrayidx20 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %13 to i32
  br label %cond.end24

cond.false22:                                     ; preds = %if.else
  %call23 = call i32 @fill_inbuf(i32 0)
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false22, %cond.true18
  %cond25 = phi i32 [ %conv21, %cond.true18 ], [ %call23, %cond.false22 ]
  %conv26 = trunc i32 %cond25 to i8
  %arrayidx27 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  store i8 %conv26, i8* %arrayidx27, align 1
  %14 = load i32, i32* @inptr, align 4
  %15 = load i32, i32* @insize, align 4
  %cmp28 = icmp ult i32 %14, %15
  br i1 %cmp28, label %cond.true30, label %cond.false34

cond.true30:                                      ; preds = %cond.end24
  %16 = load i32, i32* @inptr, align 4
  %inc31 = add i32 %16, 1
  store i32 %inc31, i32* @inptr, align 4
  %arrayidx32 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %16
  %17 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %17 to i32
  br label %cond.end36

cond.false34:                                     ; preds = %cond.end24
  %call35 = call i32 @fill_inbuf(i32 0)
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false34, %cond.true30
  %cond37 = phi i32 [ %conv33, %cond.true30 ], [ %call35, %cond.false34 ]
  %conv38 = trunc i32 %cond37 to i8
  %arrayidx39 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 1
  store i8 %conv38, i8* %arrayidx39, align 1
  br label %if.end

if.end:                                           ; preds = %cond.end36, %cond.end12
  store i32 -1, i32* @method, align 4
  %18 = load i32, i32* @part_nb, align 4
  %inc40 = add nsw i32 %18, 1
  store i32 %inc40, i32* @part_nb, align 4
  store i32 0, i32* @header_bytes, align 4
  store i32 0, i32* @last_member, align 4
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  %call41 = call i32 @memcmp(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %cmp42 = icmp eq i32 %call41, 0
  br i1 %cmp42, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %arraydecay44 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  %call45 = call i32 @memcmp(i8* %arraydecay44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %cmp46 = icmp eq i32 %call45, 0
  br i1 %cmp46, label %if.then48, label %if.else344

if.then48:                                        ; preds = %lor.lhs.false, %if.end
  %19 = load i32, i32* @inptr, align 4
  %20 = load i32, i32* @insize, align 4
  %cmp49 = icmp ult i32 %19, %20
  br i1 %cmp49, label %cond.true51, label %cond.false55

cond.true51:                                      ; preds = %if.then48
  %21 = load i32, i32* @inptr, align 4
  %inc52 = add i32 %21, 1
  store i32 %inc52, i32* @inptr, align 4
  %arrayidx53 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %22 to i32
  br label %cond.end57

cond.false55:                                     ; preds = %if.then48
  %call56 = call i32 @fill_inbuf(i32 0)
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false55, %cond.true51
  %cond58 = phi i32 [ %conv54, %cond.true51 ], [ %call56, %cond.false55 ]
  store i32 %cond58, i32* @method, align 4
  %23 = load i32, i32* @method, align 4
  %cmp59 = icmp ne i32 %23, 8
  br i1 %cmp59, label %if.then61, label %if.end65

if.then61:                                        ; preds = %cond.end57
  %24 = load i32, i32* @method, align 4
  %25 = load i8*, i8** @progname, align 4
  %call62 = call %struct._iobuf* @__iob_func()
  %arrayidx63 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call62, i32 2
  %call64 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx63, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.25, i32 0, i32 0), i8* %25, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i32 %24)
  store i32 1, i32* @exit_code, align 4
  store i32 -1, i32* %retval, align 4
  br label %return

if.end65:                                         ; preds = %cond.end57
  store i32 (i32, i32)* @unzip, i32 (i32, i32)** @work, align 4
  %26 = load i32, i32* @inptr, align 4
  %27 = load i32, i32* @insize, align 4
  %cmp66 = icmp ult i32 %26, %27
  br i1 %cmp66, label %cond.true68, label %cond.false72

cond.true68:                                      ; preds = %if.end65
  %28 = load i32, i32* @inptr, align 4
  %inc69 = add i32 %28, 1
  store i32 %inc69, i32* @inptr, align 4
  %arrayidx70 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %28
  %29 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %29 to i32
  br label %cond.end74

cond.false72:                                     ; preds = %if.end65
  %call73 = call i32 @fill_inbuf(i32 0)
  br label %cond.end74

cond.end74:                                       ; preds = %cond.false72, %cond.true68
  %cond75 = phi i32 [ %conv71, %cond.true68 ], [ %call73, %cond.false72 ]
  %conv76 = trunc i32 %cond75 to i8
  store i8 %conv76, i8* %flags, align 1
  %30 = load i8, i8* %flags, align 1
  %conv77 = zext i8 %30 to i32
  %and = and i32 %conv77, 32
  %cmp78 = icmp ne i32 %and, 0
  br i1 %cmp78, label %if.then80, label %if.end84

if.then80:                                        ; preds = %cond.end74
  %31 = load i8*, i8** @progname, align 4
  %call81 = call %struct._iobuf* @__iob_func()
  %arrayidx82 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call81, i32 2
  %call83 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx82, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.26, i32 0, i32 0), i8* %31, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i32 1, i32* @exit_code, align 4
  store i32 -1, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %cond.end74
  %32 = load i8, i8* %flags, align 1
  %conv85 = zext i8 %32 to i32
  %and86 = and i32 %conv85, 2
  %cmp87 = icmp ne i32 %and86, 0
  br i1 %cmp87, label %if.then89, label %if.end97

if.then89:                                        ; preds = %if.end84
  %33 = load i8*, i8** @progname, align 4
  %call90 = call %struct._iobuf* @__iob_func()
  %arrayidx91 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call90, i32 2
  %call92 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx91, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.27, i32 0, i32 0), i8* %33, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i32 1, i32* @exit_code, align 4
  %34 = load i32, i32* @force, align 4
  %cmp93 = icmp sle i32 %34, 1
  br i1 %cmp93, label %if.then95, label %if.end96

if.then95:                                        ; preds = %if.then89
  store i32 -1, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.then89
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.end84
  %35 = load i8, i8* %flags, align 1
  %conv98 = zext i8 %35 to i32
  %and99 = and i32 %conv98, 192
  %cmp100 = icmp ne i32 %and99, 0
  br i1 %cmp100, label %if.then102, label %if.end111

if.then102:                                       ; preds = %if.end97
  %36 = load i8, i8* %flags, align 1
  %conv103 = zext i8 %36 to i32
  %37 = load i8*, i8** @progname, align 4
  %call104 = call %struct._iobuf* @__iob_func()
  %arrayidx105 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call104, i32 2
  %call106 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx105, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.28, i32 0, i32 0), i8* %37, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i32 %conv103)
  store i32 1, i32* @exit_code, align 4
  %38 = load i32, i32* @force, align 4
  %cmp107 = icmp sle i32 %38, 1
  br i1 %cmp107, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.then102
  store i32 -1, i32* %retval, align 4
  br label %return

if.end110:                                        ; preds = %if.then102
  br label %if.end111

if.end111:                                        ; preds = %if.end110, %if.end97
  %39 = load i32, i32* @inptr, align 4
  %40 = load i32, i32* @insize, align 4
  %cmp112 = icmp ult i32 %39, %40
  br i1 %cmp112, label %cond.true114, label %cond.false118

cond.true114:                                     ; preds = %if.end111
  %41 = load i32, i32* @inptr, align 4
  %inc115 = add i32 %41, 1
  store i32 %inc115, i32* @inptr, align 4
  %arrayidx116 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %41
  %42 = load i8, i8* %arrayidx116, align 1
  %conv117 = zext i8 %42 to i32
  br label %cond.end120

cond.false118:                                    ; preds = %if.end111
  %call119 = call i32 @fill_inbuf(i32 0)
  br label %cond.end120

cond.end120:                                      ; preds = %cond.false118, %cond.true114
  %cond121 = phi i32 [ %conv117, %cond.true114 ], [ %call119, %cond.false118 ]
  store i32 %cond121, i32* %stamp, align 4
  %43 = load i32, i32* @inptr, align 4
  %44 = load i32, i32* @insize, align 4
  %cmp122 = icmp ult i32 %43, %44
  br i1 %cmp122, label %cond.true124, label %cond.false128

cond.true124:                                     ; preds = %cond.end120
  %45 = load i32, i32* @inptr, align 4
  %inc125 = add i32 %45, 1
  store i32 %inc125, i32* @inptr, align 4
  %arrayidx126 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %45
  %46 = load i8, i8* %arrayidx126, align 1
  %conv127 = zext i8 %46 to i32
  br label %cond.end130

cond.false128:                                    ; preds = %cond.end120
  %call129 = call i32 @fill_inbuf(i32 0)
  br label %cond.end130

cond.end130:                                      ; preds = %cond.false128, %cond.true124
  %cond131 = phi i32 [ %conv127, %cond.true124 ], [ %call129, %cond.false128 ]
  %shl = shl i32 %cond131, 8
  %47 = load i32, i32* %stamp, align 4
  %or = or i32 %47, %shl
  store i32 %or, i32* %stamp, align 4
  %48 = load i32, i32* @inptr, align 4
  %49 = load i32, i32* @insize, align 4
  %cmp132 = icmp ult i32 %48, %49
  br i1 %cmp132, label %cond.true134, label %cond.false138

cond.true134:                                     ; preds = %cond.end130
  %50 = load i32, i32* @inptr, align 4
  %inc135 = add i32 %50, 1
  store i32 %inc135, i32* @inptr, align 4
  %arrayidx136 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %50
  %51 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %51 to i32
  br label %cond.end140

cond.false138:                                    ; preds = %cond.end130
  %call139 = call i32 @fill_inbuf(i32 0)
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false138, %cond.true134
  %cond141 = phi i32 [ %conv137, %cond.true134 ], [ %call139, %cond.false138 ]
  %shl142 = shl i32 %cond141, 16
  %52 = load i32, i32* %stamp, align 4
  %or143 = or i32 %52, %shl142
  store i32 %or143, i32* %stamp, align 4
  %53 = load i32, i32* @inptr, align 4
  %54 = load i32, i32* @insize, align 4
  %cmp144 = icmp ult i32 %53, %54
  br i1 %cmp144, label %cond.true146, label %cond.false150

cond.true146:                                     ; preds = %cond.end140
  %55 = load i32, i32* @inptr, align 4
  %inc147 = add i32 %55, 1
  store i32 %inc147, i32* @inptr, align 4
  %arrayidx148 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %55
  %56 = load i8, i8* %arrayidx148, align 1
  %conv149 = zext i8 %56 to i32
  br label %cond.end152

cond.false150:                                    ; preds = %cond.end140
  %call151 = call i32 @fill_inbuf(i32 0)
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false150, %cond.true146
  %cond153 = phi i32 [ %conv149, %cond.true146 ], [ %call151, %cond.false150 ]
  %shl154 = shl i32 %cond153, 24
  %57 = load i32, i32* %stamp, align 4
  %or155 = or i32 %57, %shl154
  store i32 %or155, i32* %stamp, align 4
  %58 = load i32, i32* %stamp, align 4
  %cmp156 = icmp ne i32 %58, 0
  br i1 %cmp156, label %land.lhs.true158, label %if.end161

land.lhs.true158:                                 ; preds = %cond.end152
  %59 = load i32, i32* @no_time, align 4
  %tobool159 = icmp ne i32 %59, 0
  br i1 %tobool159, label %if.end161, label %if.then160

if.then160:                                       ; preds = %land.lhs.true158
  %60 = load i32, i32* %stamp, align 4
  store i32 %60, i32* @time_stamp, align 4
  br label %if.end161

if.end161:                                        ; preds = %if.then160, %land.lhs.true158, %cond.end152
  %61 = load i32, i32* @inptr, align 4
  %62 = load i32, i32* @insize, align 4
  %cmp162 = icmp ult i32 %61, %62
  br i1 %cmp162, label %cond.true164, label %cond.false168

cond.true164:                                     ; preds = %if.end161
  %63 = load i32, i32* @inptr, align 4
  %inc165 = add i32 %63, 1
  store i32 %inc165, i32* @inptr, align 4
  %arrayidx166 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %63
  %64 = load i8, i8* %arrayidx166, align 1
  %conv167 = zext i8 %64 to i32
  br label %cond.end170

cond.false168:                                    ; preds = %if.end161
  %call169 = call i32 @fill_inbuf(i32 0)
  br label %cond.end170

cond.end170:                                      ; preds = %cond.false168, %cond.true164
  %cond171 = phi i32 [ %conv167, %cond.true164 ], [ %call169, %cond.false168 ]
  %65 = load i32, i32* @inptr, align 4
  %66 = load i32, i32* @insize, align 4
  %cmp172 = icmp ult i32 %65, %66
  br i1 %cmp172, label %cond.true174, label %cond.false178

cond.true174:                                     ; preds = %cond.end170
  %67 = load i32, i32* @inptr, align 4
  %inc175 = add i32 %67, 1
  store i32 %inc175, i32* @inptr, align 4
  %arrayidx176 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %67
  %68 = load i8, i8* %arrayidx176, align 1
  %conv177 = zext i8 %68 to i32
  br label %cond.end180

cond.false178:                                    ; preds = %cond.end170
  %call179 = call i32 @fill_inbuf(i32 0)
  br label %cond.end180

cond.end180:                                      ; preds = %cond.false178, %cond.true174
  %cond181 = phi i32 [ %conv177, %cond.true174 ], [ %call179, %cond.false178 ]
  %69 = load i8, i8* %flags, align 1
  %conv182 = zext i8 %69 to i32
  %and183 = and i32 %conv182, 2
  %cmp184 = icmp ne i32 %and183, 0
  br i1 %cmp184, label %if.then186, label %if.end215

if.then186:                                       ; preds = %cond.end180
  %70 = load i32, i32* @inptr, align 4
  %71 = load i32, i32* @insize, align 4
  %cmp187 = icmp ult i32 %70, %71
  br i1 %cmp187, label %cond.true189, label %cond.false193

cond.true189:                                     ; preds = %if.then186
  %72 = load i32, i32* @inptr, align 4
  %inc190 = add i32 %72, 1
  store i32 %inc190, i32* @inptr, align 4
  %arrayidx191 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %72
  %73 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %73 to i32
  br label %cond.end195

cond.false193:                                    ; preds = %if.then186
  %call194 = call i32 @fill_inbuf(i32 0)
  br label %cond.end195

cond.end195:                                      ; preds = %cond.false193, %cond.true189
  %cond196 = phi i32 [ %conv192, %cond.true189 ], [ %call194, %cond.false193 ]
  store i32 %cond196, i32* %part, align 4
  %74 = load i32, i32* @inptr, align 4
  %75 = load i32, i32* @insize, align 4
  %cmp197 = icmp ult i32 %74, %75
  br i1 %cmp197, label %cond.true199, label %cond.false203

cond.true199:                                     ; preds = %cond.end195
  %76 = load i32, i32* @inptr, align 4
  %inc200 = add i32 %76, 1
  store i32 %inc200, i32* @inptr, align 4
  %arrayidx201 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %76
  %77 = load i8, i8* %arrayidx201, align 1
  %conv202 = zext i8 %77 to i32
  br label %cond.end205

cond.false203:                                    ; preds = %cond.end195
  %call204 = call i32 @fill_inbuf(i32 0)
  br label %cond.end205

cond.end205:                                      ; preds = %cond.false203, %cond.true199
  %cond206 = phi i32 [ %conv202, %cond.true199 ], [ %call204, %cond.false203 ]
  %shl207 = shl i32 %cond206, 8
  %78 = load i32, i32* %part, align 4
  %or208 = or i32 %78, %shl207
  store i32 %or208, i32* %part, align 4
  %79 = load i32, i32* @verbose, align 4
  %tobool209 = icmp ne i32 %79, 0
  br i1 %tobool209, label %if.then210, label %if.end214

if.then210:                                       ; preds = %cond.end205
  %80 = load i32, i32* %part, align 4
  %81 = load i8*, i8** @progname, align 4
  %call211 = call %struct._iobuf* @__iob_func()
  %arrayidx212 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call211, i32 2
  %call213 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx212, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i32 0, i32 0), i8* %81, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i32 %80)
  br label %if.end214

if.end214:                                        ; preds = %if.then210, %cond.end205
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %cond.end180
  %82 = load i8, i8* %flags, align 1
  %conv216 = zext i8 %82 to i32
  %and217 = and i32 %conv216, 4
  %cmp218 = icmp ne i32 %and217, 0
  br i1 %cmp218, label %if.then220, label %if.end260

if.then220:                                       ; preds = %if.end215
  %83 = load i32, i32* @inptr, align 4
  %84 = load i32, i32* @insize, align 4
  %cmp221 = icmp ult i32 %83, %84
  br i1 %cmp221, label %cond.true223, label %cond.false227

cond.true223:                                     ; preds = %if.then220
  %85 = load i32, i32* @inptr, align 4
  %inc224 = add i32 %85, 1
  store i32 %inc224, i32* @inptr, align 4
  %arrayidx225 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %85
  %86 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %86 to i32
  br label %cond.end229

cond.false227:                                    ; preds = %if.then220
  %call228 = call i32 @fill_inbuf(i32 0)
  br label %cond.end229

cond.end229:                                      ; preds = %cond.false227, %cond.true223
  %cond230 = phi i32 [ %conv226, %cond.true223 ], [ %call228, %cond.false227 ]
  store i32 %cond230, i32* %len, align 4
  %87 = load i32, i32* @inptr, align 4
  %88 = load i32, i32* @insize, align 4
  %cmp231 = icmp ult i32 %87, %88
  br i1 %cmp231, label %cond.true233, label %cond.false237

cond.true233:                                     ; preds = %cond.end229
  %89 = load i32, i32* @inptr, align 4
  %inc234 = add i32 %89, 1
  store i32 %inc234, i32* @inptr, align 4
  %arrayidx235 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %89
  %90 = load i8, i8* %arrayidx235, align 1
  %conv236 = zext i8 %90 to i32
  br label %cond.end239

cond.false237:                                    ; preds = %cond.end229
  %call238 = call i32 @fill_inbuf(i32 0)
  br label %cond.end239

cond.end239:                                      ; preds = %cond.false237, %cond.true233
  %cond240 = phi i32 [ %conv236, %cond.true233 ], [ %call238, %cond.false237 ]
  %shl241 = shl i32 %cond240, 8
  %91 = load i32, i32* %len, align 4
  %or242 = or i32 %91, %shl241
  store i32 %or242, i32* %len, align 4
  %92 = load i32, i32* @verbose, align 4
  %tobool243 = icmp ne i32 %92, 0
  br i1 %tobool243, label %if.then244, label %if.end248

if.then244:                                       ; preds = %cond.end239
  %93 = load i32, i32* %len, align 4
  %94 = load i8*, i8** @progname, align 4
  %call245 = call %struct._iobuf* @__iob_func()
  %arrayidx246 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call245, i32 2
  %call247 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx246, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.30, i32 0, i32 0), i8* %94, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i32 %93)
  br label %if.end248

if.end248:                                        ; preds = %if.then244, %cond.end239
  br label %while.cond

while.cond:                                       ; preds = %cond.end258, %if.end248
  %95 = load i32, i32* %len, align 4
  %dec = add i32 %95, -1
  store i32 %dec, i32* %len, align 4
  %tobool249 = icmp ne i32 %95, 0
  br i1 %tobool249, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %96 = load i32, i32* @inptr, align 4
  %97 = load i32, i32* @insize, align 4
  %cmp250 = icmp ult i32 %96, %97
  br i1 %cmp250, label %cond.true252, label %cond.false256

cond.true252:                                     ; preds = %while.body
  %98 = load i32, i32* @inptr, align 4
  %inc253 = add i32 %98, 1
  store i32 %inc253, i32* @inptr, align 4
  %arrayidx254 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %98
  %99 = load i8, i8* %arrayidx254, align 1
  %conv255 = zext i8 %99 to i32
  br label %cond.end258

cond.false256:                                    ; preds = %while.body
  %call257 = call i32 @fill_inbuf(i32 0)
  br label %cond.end258

cond.end258:                                      ; preds = %cond.false256, %cond.true252
  %cond259 = phi i32 [ %conv255, %cond.true252 ], [ %call257, %cond.false256 ]
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end260

if.end260:                                        ; preds = %while.end, %if.end215
  %100 = load i8, i8* %flags, align 1
  %conv261 = zext i8 %100 to i32
  %and262 = and i32 %conv261, 8
  %cmp263 = icmp ne i32 %and262, 0
  br i1 %cmp263, label %if.then265, label %if.end318

if.then265:                                       ; preds = %if.end260
  %101 = load i32, i32* @no_name, align 4
  %tobool266 = icmp ne i32 %101, 0
  br i1 %tobool266, label %if.then274, label %lor.lhs.false267

lor.lhs.false267:                                 ; preds = %if.then265
  %102 = load i32, i32* @to_stdout, align 4
  %tobool268 = icmp ne i32 %102, 0
  br i1 %tobool268, label %land.lhs.true269, label %lor.lhs.false271

land.lhs.true269:                                 ; preds = %lor.lhs.false267
  %103 = load i32, i32* @list, align 4
  %tobool270 = icmp ne i32 %103, 0
  br i1 %tobool270, label %lor.lhs.false271, label %if.then274

lor.lhs.false271:                                 ; preds = %land.lhs.true269, %lor.lhs.false267
  %104 = load i32, i32* @part_nb, align 4
  %cmp272 = icmp sgt i32 %104, 1
  br i1 %cmp272, label %if.then274, label %if.else289

if.then274:                                       ; preds = %lor.lhs.false271, %land.lhs.true269, %if.then265
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then274
  %105 = load i32, i32* @inptr, align 4
  %106 = load i32, i32* @insize, align 4
  %cmp275 = icmp ult i32 %105, %106
  br i1 %cmp275, label %cond.true277, label %cond.false281

cond.true277:                                     ; preds = %do.body
  %107 = load i32, i32* @inptr, align 4
  %inc278 = add i32 %107, 1
  store i32 %inc278, i32* @inptr, align 4
  %arrayidx279 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %107
  %108 = load i8, i8* %arrayidx279, align 1
  %conv280 = zext i8 %108 to i32
  br label %cond.end283

cond.false281:                                    ; preds = %do.body
  %call282 = call i32 @fill_inbuf(i32 0)
  br label %cond.end283

cond.end283:                                      ; preds = %cond.false281, %cond.true277
  %cond284 = phi i32 [ %conv280, %cond.true277 ], [ %call282, %cond.false281 ]
  %conv285 = trunc i32 %cond284 to i8
  store i8 %conv285, i8* %c, align 1
  br label %do.cond

do.cond:                                          ; preds = %cond.end283
  %109 = load i8, i8* %c, align 1
  %conv286 = sext i8 %109 to i32
  %cmp287 = icmp ne i32 %conv286, 0
  br i1 %cmp287, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end317

if.else289:                                       ; preds = %lor.lhs.false271
  %call290 = call i8* @gzipbasename(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ofname, i32 0, i32 0))
  store i8* %call290, i8** %p, align 4
  %110 = load i8*, i8** %p, align 4
  store i8* %110, i8** %base, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end310, %if.else289
  %111 = load i32, i32* @inptr, align 4
  %112 = load i32, i32* @insize, align 4
  %cmp291 = icmp ult i32 %111, %112
  br i1 %cmp291, label %cond.true293, label %cond.false297

cond.true293:                                     ; preds = %for.cond
  %113 = load i32, i32* @inptr, align 4
  %inc294 = add i32 %113, 1
  store i32 %inc294, i32* @inptr, align 4
  %arrayidx295 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %113
  %114 = load i8, i8* %arrayidx295, align 1
  %conv296 = zext i8 %114 to i32
  br label %cond.end299

cond.false297:                                    ; preds = %for.cond
  %call298 = call i32 @fill_inbuf(i32 0)
  br label %cond.end299

cond.end299:                                      ; preds = %cond.false297, %cond.true293
  %cond300 = phi i32 [ %conv296, %cond.true293 ], [ %call298, %cond.false297 ]
  %conv301 = trunc i32 %cond300 to i8
  %115 = load i8*, i8** %p, align 4
  store i8 %conv301, i8* %115, align 1
  %116 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %117 = load i8, i8* %116, align 1
  %conv302 = sext i8 %117 to i32
  %cmp303 = icmp eq i32 %conv302, 0
  br i1 %cmp303, label %if.then305, label %if.end306

if.then305:                                       ; preds = %cond.end299
  br label %for.end

if.end306:                                        ; preds = %cond.end299
  %118 = load i8*, i8** %p, align 4
  %cmp307 = icmp uge i8* %118, getelementptr inbounds (i8, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ofname, i32 0, i32 0), i32 260)
  br i1 %cmp307, label %if.then309, label %if.end310

if.then309:                                       ; preds = %if.end306
  call void @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.31, i32 0, i32 0))
  br label %if.end310

if.end310:                                        ; preds = %if.then309, %if.end306
  br label %for.cond

for.end:                                          ; preds = %if.then305
  %119 = load i32, i32* @list, align 4
  %tobool311 = icmp ne i32 %119, 0
  br i1 %tobool311, label %if.end316, label %if.then312

if.then312:                                       ; preds = %for.end
  %120 = load i8*, i8** %base, align 4
  %tobool313 = icmp ne i8* %120, null
  br i1 %tobool313, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then312
  store i32 0, i32* @list, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then312
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %for.end
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %do.end
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %if.end260
  %121 = load i8, i8* %flags, align 1
  %conv319 = zext i8 %121 to i32
  %and320 = and i32 %conv319, 16
  %cmp321 = icmp ne i32 %and320, 0
  br i1 %cmp321, label %if.then323, label %if.end339

if.then323:                                       ; preds = %if.end318
  br label %while.cond324

while.cond324:                                    ; preds = %while.body337, %if.then323
  %122 = load i32, i32* @inptr, align 4
  %123 = load i32, i32* @insize, align 4
  %cmp325 = icmp ult i32 %122, %123
  br i1 %cmp325, label %cond.true327, label %cond.false331

cond.true327:                                     ; preds = %while.cond324
  %124 = load i32, i32* @inptr, align 4
  %inc328 = add i32 %124, 1
  store i32 %inc328, i32* @inptr, align 4
  %arrayidx329 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 %124
  %125 = load i8, i8* %arrayidx329, align 1
  %conv330 = zext i8 %125 to i32
  br label %cond.end333

cond.false331:                                    ; preds = %while.cond324
  %call332 = call i32 @fill_inbuf(i32 0)
  br label %cond.end333

cond.end333:                                      ; preds = %cond.false331, %cond.true327
  %cond334 = phi i32 [ %conv330, %cond.true327 ], [ %call332, %cond.false331 ]
  %cmp335 = icmp ne i32 %cond334, 0
  br i1 %cmp335, label %while.body337, label %while.end338

while.body337:                                    ; preds = %cond.end333
  br label %while.cond324

while.end338:                                     ; preds = %cond.end333
  br label %if.end339

if.end339:                                        ; preds = %while.end338, %if.end318
  %126 = load i32, i32* @part_nb, align 4
  %cmp340 = icmp eq i32 %126, 1
  br i1 %cmp340, label %if.then342, label %if.end343

if.then342:                                       ; preds = %if.end339
  %127 = load i32, i32* @inptr, align 4
  %add = add i32 %127, 8
  store i32 %add, i32* @header_bytes, align 4
  br label %if.end343

if.end343:                                        ; preds = %if.then342, %if.end339
  br label %if.end392

if.else344:                                       ; preds = %lor.lhs.false
  %arraydecay345 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  %call346 = call i32 @memcmp(i8* %arraydecay345, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %cmp347 = icmp eq i32 %call346, 0
  br i1 %cmp347, label %land.lhs.true349, label %if.else362

land.lhs.true349:                                 ; preds = %if.else344
  %128 = load i32, i32* @inptr, align 4
  %cmp350 = icmp eq i32 %128, 2
  br i1 %cmp350, label %land.lhs.true352, label %if.else362

land.lhs.true352:                                 ; preds = %land.lhs.true349
  %call353 = call i32 @memcmp(i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i32 4)
  %cmp354 = icmp eq i32 %call353, 0
  br i1 %cmp354, label %if.then356, label %if.else362

if.then356:                                       ; preds = %land.lhs.true352
  store i32 0, i32* @inptr, align 4
  store i32 (i32, i32)* @unzip, i32 (i32, i32)** @work, align 4
  %129 = load i32, i32* %in.addr, align 4
  %call357 = call i32 @check_zipfile(i32 %129)
  %cmp358 = icmp ne i32 %call357, 0
  br i1 %cmp358, label %if.then360, label %if.end361

if.then360:                                       ; preds = %if.then356
  store i32 -1, i32* %retval, align 4
  br label %return

if.end361:                                        ; preds = %if.then356
  store i32 1, i32* @last_member, align 4
  br label %if.end391

if.else362:                                       ; preds = %land.lhs.true352, %land.lhs.true349, %if.else344
  %arraydecay363 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  %call364 = call i32 @memcmp(i8* %arraydecay363, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %cmp365 = icmp eq i32 %call364, 0
  br i1 %cmp365, label %if.then367, label %if.else368

if.then367:                                       ; preds = %if.else362
  store i32 (i32, i32)* @unpack, i32 (i32, i32)** @work, align 4
  store i32 2, i32* @method, align 4
  br label %if.end390

if.else368:                                       ; preds = %if.else362
  %arraydecay369 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  %call370 = call i32 @memcmp(i8* %arraydecay369, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %cmp371 = icmp eq i32 %call370, 0
  br i1 %cmp371, label %if.then373, label %if.else374

if.then373:                                       ; preds = %if.else368
  store i32 (i32, i32)* @unlzw, i32 (i32, i32)** @work, align 4
  store i32 1, i32* @method, align 4
  store i32 1, i32* @last_member, align 4
  br label %if.end389

if.else374:                                       ; preds = %if.else368
  %arraydecay375 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i32 0, i32 0
  %call376 = call i32 @memcmp(i8* %arraydecay375, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %cmp377 = icmp eq i32 %call376, 0
  br i1 %cmp377, label %if.then379, label %if.else380

if.then379:                                       ; preds = %if.else374
  store i32 (i32, i32)* @unlzh, i32 (i32, i32)** @work, align 4
  store i32 3, i32* @method, align 4
  store i32 1, i32* @last_member, align 4
  br label %if.end388

if.else380:                                       ; preds = %if.else374
  %130 = load i32, i32* @force, align 4
  %tobool381 = icmp ne i32 %130, 0
  br i1 %tobool381, label %land.lhs.true382, label %if.end387

land.lhs.true382:                                 ; preds = %if.else380
  %131 = load i32, i32* @to_stdout, align 4
  %tobool383 = icmp ne i32 %131, 0
  br i1 %tobool383, label %land.lhs.true384, label %if.end387

land.lhs.true384:                                 ; preds = %land.lhs.true382
  %132 = load i32, i32* @list, align 4
  %tobool385 = icmp ne i32 %132, 0
  br i1 %tobool385, label %if.end387, label %if.then386

if.then386:                                       ; preds = %land.lhs.true384
  store i32 0, i32* @method, align 4
  store i32 (i32, i32)* @copy, i32 (i32, i32)** @work, align 4
  store i32 0, i32* @inptr, align 4
  store i32 1, i32* @last_member, align 4
  br label %if.end387

if.end387:                                        ; preds = %if.then386, %land.lhs.true384, %land.lhs.true382, %if.else380
  br label %if.end388

if.end388:                                        ; preds = %if.end387, %if.then379
  br label %if.end389

if.end389:                                        ; preds = %if.end388, %if.then373
  br label %if.end390

if.end390:                                        ; preds = %if.end389, %if.then367
  br label %if.end391

if.end391:                                        ; preds = %if.end390, %if.end361
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end343
  %133 = load i32, i32* @method, align 4
  %cmp393 = icmp sge i32 %133, 0
  br i1 %cmp393, label %if.then395, label %if.end396

if.then395:                                       ; preds = %if.end392
  %134 = load i32, i32* @method, align 4
  store i32 %134, i32* %retval, align 4
  br label %return

if.end396:                                        ; preds = %if.end392
  %135 = load i32, i32* @part_nb, align 4
  %cmp397 = icmp eq i32 %135, 1
  br i1 %cmp397, label %if.then399, label %if.else403

if.then399:                                       ; preds = %if.end396
  %136 = load i8*, i8** @progname, align 4
  %call400 = call %struct._iobuf* @__iob_func()
  %arrayidx401 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call400, i32 2
  %call402 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx401, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.37, i32 0, i32 0), i8* %136, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i32 1, i32* @exit_code, align 4
  store i32 -1, i32* %retval, align 4
  br label %return

if.else403:                                       ; preds = %if.end396
  %137 = load i32, i32* @quiet, align 4
  %tobool404 = icmp ne i32 %137, 0
  br i1 %tobool404, label %if.end409, label %if.then405

if.then405:                                       ; preds = %if.else403
  %138 = load i8*, i8** @progname, align 4
  %call406 = call %struct._iobuf* @__iob_func()
  %arrayidx407 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call406, i32 2
  %call408 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx407, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.38, i32 0, i32 0), i8* %138, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  br label %if.end409

if.end409:                                        ; preds = %if.then405, %if.else403
  %139 = load i32, i32* @exit_code, align 4
  %cmp410 = icmp eq i32 %139, 0
  br i1 %cmp410, label %if.then412, label %if.end413

if.then412:                                       ; preds = %if.end409
  store i32 2, i32* @exit_code, align 4
  br label %if.end413

if.end413:                                        ; preds = %if.then412, %if.end409
  store i32 -2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end413, %if.then399, %if.then395, %if.then360, %if.then109, %if.then95, %if.then80, %if.then61
  %140 = load i32, i32* %retval, align 4
  ret i32 %140
}

declare i32 @memcmp(i8*, i8*, i32) #2

; Function Attrs: noinline nounwind
define void @abort_gzip() #0 {
entry:
  %0 = load i32, i32* @remove_ofname, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @ofd, align 4
  %call = call i32 @close(i32 %1)
  %call1 = call i32 @unlink(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ofname, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @do_exit(i32 1)
  ret void
}

declare dllimport i32 @close(i32) #2

declare dllimport i32 @unlink(i8*) #2

; Function Attrs: noinline nounwind
define internal void @do_exit(i32 %exitcode) #0 {
entry:
  %exitcode.addr = alloca i32, align 4
  store i32 %exitcode, i32* %exitcode.addr, align 4
  %0 = load i32, i32* @do_exit.in_exit, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %exitcode.addr, align 4
  call void @exit(i32 %1) #5
  unreachable

if.end:                                           ; preds = %entry
  store i32 1, i32* @do_exit.in_exit, align 4
  %2 = load i8*, i8** @env, align 4
  %cmp = icmp ne i8* %2, null
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %3 = load i8*, i8** @env, align 4
  call void @free(i8* %3) #1
  store i8* null, i8** @env, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %4 = load i8**, i8*** @args, align 4
  %cmp3 = icmp ne i8** %4, null
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end2
  %5 = load i8**, i8*** @args, align 4
  %6 = bitcast i8** %5 to i8*
  call void @free(i8* %6) #1
  store i8** null, i8*** @args, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end2
  %7 = load i32, i32* %exitcode.addr, align 4
  call void @exit(i32 %7) #5
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: noreturn
declare dllimport void @exit(i32) #3

; Function Attrs: argmemonly nounwind
declare dllimport void @free(i8*) #4

; Function Attrs: noinline nounwind
define i32 @huft_build(i32* %b, i32 %n, i32 %s, i16* %d, i16* %e, %struct.huft** %t, i32* %m) #0 {
entry:
  %retval = alloca i32, align 4
  %m.addr = alloca i32*, align 4
  %t.addr = alloca %struct.huft**, align 4
  %e.addr = alloca i16*, align 4
  %d.addr = alloca i16*, align 4
  %s.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %b.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %c = alloca [17 x i32], align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %p = alloca i32*, align 4
  %q = alloca %struct.huft*, align 4
  %r = alloca %struct.huft, align 4
  %u = alloca [16 x %struct.huft*], align 4
  %v = alloca [288 x i32], align 4
  %w = alloca i32, align 4
  %x = alloca [17 x i32], align 4
  %xp = alloca i32*, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32* %m, i32** %m.addr, align 4
  store %struct.huft** %t, %struct.huft*** %t.addr, align 4
  store i16* %e, i16** %e.addr, align 4
  store i16* %d, i16** %d.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  %arraydecay = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* %0, i8 0, i32 68, i32 4, i1 false)
  %1 = load i32*, i32** %b.addr, align 4
  store i32* %1, i32** %p, align 4
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %3 = load i32*, i32** %p, align 4
  %4 = load i32, i32* %3, align 4
  %arrayidx = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %arrayidx, align 4
  %6 = load i32*, i32** %p, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %6, i32 1
  store i32* %incdec.ptr, i32** %p, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load i32, i32* %i, align 4
  %dec = add i32 %7, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %arrayidx1 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 0
  %8 = load i32, i32* %arrayidx1, align 4
  %9 = load i32, i32* %n.addr, align 4
  %cmp = icmp eq i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %10 = load %struct.huft**, %struct.huft*** %t.addr, align 4
  store %struct.huft* null, %struct.huft** %10, align 4
  %11 = load i32*, i32** %m.addr, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.end
  %12 = load i32*, i32** %m.addr, align 4
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %l, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load i32, i32* %j, align 4
  %cmp2 = icmp ule i32 %14, 16
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %j, align 4
  %arrayidx3 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx3, align 4
  %tobool4 = icmp ne i32 %16, 0
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  br label %for.end

if.end6:                                          ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %17 = load i32, i32* %j, align 4
  %inc7 = add i32 %17, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then5, %for.cond
  %18 = load i32, i32* %j, align 4
  store i32 %18, i32* %k, align 4
  %19 = load i32, i32* %l, align 4
  %20 = load i32, i32* %j, align 4
  %cmp8 = icmp ult i32 %19, %20
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %21 = load i32, i32* %j, align 4
  store i32 %21, i32* %l, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %for.end
  store i32 16, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc18, %if.end10
  %22 = load i32, i32* %i, align 4
  %tobool12 = icmp ne i32 %22, 0
  br i1 %tobool12, label %for.body13, label %for.end20

for.body13:                                       ; preds = %for.cond11
  %23 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 %23
  %24 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %24, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %for.body13
  br label %for.end20

if.end17:                                         ; preds = %for.body13
  br label %for.inc18

for.inc18:                                        ; preds = %if.end17
  %25 = load i32, i32* %i, align 4
  %dec19 = add i32 %25, -1
  store i32 %dec19, i32* %i, align 4
  br label %for.cond11

for.end20:                                        ; preds = %if.then16, %for.cond11
  %26 = load i32, i32* %i, align 4
  store i32 %26, i32* %g, align 4
  %27 = load i32, i32* %l, align 4
  %28 = load i32, i32* %i, align 4
  %cmp21 = icmp ugt i32 %27, %28
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %for.end20
  %29 = load i32, i32* %i, align 4
  store i32 %29, i32* %l, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %for.end20
  %30 = load i32, i32* %l, align 4
  %31 = load i32*, i32** %m.addr, align 4
  store i32 %30, i32* %31, align 4
  %32 = load i32, i32* %j, align 4
  %shl = shl i32 1, %32
  store i32 %shl, i32* %y, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc31, %if.end23
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %i, align 4
  %cmp25 = icmp ult i32 %33, %34
  br i1 %cmp25, label %for.body26, label %for.end34

for.body26:                                       ; preds = %for.cond24
  %35 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 %35
  %36 = load i32, i32* %arrayidx27, align 4
  %37 = load i32, i32* %y, align 4
  %sub = sub i32 %37, %36
  store i32 %sub, i32* %y, align 4
  %cmp28 = icmp slt i32 %sub, 0
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %for.body26
  store i32 2, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %for.body26
  br label %for.inc31

for.inc31:                                        ; preds = %if.end30
  %38 = load i32, i32* %j, align 4
  %inc32 = add i32 %38, 1
  store i32 %inc32, i32* %j, align 4
  %39 = load i32, i32* %y, align 4
  %shl33 = shl i32 %39, 1
  store i32 %shl33, i32* %y, align 4
  br label %for.cond24

for.end34:                                        ; preds = %for.cond24
  %40 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 %40
  %41 = load i32, i32* %arrayidx35, align 4
  %42 = load i32, i32* %y, align 4
  %sub36 = sub i32 %42, %41
  store i32 %sub36, i32* %y, align 4
  %cmp37 = icmp slt i32 %sub36, 0
  br i1 %cmp37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.end34
  store i32 2, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %for.end34
  %43 = load i32, i32* %y, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 %44
  %45 = load i32, i32* %arrayidx40, align 4
  %add = add i32 %45, %43
  store i32 %add, i32* %arrayidx40, align 4
  store i32 0, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i32 0, i32 1
  store i32 0, i32* %arrayidx41, align 4
  %arraydecay42 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 0
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay42, i32 1
  store i32* %add.ptr, i32** %p, align 4
  %arraydecay43 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i32 0, i32 0
  %add.ptr44 = getelementptr inbounds i32, i32* %arraydecay43, i32 2
  store i32* %add.ptr44, i32** %xp, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end39
  %46 = load i32, i32* %i, align 4
  %dec45 = add i32 %46, -1
  store i32 %dec45, i32* %i, align 4
  %tobool46 = icmp ne i32 %dec45, 0
  br i1 %tobool46, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %47 = load i32*, i32** %p, align 4
  %incdec.ptr47 = getelementptr inbounds i32, i32* %47, i32 1
  store i32* %incdec.ptr47, i32** %p, align 4
  %48 = load i32, i32* %47, align 4
  %49 = load i32, i32* %j, align 4
  %add48 = add i32 %49, %48
  store i32 %add48, i32* %j, align 4
  %50 = load i32*, i32** %xp, align 4
  %incdec.ptr49 = getelementptr inbounds i32, i32* %50, i32 1
  store i32* %incdec.ptr49, i32** %xp, align 4
  store i32 %add48, i32* %50, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %51 = load i32*, i32** %b.addr, align 4
  store i32* %51, i32** %p, align 4
  store i32 0, i32* %i, align 4
  br label %do.body50

do.body50:                                        ; preds = %do.cond58, %while.end
  %52 = load i32*, i32** %p, align 4
  %incdec.ptr51 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr51, i32** %p, align 4
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %j, align 4
  %cmp52 = icmp ne i32 %53, 0
  br i1 %cmp52, label %if.then53, label %if.end57

if.then53:                                        ; preds = %do.body50
  %54 = load i32, i32* %i, align 4
  %55 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i32 0, i32 %55
  %56 = load i32, i32* %arrayidx54, align 4
  %inc55 = add i32 %56, 1
  store i32 %inc55, i32* %arrayidx54, align 4
  %arrayidx56 = getelementptr inbounds [288 x i32], [288 x i32]* %v, i32 0, i32 %56
  store i32 %54, i32* %arrayidx56, align 4
  br label %if.end57

if.end57:                                         ; preds = %if.then53, %do.body50
  br label %do.cond58

do.cond58:                                        ; preds = %if.end57
  %57 = load i32, i32* %i, align 4
  %inc59 = add i32 %57, 1
  store i32 %inc59, i32* %i, align 4
  %58 = load i32, i32* %n.addr, align 4
  %cmp60 = icmp ult i32 %inc59, %58
  br i1 %cmp60, label %do.body50, label %do.end61

do.end61:                                         ; preds = %do.cond58
  store i32 0, i32* %i, align 4
  %arrayidx62 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i32 0, i32 0
  store i32 0, i32* %arrayidx62, align 4
  %arraydecay63 = getelementptr inbounds [288 x i32], [288 x i32]* %v, i32 0, i32 0
  store i32* %arraydecay63, i32** %p, align 4
  store i32 -1, i32* %h, align 4
  %59 = load i32, i32* %l, align 4
  %sub64 = sub nsw i32 0, %59
  store i32 %sub64, i32* %w, align 4
  %arrayidx65 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i32 0, i32 0
  store %struct.huft* null, %struct.huft** %arrayidx65, align 4
  store %struct.huft* null, %struct.huft** %q, align 4
  store i32 0, i32* %z, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc200, %do.end61
  %60 = load i32, i32* %k, align 4
  %61 = load i32, i32* %g, align 4
  %cmp67 = icmp sle i32 %60, %61
  br i1 %cmp67, label %for.body68, label %for.end202

for.body68:                                       ; preds = %for.cond66
  %62 = load i32, i32* %k, align 4
  %arrayidx69 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 %62
  %63 = load i32, i32* %arrayidx69, align 4
  store i32 %63, i32* %a, align 4
  br label %while.cond70

while.cond70:                                     ; preds = %while.end198, %for.body68
  %64 = load i32, i32* %a, align 4
  %dec71 = add i32 %64, -1
  store i32 %dec71, i32* %a, align 4
  %tobool72 = icmp ne i32 %64, 0
  br i1 %tobool72, label %while.body73, label %while.end199

while.body73:                                     ; preds = %while.cond70
  br label %while.cond74

while.cond74:                                     ; preds = %if.end133, %while.body73
  %65 = load i32, i32* %k, align 4
  %66 = load i32, i32* %w, align 4
  %67 = load i32, i32* %l, align 4
  %add75 = add nsw i32 %66, %67
  %cmp76 = icmp sgt i32 %65, %add75
  br i1 %cmp76, label %while.body77, label %while.end134

while.body77:                                     ; preds = %while.cond74
  %68 = load i32, i32* %h, align 4
  %inc78 = add nsw i32 %68, 1
  store i32 %inc78, i32* %h, align 4
  %69 = load i32, i32* %l, align 4
  %70 = load i32, i32* %w, align 4
  %add79 = add nsw i32 %70, %69
  store i32 %add79, i32* %w, align 4
  %71 = load i32, i32* %g, align 4
  %72 = load i32, i32* %w, align 4
  %sub80 = sub nsw i32 %71, %72
  store i32 %sub80, i32* %z, align 4
  %73 = load i32, i32* %l, align 4
  %cmp81 = icmp ugt i32 %sub80, %73
  br i1 %cmp81, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body77
  %74 = load i32, i32* %l, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body77
  %75 = load i32, i32* %z, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %74, %cond.true ], [ %75, %cond.false ]
  store i32 %cond, i32* %z, align 4
  %76 = load i32, i32* %k, align 4
  %77 = load i32, i32* %w, align 4
  %sub82 = sub nsw i32 %76, %77
  store i32 %sub82, i32* %j, align 4
  %shl83 = shl i32 1, %sub82
  store i32 %shl83, i32* %f, align 4
  %78 = load i32, i32* %a, align 4
  %add84 = add i32 %78, 1
  %cmp85 = icmp ugt i32 %shl83, %add84
  br i1 %cmp85, label %if.then86, label %if.end102

if.then86:                                        ; preds = %cond.end
  %79 = load i32, i32* %a, align 4
  %add87 = add i32 %79, 1
  %80 = load i32, i32* %f, align 4
  %sub88 = sub i32 %80, %add87
  store i32 %sub88, i32* %f, align 4
  %arraydecay89 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i32 0, i32 0
  %81 = load i32, i32* %k, align 4
  %add.ptr90 = getelementptr inbounds i32, i32* %arraydecay89, i32 %81
  store i32* %add.ptr90, i32** %xp, align 4
  br label %while.cond91

while.cond91:                                     ; preds = %if.end99, %if.then86
  %82 = load i32, i32* %j, align 4
  %inc92 = add i32 %82, 1
  store i32 %inc92, i32* %j, align 4
  %83 = load i32, i32* %z, align 4
  %cmp93 = icmp ult i32 %inc92, %83
  br i1 %cmp93, label %while.body94, label %while.end101

while.body94:                                     ; preds = %while.cond91
  %84 = load i32, i32* %f, align 4
  %shl95 = shl i32 %84, 1
  store i32 %shl95, i32* %f, align 4
  %85 = load i32*, i32** %xp, align 4
  %incdec.ptr96 = getelementptr inbounds i32, i32* %85, i32 1
  store i32* %incdec.ptr96, i32** %xp, align 4
  %86 = load i32, i32* %incdec.ptr96, align 4
  %cmp97 = icmp ule i32 %shl95, %86
  br i1 %cmp97, label %if.then98, label %if.end99

if.then98:                                        ; preds = %while.body94
  br label %while.end101

if.end99:                                         ; preds = %while.body94
  %87 = load i32*, i32** %xp, align 4
  %88 = load i32, i32* %87, align 4
  %89 = load i32, i32* %f, align 4
  %sub100 = sub i32 %89, %88
  store i32 %sub100, i32* %f, align 4
  br label %while.cond91

while.end101:                                     ; preds = %if.then98, %while.cond91
  br label %if.end102

if.end102:                                        ; preds = %while.end101, %cond.end
  %90 = load i32, i32* %j, align 4
  %shl103 = shl i32 1, %90
  store i32 %shl103, i32* %z, align 4
  %91 = load i32, i32* %z, align 4
  %add104 = add i32 %91, 1
  %mul = mul i32 %add104, 8
  %call = call noalias i8* @malloc(i32 %mul) #1
  %92 = bitcast i8* %call to %struct.huft*
  store %struct.huft* %92, %struct.huft** %q, align 4
  %cmp105 = icmp eq %struct.huft* %92, null
  br i1 %cmp105, label %if.then106, label %if.end112

if.then106:                                       ; preds = %if.end102
  %93 = load i32, i32* %h, align 4
  %tobool107 = icmp ne i32 %93, 0
  br i1 %tobool107, label %if.then108, label %if.end111

if.then108:                                       ; preds = %if.then106
  %arrayidx109 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i32 0, i32 0
  %94 = load %struct.huft*, %struct.huft** %arrayidx109, align 4
  %call110 = call i32 @huft_free(%struct.huft* %94)
  br label %if.end111

if.end111:                                        ; preds = %if.then108, %if.then106
  store i32 3, i32* %retval, align 4
  br label %return

if.end112:                                        ; preds = %if.end102
  %95 = load i32, i32* %z, align 4
  %add113 = add i32 %95, 1
  %96 = load i32, i32* @hufts, align 4
  %add114 = add i32 %96, %add113
  store i32 %add114, i32* @hufts, align 4
  %97 = load %struct.huft*, %struct.huft** %q, align 4
  %add.ptr115 = getelementptr inbounds %struct.huft, %struct.huft* %97, i32 1
  %98 = load %struct.huft**, %struct.huft*** %t.addr, align 4
  store %struct.huft* %add.ptr115, %struct.huft** %98, align 4
  %99 = load %struct.huft*, %struct.huft** %q, align 4
  %v116 = getelementptr inbounds %struct.huft, %struct.huft* %99, i32 0, i32 2
  %t117 = bitcast %union.anon* %v116 to %struct.huft**
  store %struct.huft** %t117, %struct.huft*** %t.addr, align 4
  store %struct.huft* null, %struct.huft** %t117, align 4
  %100 = load %struct.huft*, %struct.huft** %q, align 4
  %incdec.ptr118 = getelementptr inbounds %struct.huft, %struct.huft* %100, i32 1
  store %struct.huft* %incdec.ptr118, %struct.huft** %q, align 4
  %101 = load i32, i32* %h, align 4
  %arrayidx119 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i32 0, i32 %101
  store %struct.huft* %incdec.ptr118, %struct.huft** %arrayidx119, align 4
  %102 = load i32, i32* %h, align 4
  %tobool120 = icmp ne i32 %102, 0
  br i1 %tobool120, label %if.then121, label %if.end133

if.then121:                                       ; preds = %if.end112
  %103 = load i32, i32* %i, align 4
  %104 = load i32, i32* %h, align 4
  %arrayidx122 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i32 0, i32 %104
  store i32 %103, i32* %arrayidx122, align 4
  %105 = load i32, i32* %l, align 4
  %conv = trunc i32 %105 to i8
  %b123 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 1
  store i8 %conv, i8* %b123, align 1
  %106 = load i32, i32* %j, align 4
  %add124 = add i32 16, %106
  %conv125 = trunc i32 %add124 to i8
  %e126 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0
  store i8 %conv125, i8* %e126, align 4
  %107 = load %struct.huft*, %struct.huft** %q, align 4
  %v127 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 2
  %t128 = bitcast %union.anon* %v127 to %struct.huft**
  store %struct.huft* %107, %struct.huft** %t128, align 4
  %108 = load i32, i32* %i, align 4
  %109 = load i32, i32* %w, align 4
  %110 = load i32, i32* %l, align 4
  %sub129 = sub nsw i32 %109, %110
  %shr = lshr i32 %108, %sub129
  store i32 %shr, i32* %j, align 4
  %111 = load i32, i32* %j, align 4
  %112 = load i32, i32* %h, align 4
  %sub130 = sub nsw i32 %112, 1
  %arrayidx131 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i32 0, i32 %sub130
  %113 = load %struct.huft*, %struct.huft** %arrayidx131, align 4
  %arrayidx132 = getelementptr inbounds %struct.huft, %struct.huft* %113, i32 %111
  %114 = bitcast %struct.huft* %arrayidx132 to i8*
  %115 = bitcast %struct.huft* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %114, i8* %115, i32 8, i32 4, i1 false)
  br label %if.end133

if.end133:                                        ; preds = %if.then121, %if.end112
  br label %while.cond74

while.end134:                                     ; preds = %while.cond74
  %116 = load i32, i32* %k, align 4
  %117 = load i32, i32* %w, align 4
  %sub135 = sub nsw i32 %116, %117
  %conv136 = trunc i32 %sub135 to i8
  %b137 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 1
  store i8 %conv136, i8* %b137, align 1
  %118 = load i32*, i32** %p, align 4
  %arraydecay138 = getelementptr inbounds [288 x i32], [288 x i32]* %v, i32 0, i32 0
  %119 = load i32, i32* %n.addr, align 4
  %add.ptr139 = getelementptr inbounds i32, i32* %arraydecay138, i32 %119
  %cmp140 = icmp uge i32* %118, %add.ptr139
  br i1 %cmp140, label %if.then142, label %if.else

if.then142:                                       ; preds = %while.end134
  %e143 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0
  store i8 99, i8* %e143, align 4
  br label %if.end167

if.else:                                          ; preds = %while.end134
  %120 = load i32*, i32** %p, align 4
  %121 = load i32, i32* %120, align 4
  %122 = load i32, i32* %s.addr, align 4
  %cmp144 = icmp ult i32 %121, %122
  br i1 %cmp144, label %if.then146, label %if.else156

if.then146:                                       ; preds = %if.else
  %123 = load i32*, i32** %p, align 4
  %124 = load i32, i32* %123, align 4
  %cmp147 = icmp ult i32 %124, 256
  %cond149 = select i1 %cmp147, i32 16, i32 15
  %conv150 = trunc i32 %cond149 to i8
  %e151 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0
  store i8 %conv150, i8* %e151, align 4
  %125 = load i32*, i32** %p, align 4
  %126 = load i32, i32* %125, align 4
  %conv152 = trunc i32 %126 to i16
  %v153 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 2
  %n154 = bitcast %union.anon* %v153 to i16*
  store i16 %conv152, i16* %n154, align 4
  %127 = load i32*, i32** %p, align 4
  %incdec.ptr155 = getelementptr inbounds i32, i32* %127, i32 1
  store i32* %incdec.ptr155, i32** %p, align 4
  br label %if.end166

if.else156:                                       ; preds = %if.else
  %128 = load i32*, i32** %p, align 4
  %129 = load i32, i32* %128, align 4
  %130 = load i32, i32* %s.addr, align 4
  %sub157 = sub i32 %129, %130
  %131 = load i16*, i16** %e.addr, align 4
  %arrayidx158 = getelementptr inbounds i16, i16* %131, i32 %sub157
  %132 = load i16, i16* %arrayidx158, align 2
  %conv159 = trunc i16 %132 to i8
  %e160 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0
  store i8 %conv159, i8* %e160, align 4
  %133 = load i32*, i32** %p, align 4
  %incdec.ptr161 = getelementptr inbounds i32, i32* %133, i32 1
  store i32* %incdec.ptr161, i32** %p, align 4
  %134 = load i32, i32* %133, align 4
  %135 = load i32, i32* %s.addr, align 4
  %sub162 = sub i32 %134, %135
  %136 = load i16*, i16** %d.addr, align 4
  %arrayidx163 = getelementptr inbounds i16, i16* %136, i32 %sub162
  %137 = load i16, i16* %arrayidx163, align 2
  %v164 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 2
  %n165 = bitcast %union.anon* %v164 to i16*
  store i16 %137, i16* %n165, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.else156, %if.then146
  br label %if.end167

if.end167:                                        ; preds = %if.end166, %if.then142
  %138 = load i32, i32* %k, align 4
  %139 = load i32, i32* %w, align 4
  %sub168 = sub nsw i32 %138, %139
  %shl169 = shl i32 1, %sub168
  store i32 %shl169, i32* %f, align 4
  %140 = load i32, i32* %i, align 4
  %141 = load i32, i32* %w, align 4
  %shr170 = lshr i32 %140, %141
  store i32 %shr170, i32* %j, align 4
  br label %for.cond171

for.cond171:                                      ; preds = %for.inc176, %if.end167
  %142 = load i32, i32* %j, align 4
  %143 = load i32, i32* %z, align 4
  %cmp172 = icmp ult i32 %142, %143
  br i1 %cmp172, label %for.body174, label %for.end178

for.body174:                                      ; preds = %for.cond171
  %144 = load i32, i32* %j, align 4
  %145 = load %struct.huft*, %struct.huft** %q, align 4
  %arrayidx175 = getelementptr inbounds %struct.huft, %struct.huft* %145, i32 %144
  %146 = bitcast %struct.huft* %arrayidx175 to i8*
  %147 = bitcast %struct.huft* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %146, i8* %147, i32 8, i32 4, i1 false)
  br label %for.inc176

for.inc176:                                       ; preds = %for.body174
  %148 = load i32, i32* %f, align 4
  %149 = load i32, i32* %j, align 4
  %add177 = add i32 %149, %148
  store i32 %add177, i32* %j, align 4
  br label %for.cond171

for.end178:                                       ; preds = %for.cond171
  %150 = load i32, i32* %k, align 4
  %sub179 = sub nsw i32 %150, 1
  %shl180 = shl i32 1, %sub179
  store i32 %shl180, i32* %j, align 4
  br label %for.cond181

for.cond181:                                      ; preds = %for.inc184, %for.end178
  %151 = load i32, i32* %i, align 4
  %152 = load i32, i32* %j, align 4
  %and = and i32 %151, %152
  %tobool182 = icmp ne i32 %and, 0
  br i1 %tobool182, label %for.body183, label %for.end186

for.body183:                                      ; preds = %for.cond181
  %153 = load i32, i32* %j, align 4
  %154 = load i32, i32* %i, align 4
  %xor = xor i32 %154, %153
  store i32 %xor, i32* %i, align 4
  br label %for.inc184

for.inc184:                                       ; preds = %for.body183
  %155 = load i32, i32* %j, align 4
  %shr185 = lshr i32 %155, 1
  store i32 %shr185, i32* %j, align 4
  br label %for.cond181

for.end186:                                       ; preds = %for.cond181
  %156 = load i32, i32* %j, align 4
  %157 = load i32, i32* %i, align 4
  %xor187 = xor i32 %157, %156
  store i32 %xor187, i32* %i, align 4
  br label %while.cond188

while.cond188:                                    ; preds = %while.body195, %for.end186
  %158 = load i32, i32* %i, align 4
  %159 = load i32, i32* %w, align 4
  %shl189 = shl i32 1, %159
  %sub190 = sub nsw i32 %shl189, 1
  %and191 = and i32 %158, %sub190
  %160 = load i32, i32* %h, align 4
  %arrayidx192 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i32 0, i32 %160
  %161 = load i32, i32* %arrayidx192, align 4
  %cmp193 = icmp ne i32 %and191, %161
  br i1 %cmp193, label %while.body195, label %while.end198

while.body195:                                    ; preds = %while.cond188
  %162 = load i32, i32* %h, align 4
  %dec196 = add nsw i32 %162, -1
  store i32 %dec196, i32* %h, align 4
  %163 = load i32, i32* %l, align 4
  %164 = load i32, i32* %w, align 4
  %sub197 = sub nsw i32 %164, %163
  store i32 %sub197, i32* %w, align 4
  br label %while.cond188

while.end198:                                     ; preds = %while.cond188
  br label %while.cond70

while.end199:                                     ; preds = %while.cond70
  br label %for.inc200

for.inc200:                                       ; preds = %while.end199
  %165 = load i32, i32* %k, align 4
  %inc201 = add nsw i32 %165, 1
  store i32 %inc201, i32* %k, align 4
  br label %for.cond66

for.end202:                                       ; preds = %for.cond66
  %166 = load i32, i32* %y, align 4
  %cmp203 = icmp ne i32 %166, 0
  br i1 %cmp203, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.end202
  %167 = load i32, i32* %g, align 4
  %cmp205 = icmp ne i32 %167, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.end202
  %168 = phi i1 [ false, %for.end202 ], [ %cmp205, %land.rhs ]
  %land.ext = zext i1 %168 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

return:                                           ; preds = %land.end, %if.end111, %if.then38, %if.then29, %if.then
  %169 = load i32, i32* %retval, align 4
  ret i32 %169
}

; Function Attrs: argmemonly nounwind
declare dllimport noalias i8* @malloc(i32) #4

; Function Attrs: noinline nounwind
define i32 @huft_free(%struct.huft* %t) #0 {
entry:
  %t.addr = alloca %struct.huft*, align 4
  %p = alloca %struct.huft*, align 4
  %q = alloca %struct.huft*, align 4
  store %struct.huft* %t, %struct.huft** %t.addr, align 4
  %0 = load %struct.huft*, %struct.huft** %t.addr, align 4
  store %struct.huft* %0, %struct.huft** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.huft*, %struct.huft** %p, align 4
  %cmp = icmp ne %struct.huft* %1, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.huft*, %struct.huft** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.huft, %struct.huft* %2, i32 -1
  store %struct.huft* %incdec.ptr, %struct.huft** %p, align 4
  %v = getelementptr inbounds %struct.huft, %struct.huft* %incdec.ptr, i32 0, i32 2
  %t1 = bitcast %union.anon* %v to %struct.huft**
  %3 = load %struct.huft*, %struct.huft** %t1, align 4
  store %struct.huft* %3, %struct.huft** %q, align 4
  %4 = load %struct.huft*, %struct.huft** %p, align 4
  %5 = bitcast %struct.huft* %4 to i8*
  call void @free(i8* %5) #1
  %6 = load %struct.huft*, %struct.huft** %q, align 4
  store %struct.huft* %6, %struct.huft** %p, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

; Function Attrs: noinline nounwind
define i32 @inflate_codes(%struct.huft* %tl, %struct.huft* %td, i32 %bl, i32 %bd) #0 {
entry:
  %retval = alloca i32, align 4
  %bd.addr = alloca i32, align 4
  %bl.addr = alloca i32, align 4
  %td.addr = alloca %struct.huft*, align 4
  %tl.addr = alloca %struct.huft*, align 4
  %e = alloca i32, align 4
  %n = alloca i32, align 4
  %d = alloca i32, align 4
  %w = alloca i32, align 4
  %t = alloca %struct.huft*, align 4
  %ml = alloca i32, align 4
  %md = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %bd, i32* %bd.addr, align 4
  store i32 %bl, i32* %bl.addr, align 4
  store %struct.huft* %td, %struct.huft** %td.addr, align 4
  store %struct.huft* %tl, %struct.huft** %tl.addr, align 4
  %0 = load i32, i32* @bb, align 4
  store i32 %0, i32* %b, align 4
  %1 = load i32, i32* @bk, align 4
  store i32 %1, i32* %k, align 4
  %2 = load i32, i32* @outcnt, align 4
  store i32 %2, i32* %w, align 4
  %3 = load i32, i32* %bl.addr, align 4
  %arrayidx = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i32 0, i32 %3
  %4 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %4 to i32
  store i32 %conv, i32* %ml, align 4
  %5 = load i32, i32* %bd.addr, align 4
  %arrayidx1 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i32 0, i32 %5
  %6 = load i16, i16* %arrayidx1, align 2
  %conv2 = zext i16 %6 to i32
  store i32 %conv2, i32* %md, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end251, %entry
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load i32, i32* %bl.addr, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i32, i32* @inptr, align 4
  %10 = load i32, i32* @insize, align 4
  %cmp4 = icmp ult i32 %9, %10
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %11 = load i32, i32* @inptr, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx6 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %11
  %12 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %12 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv7, %cond.true ], [ %call, %cond.false ]
  %conv8 = trunc i32 %cond to i8
  %conv9 = zext i8 %conv8 to i32
  %13 = load i32, i32* %k, align 4
  %shl = shl i32 %conv9, %13
  %14 = load i32, i32* %b, align 4
  %or = or i32 %14, %shl
  store i32 %or, i32* %b, align 4
  %15 = load i32, i32* %k, align 4
  %add = add i32 %15, 8
  store i32 %add, i32* %k, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load %struct.huft*, %struct.huft** %tl.addr, align 4
  %17 = load i32, i32* %b, align 4
  %18 = load i32, i32* %ml, align 4
  %and = and i32 %17, %18
  %add.ptr = getelementptr inbounds %struct.huft, %struct.huft* %16, i32 %and
  store %struct.huft* %add.ptr, %struct.huft** %t, align 4
  %e10 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr, i32 0, i32 0
  %19 = load i8, i8* %e10, align 4
  %conv11 = zext i8 %19 to i32
  store i32 %conv11, i32* %e, align 4
  %cmp12 = icmp ugt i32 %conv11, 16
  br i1 %cmp12, label %if.then, label %if.end51

if.then:                                          ; preds = %while.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %20 = load i32, i32* %e, align 4
  %cmp14 = icmp eq i32 %20, 99
  br i1 %cmp14, label %if.then16, label %if.end

if.then16:                                        ; preds = %do.body
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body
  %21 = load %struct.huft*, %struct.huft** %t, align 4
  %b17 = getelementptr inbounds %struct.huft, %struct.huft* %21, i32 0, i32 1
  %22 = load i8, i8* %b17, align 1
  %conv18 = zext i8 %22 to i32
  %23 = load i32, i32* %b, align 4
  %shr = lshr i32 %23, %conv18
  store i32 %shr, i32* %b, align 4
  %24 = load %struct.huft*, %struct.huft** %t, align 4
  %b19 = getelementptr inbounds %struct.huft, %struct.huft* %24, i32 0, i32 1
  %25 = load i8, i8* %b19, align 1
  %conv20 = zext i8 %25 to i32
  %26 = load i32, i32* %k, align 4
  %sub = sub i32 %26, %conv20
  store i32 %sub, i32* %k, align 4
  %27 = load i32, i32* %e, align 4
  %sub21 = sub i32 %27, 16
  store i32 %sub21, i32* %e, align 4
  br label %while.cond22

while.cond22:                                     ; preds = %cond.end34, %if.end
  %28 = load i32, i32* %k, align 4
  %29 = load i32, i32* %e, align 4
  %cmp23 = icmp ult i32 %28, %29
  br i1 %cmp23, label %while.body25, label %while.end41

while.body25:                                     ; preds = %while.cond22
  %30 = load i32, i32* @inptr, align 4
  %31 = load i32, i32* @insize, align 4
  %cmp26 = icmp ult i32 %30, %31
  br i1 %cmp26, label %cond.true28, label %cond.false32

cond.true28:                                      ; preds = %while.body25
  %32 = load i32, i32* @inptr, align 4
  %inc29 = add i32 %32, 1
  store i32 %inc29, i32* @inptr, align 4
  %arrayidx30 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %32
  %33 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %33 to i32
  br label %cond.end34

cond.false32:                                     ; preds = %while.body25
  %call33 = call i32 @fill_inbuf(i32 0)
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false32, %cond.true28
  %cond35 = phi i32 [ %conv31, %cond.true28 ], [ %call33, %cond.false32 ]
  %conv36 = trunc i32 %cond35 to i8
  %conv37 = zext i8 %conv36 to i32
  %34 = load i32, i32* %k, align 4
  %shl38 = shl i32 %conv37, %34
  %35 = load i32, i32* %b, align 4
  %or39 = or i32 %35, %shl38
  store i32 %or39, i32* %b, align 4
  %36 = load i32, i32* %k, align 4
  %add40 = add i32 %36, 8
  store i32 %add40, i32* %k, align 4
  br label %while.cond22

while.end41:                                      ; preds = %while.cond22
  br label %do.cond

do.cond:                                          ; preds = %while.end41
  %37 = load %struct.huft*, %struct.huft** %t, align 4
  %v = getelementptr inbounds %struct.huft, %struct.huft* %37, i32 0, i32 2
  %t42 = bitcast %union.anon* %v to %struct.huft**
  %38 = load %struct.huft*, %struct.huft** %t42, align 4
  %39 = load i32, i32* %b, align 4
  %40 = load i32, i32* %e, align 4
  %arrayidx43 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i32 0, i32 %40
  %41 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %41 to i32
  %and45 = and i32 %39, %conv44
  %add.ptr46 = getelementptr inbounds %struct.huft, %struct.huft* %38, i32 %and45
  store %struct.huft* %add.ptr46, %struct.huft** %t, align 4
  %e47 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr46, i32 0, i32 0
  %42 = load i8, i8* %e47, align 4
  %conv48 = zext i8 %42 to i32
  store i32 %conv48, i32* %e, align 4
  %cmp49 = icmp ugt i32 %conv48, 16
  br i1 %cmp49, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end51

if.end51:                                         ; preds = %do.end, %while.end
  %43 = load %struct.huft*, %struct.huft** %t, align 4
  %b52 = getelementptr inbounds %struct.huft, %struct.huft* %43, i32 0, i32 1
  %44 = load i8, i8* %b52, align 1
  %conv53 = zext i8 %44 to i32
  %45 = load i32, i32* %b, align 4
  %shr54 = lshr i32 %45, %conv53
  store i32 %shr54, i32* %b, align 4
  %46 = load %struct.huft*, %struct.huft** %t, align 4
  %b55 = getelementptr inbounds %struct.huft, %struct.huft* %46, i32 0, i32 1
  %47 = load i8, i8* %b55, align 1
  %conv56 = zext i8 %47 to i32
  %48 = load i32, i32* %k, align 4
  %sub57 = sub i32 %48, %conv56
  store i32 %sub57, i32* %k, align 4
  %49 = load i32, i32* %e, align 4
  %cmp58 = icmp eq i32 %49, 16
  br i1 %cmp58, label %if.then60, label %if.else

if.then60:                                        ; preds = %if.end51
  %50 = load %struct.huft*, %struct.huft** %t, align 4
  %v61 = getelementptr inbounds %struct.huft, %struct.huft* %50, i32 0, i32 2
  %n62 = bitcast %union.anon* %v61 to i16*
  %51 = load i16, i16* %n62, align 4
  %conv63 = trunc i16 %51 to i8
  %52 = load i32, i32* %w, align 4
  %inc64 = add i32 %52, 1
  store i32 %inc64, i32* %w, align 4
  %arrayidx65 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %52
  store i8 %conv63, i8* %arrayidx65, align 1
  %53 = load i32, i32* %w, align 4
  %cmp66 = icmp eq i32 %53, 32768
  br i1 %cmp66, label %if.then68, label %if.end69

if.then68:                                        ; preds = %if.then60
  %54 = load i32, i32* %w, align 4
  store i32 %54, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %w, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.then68, %if.then60
  br label %if.end251

if.else:                                          ; preds = %if.end51
  %55 = load i32, i32* %e, align 4
  %cmp70 = icmp eq i32 %55, 15
  br i1 %cmp70, label %if.then72, label %if.end73

if.then72:                                        ; preds = %if.else
  br label %for.end

if.end73:                                         ; preds = %if.else
  br label %while.cond74

while.cond74:                                     ; preds = %cond.end86, %if.end73
  %56 = load i32, i32* %k, align 4
  %57 = load i32, i32* %e, align 4
  %cmp75 = icmp ult i32 %56, %57
  br i1 %cmp75, label %while.body77, label %while.end93

while.body77:                                     ; preds = %while.cond74
  %58 = load i32, i32* @inptr, align 4
  %59 = load i32, i32* @insize, align 4
  %cmp78 = icmp ult i32 %58, %59
  br i1 %cmp78, label %cond.true80, label %cond.false84

cond.true80:                                      ; preds = %while.body77
  %60 = load i32, i32* @inptr, align 4
  %inc81 = add i32 %60, 1
  store i32 %inc81, i32* @inptr, align 4
  %arrayidx82 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %60
  %61 = load i8, i8* %arrayidx82, align 1
  %conv83 = zext i8 %61 to i32
  br label %cond.end86

cond.false84:                                     ; preds = %while.body77
  %call85 = call i32 @fill_inbuf(i32 0)
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false84, %cond.true80
  %cond87 = phi i32 [ %conv83, %cond.true80 ], [ %call85, %cond.false84 ]
  %conv88 = trunc i32 %cond87 to i8
  %conv89 = zext i8 %conv88 to i32
  %62 = load i32, i32* %k, align 4
  %shl90 = shl i32 %conv89, %62
  %63 = load i32, i32* %b, align 4
  %or91 = or i32 %63, %shl90
  store i32 %or91, i32* %b, align 4
  %64 = load i32, i32* %k, align 4
  %add92 = add i32 %64, 8
  store i32 %add92, i32* %k, align 4
  br label %while.cond74

while.end93:                                      ; preds = %while.cond74
  %65 = load %struct.huft*, %struct.huft** %t, align 4
  %v94 = getelementptr inbounds %struct.huft, %struct.huft* %65, i32 0, i32 2
  %n95 = bitcast %union.anon* %v94 to i16*
  %66 = load i16, i16* %n95, align 4
  %conv96 = zext i16 %66 to i32
  %67 = load i32, i32* %b, align 4
  %68 = load i32, i32* %e, align 4
  %arrayidx97 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i32 0, i32 %68
  %69 = load i16, i16* %arrayidx97, align 2
  %conv98 = zext i16 %69 to i32
  %and99 = and i32 %67, %conv98
  %add100 = add i32 %conv96, %and99
  store i32 %add100, i32* %n, align 4
  %70 = load i32, i32* %e, align 4
  %71 = load i32, i32* %b, align 4
  %shr101 = lshr i32 %71, %70
  store i32 %shr101, i32* %b, align 4
  %72 = load i32, i32* %e, align 4
  %73 = load i32, i32* %k, align 4
  %sub102 = sub i32 %73, %72
  store i32 %sub102, i32* %k, align 4
  br label %while.cond103

while.cond103:                                    ; preds = %cond.end115, %while.end93
  %74 = load i32, i32* %k, align 4
  %75 = load i32, i32* %bd.addr, align 4
  %cmp104 = icmp ult i32 %74, %75
  br i1 %cmp104, label %while.body106, label %while.end122

while.body106:                                    ; preds = %while.cond103
  %76 = load i32, i32* @inptr, align 4
  %77 = load i32, i32* @insize, align 4
  %cmp107 = icmp ult i32 %76, %77
  br i1 %cmp107, label %cond.true109, label %cond.false113

cond.true109:                                     ; preds = %while.body106
  %78 = load i32, i32* @inptr, align 4
  %inc110 = add i32 %78, 1
  store i32 %inc110, i32* @inptr, align 4
  %arrayidx111 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %78
  %79 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %79 to i32
  br label %cond.end115

cond.false113:                                    ; preds = %while.body106
  %call114 = call i32 @fill_inbuf(i32 0)
  br label %cond.end115

cond.end115:                                      ; preds = %cond.false113, %cond.true109
  %cond116 = phi i32 [ %conv112, %cond.true109 ], [ %call114, %cond.false113 ]
  %conv117 = trunc i32 %cond116 to i8
  %conv118 = zext i8 %conv117 to i32
  %80 = load i32, i32* %k, align 4
  %shl119 = shl i32 %conv118, %80
  %81 = load i32, i32* %b, align 4
  %or120 = or i32 %81, %shl119
  store i32 %or120, i32* %b, align 4
  %82 = load i32, i32* %k, align 4
  %add121 = add i32 %82, 8
  store i32 %add121, i32* %k, align 4
  br label %while.cond103

while.end122:                                     ; preds = %while.cond103
  %83 = load %struct.huft*, %struct.huft** %td.addr, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %md, align 4
  %and123 = and i32 %84, %85
  %add.ptr124 = getelementptr inbounds %struct.huft, %struct.huft* %83, i32 %and123
  store %struct.huft* %add.ptr124, %struct.huft** %t, align 4
  %e125 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr124, i32 0, i32 0
  %86 = load i8, i8* %e125, align 4
  %conv126 = zext i8 %86 to i32
  store i32 %conv126, i32* %e, align 4
  %cmp127 = icmp ugt i32 %conv126, 16
  br i1 %cmp127, label %if.then129, label %if.end174

if.then129:                                       ; preds = %while.end122
  br label %do.body130

do.body130:                                       ; preds = %do.cond162, %if.then129
  %87 = load i32, i32* %e, align 4
  %cmp131 = icmp eq i32 %87, 99
  br i1 %cmp131, label %if.then133, label %if.end134

if.then133:                                       ; preds = %do.body130
  store i32 1, i32* %retval, align 4
  br label %return

if.end134:                                        ; preds = %do.body130
  %88 = load %struct.huft*, %struct.huft** %t, align 4
  %b135 = getelementptr inbounds %struct.huft, %struct.huft* %88, i32 0, i32 1
  %89 = load i8, i8* %b135, align 1
  %conv136 = zext i8 %89 to i32
  %90 = load i32, i32* %b, align 4
  %shr137 = lshr i32 %90, %conv136
  store i32 %shr137, i32* %b, align 4
  %91 = load %struct.huft*, %struct.huft** %t, align 4
  %b138 = getelementptr inbounds %struct.huft, %struct.huft* %91, i32 0, i32 1
  %92 = load i8, i8* %b138, align 1
  %conv139 = zext i8 %92 to i32
  %93 = load i32, i32* %k, align 4
  %sub140 = sub i32 %93, %conv139
  store i32 %sub140, i32* %k, align 4
  %94 = load i32, i32* %e, align 4
  %sub141 = sub i32 %94, 16
  store i32 %sub141, i32* %e, align 4
  br label %while.cond142

while.cond142:                                    ; preds = %cond.end154, %if.end134
  %95 = load i32, i32* %k, align 4
  %96 = load i32, i32* %e, align 4
  %cmp143 = icmp ult i32 %95, %96
  br i1 %cmp143, label %while.body145, label %while.end161

while.body145:                                    ; preds = %while.cond142
  %97 = load i32, i32* @inptr, align 4
  %98 = load i32, i32* @insize, align 4
  %cmp146 = icmp ult i32 %97, %98
  br i1 %cmp146, label %cond.true148, label %cond.false152

cond.true148:                                     ; preds = %while.body145
  %99 = load i32, i32* @inptr, align 4
  %inc149 = add i32 %99, 1
  store i32 %inc149, i32* @inptr, align 4
  %arrayidx150 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %99
  %100 = load i8, i8* %arrayidx150, align 1
  %conv151 = zext i8 %100 to i32
  br label %cond.end154

cond.false152:                                    ; preds = %while.body145
  %call153 = call i32 @fill_inbuf(i32 0)
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false152, %cond.true148
  %cond155 = phi i32 [ %conv151, %cond.true148 ], [ %call153, %cond.false152 ]
  %conv156 = trunc i32 %cond155 to i8
  %conv157 = zext i8 %conv156 to i32
  %101 = load i32, i32* %k, align 4
  %shl158 = shl i32 %conv157, %101
  %102 = load i32, i32* %b, align 4
  %or159 = or i32 %102, %shl158
  store i32 %or159, i32* %b, align 4
  %103 = load i32, i32* %k, align 4
  %add160 = add i32 %103, 8
  store i32 %add160, i32* %k, align 4
  br label %while.cond142

while.end161:                                     ; preds = %while.cond142
  br label %do.cond162

do.cond162:                                       ; preds = %while.end161
  %104 = load %struct.huft*, %struct.huft** %t, align 4
  %v163 = getelementptr inbounds %struct.huft, %struct.huft* %104, i32 0, i32 2
  %t164 = bitcast %union.anon* %v163 to %struct.huft**
  %105 = load %struct.huft*, %struct.huft** %t164, align 4
  %106 = load i32, i32* %b, align 4
  %107 = load i32, i32* %e, align 4
  %arrayidx165 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i32 0, i32 %107
  %108 = load i16, i16* %arrayidx165, align 2
  %conv166 = zext i16 %108 to i32
  %and167 = and i32 %106, %conv166
  %add.ptr168 = getelementptr inbounds %struct.huft, %struct.huft* %105, i32 %and167
  store %struct.huft* %add.ptr168, %struct.huft** %t, align 4
  %e169 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr168, i32 0, i32 0
  %109 = load i8, i8* %e169, align 4
  %conv170 = zext i8 %109 to i32
  store i32 %conv170, i32* %e, align 4
  %cmp171 = icmp ugt i32 %conv170, 16
  br i1 %cmp171, label %do.body130, label %do.end173

do.end173:                                        ; preds = %do.cond162
  br label %if.end174

if.end174:                                        ; preds = %do.end173, %while.end122
  %110 = load %struct.huft*, %struct.huft** %t, align 4
  %b175 = getelementptr inbounds %struct.huft, %struct.huft* %110, i32 0, i32 1
  %111 = load i8, i8* %b175, align 1
  %conv176 = zext i8 %111 to i32
  %112 = load i32, i32* %b, align 4
  %shr177 = lshr i32 %112, %conv176
  store i32 %shr177, i32* %b, align 4
  %113 = load %struct.huft*, %struct.huft** %t, align 4
  %b178 = getelementptr inbounds %struct.huft, %struct.huft* %113, i32 0, i32 1
  %114 = load i8, i8* %b178, align 1
  %conv179 = zext i8 %114 to i32
  %115 = load i32, i32* %k, align 4
  %sub180 = sub i32 %115, %conv179
  store i32 %sub180, i32* %k, align 4
  br label %while.cond181

while.cond181:                                    ; preds = %cond.end193, %if.end174
  %116 = load i32, i32* %k, align 4
  %117 = load i32, i32* %e, align 4
  %cmp182 = icmp ult i32 %116, %117
  br i1 %cmp182, label %while.body184, label %while.end200

while.body184:                                    ; preds = %while.cond181
  %118 = load i32, i32* @inptr, align 4
  %119 = load i32, i32* @insize, align 4
  %cmp185 = icmp ult i32 %118, %119
  br i1 %cmp185, label %cond.true187, label %cond.false191

cond.true187:                                     ; preds = %while.body184
  %120 = load i32, i32* @inptr, align 4
  %inc188 = add i32 %120, 1
  store i32 %inc188, i32* @inptr, align 4
  %arrayidx189 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %120
  %121 = load i8, i8* %arrayidx189, align 1
  %conv190 = zext i8 %121 to i32
  br label %cond.end193

cond.false191:                                    ; preds = %while.body184
  %call192 = call i32 @fill_inbuf(i32 0)
  br label %cond.end193

cond.end193:                                      ; preds = %cond.false191, %cond.true187
  %cond194 = phi i32 [ %conv190, %cond.true187 ], [ %call192, %cond.false191 ]
  %conv195 = trunc i32 %cond194 to i8
  %conv196 = zext i8 %conv195 to i32
  %122 = load i32, i32* %k, align 4
  %shl197 = shl i32 %conv196, %122
  %123 = load i32, i32* %b, align 4
  %or198 = or i32 %123, %shl197
  store i32 %or198, i32* %b, align 4
  %124 = load i32, i32* %k, align 4
  %add199 = add i32 %124, 8
  store i32 %add199, i32* %k, align 4
  br label %while.cond181

while.end200:                                     ; preds = %while.cond181
  %125 = load i32, i32* %w, align 4
  %126 = load %struct.huft*, %struct.huft** %t, align 4
  %v201 = getelementptr inbounds %struct.huft, %struct.huft* %126, i32 0, i32 2
  %n202 = bitcast %union.anon* %v201 to i16*
  %127 = load i16, i16* %n202, align 4
  %conv203 = zext i16 %127 to i32
  %sub204 = sub i32 %125, %conv203
  %128 = load i32, i32* %b, align 4
  %129 = load i32, i32* %e, align 4
  %arrayidx205 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i32 0, i32 %129
  %130 = load i16, i16* %arrayidx205, align 2
  %conv206 = zext i16 %130 to i32
  %and207 = and i32 %128, %conv206
  %sub208 = sub i32 %sub204, %and207
  store i32 %sub208, i32* %d, align 4
  %131 = load i32, i32* %e, align 4
  %132 = load i32, i32* %b, align 4
  %shr209 = lshr i32 %132, %131
  store i32 %shr209, i32* %b, align 4
  %133 = load i32, i32* %e, align 4
  %134 = load i32, i32* %k, align 4
  %sub210 = sub i32 %134, %133
  store i32 %sub210, i32* %k, align 4
  br label %do.body211

do.body211:                                       ; preds = %do.cond248, %while.end200
  %135 = load i32, i32* %d, align 4
  %and212 = and i32 %135, 32767
  store i32 %and212, i32* %d, align 4
  %136 = load i32, i32* %w, align 4
  %cmp213 = icmp ugt i32 %and212, %136
  br i1 %cmp213, label %cond.true215, label %cond.false216

cond.true215:                                     ; preds = %do.body211
  %137 = load i32, i32* %d, align 4
  br label %cond.end217

cond.false216:                                    ; preds = %do.body211
  %138 = load i32, i32* %w, align 4
  br label %cond.end217

cond.end217:                                      ; preds = %cond.false216, %cond.true215
  %cond218 = phi i32 [ %137, %cond.true215 ], [ %138, %cond.false216 ]
  %sub219 = sub i32 32768, %cond218
  store i32 %sub219, i32* %e, align 4
  %139 = load i32, i32* %n, align 4
  %cmp220 = icmp ugt i32 %sub219, %139
  br i1 %cmp220, label %cond.true222, label %cond.false223

cond.true222:                                     ; preds = %cond.end217
  %140 = load i32, i32* %n, align 4
  br label %cond.end224

cond.false223:                                    ; preds = %cond.end217
  %141 = load i32, i32* %e, align 4
  br label %cond.end224

cond.end224:                                      ; preds = %cond.false223, %cond.true222
  %cond225 = phi i32 [ %140, %cond.true222 ], [ %141, %cond.false223 ]
  store i32 %cond225, i32* %e, align 4
  %142 = load i32, i32* %n, align 4
  %sub226 = sub i32 %142, %cond225
  store i32 %sub226, i32* %n, align 4
  %143 = load i32, i32* %w, align 4
  %144 = load i32, i32* %d, align 4
  %sub227 = sub i32 %143, %144
  %145 = load i32, i32* %e, align 4
  %cmp228 = icmp uge i32 %sub227, %145
  br i1 %cmp228, label %if.then230, label %if.else235

if.then230:                                       ; preds = %cond.end224
  %146 = load i32, i32* %w, align 4
  %add.ptr231 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %146
  %147 = load i32, i32* %d, align 4
  %add.ptr232 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %147
  %148 = load i32, i32* %e, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %add.ptr231, i8* %add.ptr232, i32 %148, i32 1, i1 false)
  %149 = load i32, i32* %e, align 4
  %150 = load i32, i32* %w, align 4
  %add233 = add i32 %150, %149
  store i32 %add233, i32* %w, align 4
  %151 = load i32, i32* %e, align 4
  %152 = load i32, i32* %d, align 4
  %add234 = add i32 %152, %151
  store i32 %add234, i32* %d, align 4
  br label %if.end243

if.else235:                                       ; preds = %cond.end224
  br label %do.body236

do.body236:                                       ; preds = %do.cond241, %if.else235
  %153 = load i32, i32* %d, align 4
  %inc237 = add i32 %153, 1
  store i32 %inc237, i32* %d, align 4
  %arrayidx238 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %153
  %154 = load i8, i8* %arrayidx238, align 1
  %155 = load i32, i32* %w, align 4
  %inc239 = add i32 %155, 1
  store i32 %inc239, i32* %w, align 4
  %arrayidx240 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %155
  store i8 %154, i8* %arrayidx240, align 1
  br label %do.cond241

do.cond241:                                       ; preds = %do.body236
  %156 = load i32, i32* %e, align 4
  %dec = add i32 %156, -1
  store i32 %dec, i32* %e, align 4
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %do.body236, label %do.end242

do.end242:                                        ; preds = %do.cond241
  br label %if.end243

if.end243:                                        ; preds = %do.end242, %if.then230
  %157 = load i32, i32* %w, align 4
  %cmp244 = icmp eq i32 %157, 32768
  br i1 %cmp244, label %if.then246, label %if.end247

if.then246:                                       ; preds = %if.end243
  %158 = load i32, i32* %w, align 4
  store i32 %158, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %w, align 4
  br label %if.end247

if.end247:                                        ; preds = %if.then246, %if.end243
  br label %do.cond248

do.cond248:                                       ; preds = %if.end247
  %159 = load i32, i32* %n, align 4
  %tobool249 = icmp ne i32 %159, 0
  br i1 %tobool249, label %do.body211, label %do.end250

do.end250:                                        ; preds = %do.cond248
  br label %if.end251

if.end251:                                        ; preds = %do.end250, %if.end69
  br label %for.cond

for.end:                                          ; preds = %if.then72
  %160 = load i32, i32* %w, align 4
  store i32 %160, i32* @outcnt, align 4
  %161 = load i32, i32* %b, align 4
  store i32 %161, i32* @bb, align 4
  %162 = load i32, i32* %k, align 4
  store i32 %162, i32* @bk, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then133, %if.then16
  %163 = load i32, i32* %retval, align 4
  ret i32 %163
}

; Function Attrs: noinline nounwind
define i32 @inflate_stored() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %w = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  %0 = load i32, i32* @bb, align 4
  store i32 %0, i32* %b, align 4
  %1 = load i32, i32* @bk, align 4
  store i32 %1, i32* %k, align 4
  %2 = load i32, i32* @outcnt, align 4
  store i32 %2, i32* %w, align 4
  %3 = load i32, i32* %k, align 4
  %and = and i32 %3, 7
  store i32 %and, i32* %n, align 4
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %b, align 4
  %shr = lshr i32 %5, %4
  store i32 %shr, i32* %b, align 4
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %k, align 4
  %sub = sub i32 %7, %6
  store i32 %sub, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %8 = load i32, i32* %k, align 4
  %cmp = icmp ult i32 %8, 16
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i32, i32* @inptr, align 4
  %10 = load i32, i32* @insize, align 4
  %cmp1 = icmp ult i32 %9, %10
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %11 = load i32, i32* @inptr, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %11
  %12 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %12 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ]
  %conv2 = trunc i32 %cond to i8
  %conv3 = zext i8 %conv2 to i32
  %13 = load i32, i32* %k, align 4
  %shl = shl i32 %conv3, %13
  %14 = load i32, i32* %b, align 4
  %or = or i32 %14, %shl
  store i32 %or, i32* %b, align 4
  %15 = load i32, i32* %k, align 4
  %add = add i32 %15, 8
  store i32 %add, i32* %k, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load i32, i32* %b, align 4
  %and4 = and i32 %16, 65535
  store i32 %and4, i32* %n, align 4
  %17 = load i32, i32* %b, align 4
  %shr5 = lshr i32 %17, 16
  store i32 %shr5, i32* %b, align 4
  %18 = load i32, i32* %k, align 4
  %sub6 = sub i32 %18, 16
  store i32 %sub6, i32* %k, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %cond.end19, %while.end
  %19 = load i32, i32* %k, align 4
  %cmp8 = icmp ult i32 %19, 16
  br i1 %cmp8, label %while.body10, label %while.end26

while.body10:                                     ; preds = %while.cond7
  %20 = load i32, i32* @inptr, align 4
  %21 = load i32, i32* @insize, align 4
  %cmp11 = icmp ult i32 %20, %21
  br i1 %cmp11, label %cond.true13, label %cond.false17

cond.true13:                                      ; preds = %while.body10
  %22 = load i32, i32* @inptr, align 4
  %inc14 = add i32 %22, 1
  store i32 %inc14, i32* @inptr, align 4
  %arrayidx15 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %22
  %23 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %23 to i32
  br label %cond.end19

cond.false17:                                     ; preds = %while.body10
  %call18 = call i32 @fill_inbuf(i32 0)
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false17, %cond.true13
  %cond20 = phi i32 [ %conv16, %cond.true13 ], [ %call18, %cond.false17 ]
  %conv21 = trunc i32 %cond20 to i8
  %conv22 = zext i8 %conv21 to i32
  %24 = load i32, i32* %k, align 4
  %shl23 = shl i32 %conv22, %24
  %25 = load i32, i32* %b, align 4
  %or24 = or i32 %25, %shl23
  store i32 %or24, i32* %b, align 4
  %26 = load i32, i32* %k, align 4
  %add25 = add i32 %26, 8
  store i32 %add25, i32* %k, align 4
  br label %while.cond7

while.end26:                                      ; preds = %while.cond7
  %27 = load i32, i32* %n, align 4
  %28 = load i32, i32* %b, align 4
  %neg = xor i32 %28, -1
  %and27 = and i32 %neg, 65535
  %cmp28 = icmp ne i32 %27, %and27
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %while.end26
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end26
  %29 = load i32, i32* %b, align 4
  %shr30 = lshr i32 %29, 16
  store i32 %shr30, i32* %b, align 4
  %30 = load i32, i32* %k, align 4
  %sub31 = sub i32 %30, 16
  store i32 %sub31, i32* %k, align 4
  br label %while.cond32

while.cond32:                                     ; preds = %if.end60, %if.end
  %31 = load i32, i32* %n, align 4
  %dec = add i32 %31, -1
  store i32 %dec, i32* %n, align 4
  %tobool = icmp ne i32 %31, 0
  br i1 %tobool, label %while.body33, label %while.end63

while.body33:                                     ; preds = %while.cond32
  br label %while.cond34

while.cond34:                                     ; preds = %cond.end46, %while.body33
  %32 = load i32, i32* %k, align 4
  %cmp35 = icmp ult i32 %32, 8
  br i1 %cmp35, label %while.body37, label %while.end53

while.body37:                                     ; preds = %while.cond34
  %33 = load i32, i32* @inptr, align 4
  %34 = load i32, i32* @insize, align 4
  %cmp38 = icmp ult i32 %33, %34
  br i1 %cmp38, label %cond.true40, label %cond.false44

cond.true40:                                      ; preds = %while.body37
  %35 = load i32, i32* @inptr, align 4
  %inc41 = add i32 %35, 1
  store i32 %inc41, i32* @inptr, align 4
  %arrayidx42 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %35
  %36 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %36 to i32
  br label %cond.end46

cond.false44:                                     ; preds = %while.body37
  %call45 = call i32 @fill_inbuf(i32 0)
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false44, %cond.true40
  %cond47 = phi i32 [ %conv43, %cond.true40 ], [ %call45, %cond.false44 ]
  %conv48 = trunc i32 %cond47 to i8
  %conv49 = zext i8 %conv48 to i32
  %37 = load i32, i32* %k, align 4
  %shl50 = shl i32 %conv49, %37
  %38 = load i32, i32* %b, align 4
  %or51 = or i32 %38, %shl50
  store i32 %or51, i32* %b, align 4
  %39 = load i32, i32* %k, align 4
  %add52 = add i32 %39, 8
  store i32 %add52, i32* %k, align 4
  br label %while.cond34

while.end53:                                      ; preds = %while.cond34
  %40 = load i32, i32* %b, align 4
  %conv54 = trunc i32 %40 to i8
  %41 = load i32, i32* %w, align 4
  %inc55 = add i32 %41, 1
  store i32 %inc55, i32* %w, align 4
  %arrayidx56 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %41
  store i8 %conv54, i8* %arrayidx56, align 1
  %42 = load i32, i32* %w, align 4
  %cmp57 = icmp eq i32 %42, 32768
  br i1 %cmp57, label %if.then59, label %if.end60

if.then59:                                        ; preds = %while.end53
  %43 = load i32, i32* %w, align 4
  store i32 %43, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %w, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.then59, %while.end53
  %44 = load i32, i32* %b, align 4
  %shr61 = lshr i32 %44, 8
  store i32 %shr61, i32* %b, align 4
  %45 = load i32, i32* %k, align 4
  %sub62 = sub i32 %45, 8
  store i32 %sub62, i32* %k, align 4
  br label %while.cond32

while.end63:                                      ; preds = %while.cond32
  %46 = load i32, i32* %w, align 4
  store i32 %46, i32* @outcnt, align 4
  %47 = load i32, i32* %b, align 4
  store i32 %47, i32* @bb, align 4
  %48 = load i32, i32* %k, align 4
  store i32 %48, i32* @bk, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end63, %if.then
  %49 = load i32, i32* %retval, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind
define i32 @inflate_fixed() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %tl = alloca %struct.huft*, align 4
  %td = alloca %struct.huft*, align 4
  %bl = alloca i32, align 4
  %bd = alloca i32, align 4
  %l = alloca [288 x i32], align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 144
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [288 x i32], [288 x i32]* %l, i32 0, i32 %1
  store i32 8, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc5, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 256
  br i1 %cmp2, label %for.body3, label %for.end7

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i32 0, i32 %4
  store i32 9, i32* %arrayidx4, align 4
  br label %for.inc5

for.inc5:                                         ; preds = %for.body3
  %5 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %5, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond1

for.end7:                                         ; preds = %for.cond1
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %6 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %6, 280
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %7 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i32 0, i32 %7
  store i32 7, i32* %arrayidx11, align 4
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %8 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %8, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc19, %for.end14
  %9 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %9, 288
  br i1 %cmp16, label %for.body17, label %for.end21

for.body17:                                       ; preds = %for.cond15
  %10 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i32 0, i32 %10
  store i32 8, i32* %arrayidx18, align 4
  br label %for.inc19

for.inc19:                                        ; preds = %for.body17
  %11 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %11, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond15

for.end21:                                        ; preds = %for.cond15
  store i32 7, i32* %bl, align 4
  %arraydecay = getelementptr inbounds [288 x i32], [288 x i32]* %l, i32 0, i32 0
  %call = call i32 @huft_build(i32* %arraydecay, i32 288, i32 257, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplens, i32 0, i32 0), i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplext, i32 0, i32 0), %struct.huft** %tl, i32* %bl)
  store i32 %call, i32* %i, align 4
  %cmp22 = icmp ne i32 %call, 0
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %for.end21
  %12 = load i32, i32* %i, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.end21
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc27, %if.end
  %13 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %13, 30
  br i1 %cmp24, label %for.body25, label %for.end29

for.body25:                                       ; preds = %for.cond23
  %14 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i32 0, i32 %14
  store i32 5, i32* %arrayidx26, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %for.body25
  %15 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %15, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond23

for.end29:                                        ; preds = %for.cond23
  store i32 5, i32* %bd, align 4
  %arraydecay30 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i32 0, i32 0
  %call31 = call i32 @huft_build(i32* %arraydecay30, i32 30, i32 0, i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdist, i32 0, i32 0), i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdext, i32 0, i32 0), %struct.huft** %td, i32* %bd)
  store i32 %call31, i32* %i, align 4
  %cmp32 = icmp sgt i32 %call31, 1
  br i1 %cmp32, label %if.then33, label %if.end35

if.then33:                                        ; preds = %for.end29
  %16 = load %struct.huft*, %struct.huft** %tl, align 4
  %call34 = call i32 @huft_free(%struct.huft* %16)
  %17 = load i32, i32* %i, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %for.end29
  %18 = load i32, i32* %bd, align 4
  %19 = load i32, i32* %bl, align 4
  %20 = load %struct.huft*, %struct.huft** %td, align 4
  %21 = load %struct.huft*, %struct.huft** %tl, align 4
  %call36 = call i32 @inflate_codes(%struct.huft* %21, %struct.huft* %20, i32 %19, i32 %18)
  %tobool = icmp ne i32 %call36, 0
  br i1 %tobool, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end35
  store i32 1, i32* %retval, align 4
  br label %return

if.end38:                                         ; preds = %if.end35
  %22 = load %struct.huft*, %struct.huft** %tl, align 4
  %call39 = call i32 @huft_free(%struct.huft* %22)
  %23 = load %struct.huft*, %struct.huft** %td, align 4
  %call40 = call i32 @huft_free(%struct.huft* %23)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end38, %if.then37, %if.then33, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind
define i32 @inflate_dynamic() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %tl = alloca %struct.huft*, align 4
  %td = alloca %struct.huft*, align 4
  %bl = alloca i32, align 4
  %bd = alloca i32, align 4
  %nb = alloca i32, align 4
  %nl = alloca i32, align 4
  %nd = alloca i32, align 4
  %ll = alloca [316 x i32], align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  %0 = load i32, i32* @bb, align 4
  store i32 %0, i32* %b, align 4
  %1 = load i32, i32* @bk, align 4
  store i32 %1, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %2 = load i32, i32* %k, align 4
  %cmp = icmp ult i32 %2, 5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* @inptr, align 4
  %4 = load i32, i32* @insize, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %5 = load i32, i32* @inptr, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ]
  %conv2 = trunc i32 %cond to i8
  %conv3 = zext i8 %conv2 to i32
  %7 = load i32, i32* %k, align 4
  %shl = shl i32 %conv3, %7
  %8 = load i32, i32* %b, align 4
  %or = or i32 %8, %shl
  store i32 %or, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add i32 %9, 8
  store i32 %add, i32* %k, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %b, align 4
  %and = and i32 %10, 31
  %add4 = add i32 257, %and
  store i32 %add4, i32* %nl, align 4
  %11 = load i32, i32* %b, align 4
  %shr = lshr i32 %11, 5
  store i32 %shr, i32* %b, align 4
  %12 = load i32, i32* %k, align 4
  %sub = sub i32 %12, 5
  store i32 %sub, i32* %k, align 4
  br label %while.cond5

while.cond5:                                      ; preds = %cond.end17, %while.end
  %13 = load i32, i32* %k, align 4
  %cmp6 = icmp ult i32 %13, 5
  br i1 %cmp6, label %while.body8, label %while.end24

while.body8:                                      ; preds = %while.cond5
  %14 = load i32, i32* @inptr, align 4
  %15 = load i32, i32* @insize, align 4
  %cmp9 = icmp ult i32 %14, %15
  br i1 %cmp9, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %while.body8
  %16 = load i32, i32* @inptr, align 4
  %inc12 = add i32 %16, 1
  store i32 %inc12, i32* @inptr, align 4
  %arrayidx13 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %16
  %17 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %17 to i32
  br label %cond.end17

cond.false15:                                     ; preds = %while.body8
  %call16 = call i32 @fill_inbuf(i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i32 [ %conv14, %cond.true11 ], [ %call16, %cond.false15 ]
  %conv19 = trunc i32 %cond18 to i8
  %conv20 = zext i8 %conv19 to i32
  %18 = load i32, i32* %k, align 4
  %shl21 = shl i32 %conv20, %18
  %19 = load i32, i32* %b, align 4
  %or22 = or i32 %19, %shl21
  store i32 %or22, i32* %b, align 4
  %20 = load i32, i32* %k, align 4
  %add23 = add i32 %20, 8
  store i32 %add23, i32* %k, align 4
  br label %while.cond5

while.end24:                                      ; preds = %while.cond5
  %21 = load i32, i32* %b, align 4
  %and25 = and i32 %21, 31
  %add26 = add i32 1, %and25
  store i32 %add26, i32* %nd, align 4
  %22 = load i32, i32* %b, align 4
  %shr27 = lshr i32 %22, 5
  store i32 %shr27, i32* %b, align 4
  %23 = load i32, i32* %k, align 4
  %sub28 = sub i32 %23, 5
  store i32 %sub28, i32* %k, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %cond.end41, %while.end24
  %24 = load i32, i32* %k, align 4
  %cmp30 = icmp ult i32 %24, 4
  br i1 %cmp30, label %while.body32, label %while.end48

while.body32:                                     ; preds = %while.cond29
  %25 = load i32, i32* @inptr, align 4
  %26 = load i32, i32* @insize, align 4
  %cmp33 = icmp ult i32 %25, %26
  br i1 %cmp33, label %cond.true35, label %cond.false39

cond.true35:                                      ; preds = %while.body32
  %27 = load i32, i32* @inptr, align 4
  %inc36 = add i32 %27, 1
  store i32 %inc36, i32* @inptr, align 4
  %arrayidx37 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %27
  %28 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %28 to i32
  br label %cond.end41

cond.false39:                                     ; preds = %while.body32
  %call40 = call i32 @fill_inbuf(i32 0)
  br label %cond.end41

cond.end41:                                       ; preds = %cond.false39, %cond.true35
  %cond42 = phi i32 [ %conv38, %cond.true35 ], [ %call40, %cond.false39 ]
  %conv43 = trunc i32 %cond42 to i8
  %conv44 = zext i8 %conv43 to i32
  %29 = load i32, i32* %k, align 4
  %shl45 = shl i32 %conv44, %29
  %30 = load i32, i32* %b, align 4
  %or46 = or i32 %30, %shl45
  store i32 %or46, i32* %b, align 4
  %31 = load i32, i32* %k, align 4
  %add47 = add i32 %31, 8
  store i32 %add47, i32* %k, align 4
  br label %while.cond29

while.end48:                                      ; preds = %while.cond29
  %32 = load i32, i32* %b, align 4
  %and49 = and i32 %32, 15
  %add50 = add i32 4, %and49
  store i32 %add50, i32* %nb, align 4
  %33 = load i32, i32* %b, align 4
  %shr51 = lshr i32 %33, 4
  store i32 %shr51, i32* %b, align 4
  %34 = load i32, i32* %k, align 4
  %sub52 = sub i32 %34, 4
  store i32 %sub52, i32* %k, align 4
  %35 = load i32, i32* %nl, align 4
  %cmp53 = icmp ugt i32 %35, 286
  br i1 %cmp53, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end48
  %36 = load i32, i32* %nd, align 4
  %cmp55 = icmp ugt i32 %36, 30
  br i1 %cmp55, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.end48
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %37 = load i32, i32* %j, align 4
  %38 = load i32, i32* %nb, align 4
  %cmp57 = icmp ult i32 %37, %38
  br i1 %cmp57, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond59

while.cond59:                                     ; preds = %cond.end71, %for.body
  %39 = load i32, i32* %k, align 4
  %cmp60 = icmp ult i32 %39, 3
  br i1 %cmp60, label %while.body62, label %while.end78

while.body62:                                     ; preds = %while.cond59
  %40 = load i32, i32* @inptr, align 4
  %41 = load i32, i32* @insize, align 4
  %cmp63 = icmp ult i32 %40, %41
  br i1 %cmp63, label %cond.true65, label %cond.false69

cond.true65:                                      ; preds = %while.body62
  %42 = load i32, i32* @inptr, align 4
  %inc66 = add i32 %42, 1
  store i32 %inc66, i32* @inptr, align 4
  %arrayidx67 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  br label %cond.end71

cond.false69:                                     ; preds = %while.body62
  %call70 = call i32 @fill_inbuf(i32 0)
  br label %cond.end71

cond.end71:                                       ; preds = %cond.false69, %cond.true65
  %cond72 = phi i32 [ %conv68, %cond.true65 ], [ %call70, %cond.false69 ]
  %conv73 = trunc i32 %cond72 to i8
  %conv74 = zext i8 %conv73 to i32
  %44 = load i32, i32* %k, align 4
  %shl75 = shl i32 %conv74, %44
  %45 = load i32, i32* %b, align 4
  %or76 = or i32 %45, %shl75
  store i32 %or76, i32* %b, align 4
  %46 = load i32, i32* %k, align 4
  %add77 = add i32 %46, 8
  store i32 %add77, i32* %k, align 4
  br label %while.cond59

while.end78:                                      ; preds = %while.cond59
  %47 = load i32, i32* %b, align 4
  %and79 = and i32 %47, 7
  %48 = load i32, i32* %j, align 4
  %arrayidx80 = getelementptr inbounds [19 x i32], [19 x i32]* @border, i32 0, i32 %48
  %49 = load i32, i32* %arrayidx80, align 4
  %arrayidx81 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 %49
  store i32 %and79, i32* %arrayidx81, align 4
  %50 = load i32, i32* %b, align 4
  %shr82 = lshr i32 %50, 3
  store i32 %shr82, i32* %b, align 4
  %51 = load i32, i32* %k, align 4
  %sub83 = sub i32 %51, 3
  store i32 %sub83, i32* %k, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end78
  %52 = load i32, i32* %j, align 4
  %inc84 = add i32 %52, 1
  store i32 %inc84, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond85

for.cond85:                                       ; preds = %for.inc91, %for.end
  %53 = load i32, i32* %j, align 4
  %cmp86 = icmp ult i32 %53, 19
  br i1 %cmp86, label %for.body88, label %for.end93

for.body88:                                       ; preds = %for.cond85
  %54 = load i32, i32* %j, align 4
  %arrayidx89 = getelementptr inbounds [19 x i32], [19 x i32]* @border, i32 0, i32 %54
  %55 = load i32, i32* %arrayidx89, align 4
  %arrayidx90 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 %55
  store i32 0, i32* %arrayidx90, align 4
  br label %for.inc91

for.inc91:                                        ; preds = %for.body88
  %56 = load i32, i32* %j, align 4
  %inc92 = add i32 %56, 1
  store i32 %inc92, i32* %j, align 4
  br label %for.cond85

for.end93:                                        ; preds = %for.cond85
  store i32 7, i32* %bl, align 4
  %arraydecay = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 0
  %call94 = call i32 @huft_build(i32* %arraydecay, i32 19, i32 19, i16* null, i16* null, %struct.huft** %tl, i32* %bl)
  store i32 %call94, i32* %i, align 4
  %cmp95 = icmp ne i32 %call94, 0
  br i1 %cmp95, label %if.then97, label %if.end103

if.then97:                                        ; preds = %for.end93
  %57 = load i32, i32* %i, align 4
  %cmp98 = icmp eq i32 %57, 1
  br i1 %cmp98, label %if.then100, label %if.end102

if.then100:                                       ; preds = %if.then97
  %58 = load %struct.huft*, %struct.huft** %tl, align 4
  %call101 = call i32 @huft_free(%struct.huft* %58)
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %if.then97
  %59 = load i32, i32* %i, align 4
  store i32 %59, i32* %retval, align 4
  br label %return

if.end103:                                        ; preds = %for.end93
  %60 = load i32, i32* %nl, align 4
  %61 = load i32, i32* %nd, align 4
  %add104 = add i32 %60, %61
  store i32 %add104, i32* %n, align 4
  %62 = load i32, i32* %bl, align 4
  %arrayidx105 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i32 0, i32 %62
  %63 = load i16, i16* %arrayidx105, align 2
  %conv106 = zext i16 %63 to i32
  store i32 %conv106, i32* %m, align 4
  store i32 0, i32* %l, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond107

while.cond107:                                    ; preds = %if.end259, %if.end103
  %64 = load i32, i32* %i, align 4
  %65 = load i32, i32* %n, align 4
  %cmp108 = icmp ult i32 %64, %65
  br i1 %cmp108, label %while.body110, label %while.end260

while.body110:                                    ; preds = %while.cond107
  br label %while.cond111

while.cond111:                                    ; preds = %cond.end123, %while.body110
  %66 = load i32, i32* %k, align 4
  %67 = load i32, i32* %bl, align 4
  %cmp112 = icmp ult i32 %66, %67
  br i1 %cmp112, label %while.body114, label %while.end130

while.body114:                                    ; preds = %while.cond111
  %68 = load i32, i32* @inptr, align 4
  %69 = load i32, i32* @insize, align 4
  %cmp115 = icmp ult i32 %68, %69
  br i1 %cmp115, label %cond.true117, label %cond.false121

cond.true117:                                     ; preds = %while.body114
  %70 = load i32, i32* @inptr, align 4
  %inc118 = add i32 %70, 1
  store i32 %inc118, i32* @inptr, align 4
  %arrayidx119 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %70
  %71 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %71 to i32
  br label %cond.end123

cond.false121:                                    ; preds = %while.body114
  %call122 = call i32 @fill_inbuf(i32 0)
  br label %cond.end123

cond.end123:                                      ; preds = %cond.false121, %cond.true117
  %cond124 = phi i32 [ %conv120, %cond.true117 ], [ %call122, %cond.false121 ]
  %conv125 = trunc i32 %cond124 to i8
  %conv126 = zext i8 %conv125 to i32
  %72 = load i32, i32* %k, align 4
  %shl127 = shl i32 %conv126, %72
  %73 = load i32, i32* %b, align 4
  %or128 = or i32 %73, %shl127
  store i32 %or128, i32* %b, align 4
  %74 = load i32, i32* %k, align 4
  %add129 = add i32 %74, 8
  store i32 %add129, i32* %k, align 4
  br label %while.cond111

while.end130:                                     ; preds = %while.cond111
  %75 = load %struct.huft*, %struct.huft** %tl, align 4
  %76 = load i32, i32* %b, align 4
  %77 = load i32, i32* %m, align 4
  %and131 = and i32 %76, %77
  %add.ptr = getelementptr inbounds %struct.huft, %struct.huft* %75, i32 %and131
  store %struct.huft* %add.ptr, %struct.huft** %td, align 4
  %b132 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr, i32 0, i32 1
  %78 = load i8, i8* %b132, align 1
  %conv133 = zext i8 %78 to i32
  store i32 %conv133, i32* %j, align 4
  %79 = load i32, i32* %j, align 4
  %80 = load i32, i32* %b, align 4
  %shr134 = lshr i32 %80, %79
  store i32 %shr134, i32* %b, align 4
  %81 = load i32, i32* %j, align 4
  %82 = load i32, i32* %k, align 4
  %sub135 = sub i32 %82, %81
  store i32 %sub135, i32* %k, align 4
  %83 = load %struct.huft*, %struct.huft** %td, align 4
  %v = getelementptr inbounds %struct.huft, %struct.huft* %83, i32 0, i32 2
  %n136 = bitcast %union.anon* %v to i16*
  %84 = load i16, i16* %n136, align 4
  %conv137 = zext i16 %84 to i32
  store i32 %conv137, i32* %j, align 4
  %85 = load i32, i32* %j, align 4
  %cmp138 = icmp ult i32 %85, 16
  br i1 %cmp138, label %if.then140, label %if.else

if.then140:                                       ; preds = %while.end130
  %86 = load i32, i32* %j, align 4
  store i32 %86, i32* %l, align 4
  %87 = load i32, i32* %i, align 4
  %inc141 = add nsw i32 %87, 1
  store i32 %inc141, i32* %i, align 4
  %arrayidx142 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 %87
  store i32 %86, i32* %arrayidx142, align 4
  br label %if.end259

if.else:                                          ; preds = %while.end130
  %88 = load i32, i32* %j, align 4
  %cmp143 = icmp eq i32 %88, 16
  br i1 %cmp143, label %if.then145, label %if.else180

if.then145:                                       ; preds = %if.else
  br label %while.cond146

while.cond146:                                    ; preds = %cond.end158, %if.then145
  %89 = load i32, i32* %k, align 4
  %cmp147 = icmp ult i32 %89, 2
  br i1 %cmp147, label %while.body149, label %while.end165

while.body149:                                    ; preds = %while.cond146
  %90 = load i32, i32* @inptr, align 4
  %91 = load i32, i32* @insize, align 4
  %cmp150 = icmp ult i32 %90, %91
  br i1 %cmp150, label %cond.true152, label %cond.false156

cond.true152:                                     ; preds = %while.body149
  %92 = load i32, i32* @inptr, align 4
  %inc153 = add i32 %92, 1
  store i32 %inc153, i32* @inptr, align 4
  %arrayidx154 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %92
  %93 = load i8, i8* %arrayidx154, align 1
  %conv155 = zext i8 %93 to i32
  br label %cond.end158

cond.false156:                                    ; preds = %while.body149
  %call157 = call i32 @fill_inbuf(i32 0)
  br label %cond.end158

cond.end158:                                      ; preds = %cond.false156, %cond.true152
  %cond159 = phi i32 [ %conv155, %cond.true152 ], [ %call157, %cond.false156 ]
  %conv160 = trunc i32 %cond159 to i8
  %conv161 = zext i8 %conv160 to i32
  %94 = load i32, i32* %k, align 4
  %shl162 = shl i32 %conv161, %94
  %95 = load i32, i32* %b, align 4
  %or163 = or i32 %95, %shl162
  store i32 %or163, i32* %b, align 4
  %96 = load i32, i32* %k, align 4
  %add164 = add i32 %96, 8
  store i32 %add164, i32* %k, align 4
  br label %while.cond146

while.end165:                                     ; preds = %while.cond146
  %97 = load i32, i32* %b, align 4
  %and166 = and i32 %97, 3
  %add167 = add i32 3, %and166
  store i32 %add167, i32* %j, align 4
  %98 = load i32, i32* %b, align 4
  %shr168 = lshr i32 %98, 2
  store i32 %shr168, i32* %b, align 4
  %99 = load i32, i32* %k, align 4
  %sub169 = sub i32 %99, 2
  store i32 %sub169, i32* %k, align 4
  %100 = load i32, i32* %i, align 4
  %101 = load i32, i32* %j, align 4
  %add170 = add i32 %100, %101
  %102 = load i32, i32* %n, align 4
  %cmp171 = icmp ugt i32 %add170, %102
  br i1 %cmp171, label %if.then173, label %if.end174

if.then173:                                       ; preds = %while.end165
  store i32 1, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %while.end165
  br label %while.cond175

while.cond175:                                    ; preds = %while.body176, %if.end174
  %103 = load i32, i32* %j, align 4
  %dec = add i32 %103, -1
  store i32 %dec, i32* %j, align 4
  %tobool = icmp ne i32 %103, 0
  br i1 %tobool, label %while.body176, label %while.end179

while.body176:                                    ; preds = %while.cond175
  %104 = load i32, i32* %l, align 4
  %105 = load i32, i32* %i, align 4
  %inc177 = add nsw i32 %105, 1
  store i32 %inc177, i32* %i, align 4
  %arrayidx178 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 %105
  store i32 %104, i32* %arrayidx178, align 4
  br label %while.cond175

while.end179:                                     ; preds = %while.cond175
  br label %if.end258

if.else180:                                       ; preds = %if.else
  %106 = load i32, i32* %j, align 4
  %cmp181 = icmp eq i32 %106, 17
  br i1 %cmp181, label %if.then183, label %if.else220

if.then183:                                       ; preds = %if.else180
  br label %while.cond184

while.cond184:                                    ; preds = %cond.end196, %if.then183
  %107 = load i32, i32* %k, align 4
  %cmp185 = icmp ult i32 %107, 3
  br i1 %cmp185, label %while.body187, label %while.end203

while.body187:                                    ; preds = %while.cond184
  %108 = load i32, i32* @inptr, align 4
  %109 = load i32, i32* @insize, align 4
  %cmp188 = icmp ult i32 %108, %109
  br i1 %cmp188, label %cond.true190, label %cond.false194

cond.true190:                                     ; preds = %while.body187
  %110 = load i32, i32* @inptr, align 4
  %inc191 = add i32 %110, 1
  store i32 %inc191, i32* @inptr, align 4
  %arrayidx192 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %110
  %111 = load i8, i8* %arrayidx192, align 1
  %conv193 = zext i8 %111 to i32
  br label %cond.end196

cond.false194:                                    ; preds = %while.body187
  %call195 = call i32 @fill_inbuf(i32 0)
  br label %cond.end196

cond.end196:                                      ; preds = %cond.false194, %cond.true190
  %cond197 = phi i32 [ %conv193, %cond.true190 ], [ %call195, %cond.false194 ]
  %conv198 = trunc i32 %cond197 to i8
  %conv199 = zext i8 %conv198 to i32
  %112 = load i32, i32* %k, align 4
  %shl200 = shl i32 %conv199, %112
  %113 = load i32, i32* %b, align 4
  %or201 = or i32 %113, %shl200
  store i32 %or201, i32* %b, align 4
  %114 = load i32, i32* %k, align 4
  %add202 = add i32 %114, 8
  store i32 %add202, i32* %k, align 4
  br label %while.cond184

while.end203:                                     ; preds = %while.cond184
  %115 = load i32, i32* %b, align 4
  %and204 = and i32 %115, 7
  %add205 = add i32 3, %and204
  store i32 %add205, i32* %j, align 4
  %116 = load i32, i32* %b, align 4
  %shr206 = lshr i32 %116, 3
  store i32 %shr206, i32* %b, align 4
  %117 = load i32, i32* %k, align 4
  %sub207 = sub i32 %117, 3
  store i32 %sub207, i32* %k, align 4
  %118 = load i32, i32* %i, align 4
  %119 = load i32, i32* %j, align 4
  %add208 = add i32 %118, %119
  %120 = load i32, i32* %n, align 4
  %cmp209 = icmp ugt i32 %add208, %120
  br i1 %cmp209, label %if.then211, label %if.end212

if.then211:                                       ; preds = %while.end203
  store i32 1, i32* %retval, align 4
  br label %return

if.end212:                                        ; preds = %while.end203
  br label %while.cond213

while.cond213:                                    ; preds = %while.body216, %if.end212
  %121 = load i32, i32* %j, align 4
  %dec214 = add i32 %121, -1
  store i32 %dec214, i32* %j, align 4
  %tobool215 = icmp ne i32 %121, 0
  br i1 %tobool215, label %while.body216, label %while.end219

while.body216:                                    ; preds = %while.cond213
  %122 = load i32, i32* %i, align 4
  %inc217 = add nsw i32 %122, 1
  store i32 %inc217, i32* %i, align 4
  %arrayidx218 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 %122
  store i32 0, i32* %arrayidx218, align 4
  br label %while.cond213

while.end219:                                     ; preds = %while.cond213
  store i32 0, i32* %l, align 4
  br label %if.end257

if.else220:                                       ; preds = %if.else180
  br label %while.cond221

while.cond221:                                    ; preds = %cond.end233, %if.else220
  %123 = load i32, i32* %k, align 4
  %cmp222 = icmp ult i32 %123, 7
  br i1 %cmp222, label %while.body224, label %while.end240

while.body224:                                    ; preds = %while.cond221
  %124 = load i32, i32* @inptr, align 4
  %125 = load i32, i32* @insize, align 4
  %cmp225 = icmp ult i32 %124, %125
  br i1 %cmp225, label %cond.true227, label %cond.false231

cond.true227:                                     ; preds = %while.body224
  %126 = load i32, i32* @inptr, align 4
  %inc228 = add i32 %126, 1
  store i32 %inc228, i32* @inptr, align 4
  %arrayidx229 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %126
  %127 = load i8, i8* %arrayidx229, align 1
  %conv230 = zext i8 %127 to i32
  br label %cond.end233

cond.false231:                                    ; preds = %while.body224
  %call232 = call i32 @fill_inbuf(i32 0)
  br label %cond.end233

cond.end233:                                      ; preds = %cond.false231, %cond.true227
  %cond234 = phi i32 [ %conv230, %cond.true227 ], [ %call232, %cond.false231 ]
  %conv235 = trunc i32 %cond234 to i8
  %conv236 = zext i8 %conv235 to i32
  %128 = load i32, i32* %k, align 4
  %shl237 = shl i32 %conv236, %128
  %129 = load i32, i32* %b, align 4
  %or238 = or i32 %129, %shl237
  store i32 %or238, i32* %b, align 4
  %130 = load i32, i32* %k, align 4
  %add239 = add i32 %130, 8
  store i32 %add239, i32* %k, align 4
  br label %while.cond221

while.end240:                                     ; preds = %while.cond221
  %131 = load i32, i32* %b, align 4
  %and241 = and i32 %131, 127
  %add242 = add i32 11, %and241
  store i32 %add242, i32* %j, align 4
  %132 = load i32, i32* %b, align 4
  %shr243 = lshr i32 %132, 7
  store i32 %shr243, i32* %b, align 4
  %133 = load i32, i32* %k, align 4
  %sub244 = sub i32 %133, 7
  store i32 %sub244, i32* %k, align 4
  %134 = load i32, i32* %i, align 4
  %135 = load i32, i32* %j, align 4
  %add245 = add i32 %134, %135
  %136 = load i32, i32* %n, align 4
  %cmp246 = icmp ugt i32 %add245, %136
  br i1 %cmp246, label %if.then248, label %if.end249

if.then248:                                       ; preds = %while.end240
  store i32 1, i32* %retval, align 4
  br label %return

if.end249:                                        ; preds = %while.end240
  br label %while.cond250

while.cond250:                                    ; preds = %while.body253, %if.end249
  %137 = load i32, i32* %j, align 4
  %dec251 = add i32 %137, -1
  store i32 %dec251, i32* %j, align 4
  %tobool252 = icmp ne i32 %137, 0
  br i1 %tobool252, label %while.body253, label %while.end256

while.body253:                                    ; preds = %while.cond250
  %138 = load i32, i32* %i, align 4
  %inc254 = add nsw i32 %138, 1
  store i32 %inc254, i32* %i, align 4
  %arrayidx255 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 %138
  store i32 0, i32* %arrayidx255, align 4
  br label %while.cond250

while.end256:                                     ; preds = %while.cond250
  store i32 0, i32* %l, align 4
  br label %if.end257

if.end257:                                        ; preds = %while.end256, %while.end219
  br label %if.end258

if.end258:                                        ; preds = %if.end257, %while.end179
  br label %if.end259

if.end259:                                        ; preds = %if.end258, %if.then140
  br label %while.cond107

while.end260:                                     ; preds = %while.cond107
  %139 = load %struct.huft*, %struct.huft** %tl, align 4
  %call261 = call i32 @huft_free(%struct.huft* %139)
  %140 = load i32, i32* %b, align 4
  store i32 %140, i32* @bb, align 4
  %141 = load i32, i32* %k, align 4
  store i32 %141, i32* @bk, align 4
  %142 = load i32, i32* @lbits, align 4
  store i32 %142, i32* %bl, align 4
  %143 = load i32, i32* %nl, align 4
  %arraydecay262 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 0
  %call263 = call i32 @huft_build(i32* %arraydecay262, i32 %143, i32 257, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplens, i32 0, i32 0), i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplext, i32 0, i32 0), %struct.huft** %tl, i32* %bl)
  store i32 %call263, i32* %i, align 4
  %cmp264 = icmp ne i32 %call263, 0
  br i1 %cmp264, label %if.then266, label %if.end275

if.then266:                                       ; preds = %while.end260
  %144 = load i32, i32* %i, align 4
  %cmp267 = icmp eq i32 %144, 1
  br i1 %cmp267, label %if.then269, label %if.end274

if.then269:                                       ; preds = %if.then266
  %call270 = call %struct._iobuf* @__iob_func()
  %arrayidx271 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call270, i32 2
  %call272 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx271, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.39, i32 0, i32 0))
  %145 = load %struct.huft*, %struct.huft** %tl, align 4
  %call273 = call i32 @huft_free(%struct.huft* %145)
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %if.then266
  %146 = load i32, i32* %i, align 4
  store i32 %146, i32* %retval, align 4
  br label %return

if.end275:                                        ; preds = %while.end260
  %147 = load i32, i32* @dbits, align 4
  store i32 %147, i32* %bd, align 4
  %148 = load i32, i32* %nd, align 4
  %arraydecay276 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i32 0, i32 0
  %149 = load i32, i32* %nl, align 4
  %add.ptr277 = getelementptr inbounds i32, i32* %arraydecay276, i32 %149
  %call278 = call i32 @huft_build(i32* %add.ptr277, i32 %148, i32 0, i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdist, i32 0, i32 0), i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdext, i32 0, i32 0), %struct.huft** %td, i32* %bd)
  store i32 %call278, i32* %i, align 4
  %cmp279 = icmp ne i32 %call278, 0
  br i1 %cmp279, label %if.then281, label %if.end291

if.then281:                                       ; preds = %if.end275
  %150 = load i32, i32* %i, align 4
  %cmp282 = icmp eq i32 %150, 1
  br i1 %cmp282, label %if.then284, label %if.end289

if.then284:                                       ; preds = %if.then281
  %call285 = call %struct._iobuf* @__iob_func()
  %arrayidx286 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call285, i32 2
  %call287 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx286, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.40, i32 0, i32 0))
  %151 = load %struct.huft*, %struct.huft** %td, align 4
  %call288 = call i32 @huft_free(%struct.huft* %151)
  br label %if.end289

if.end289:                                        ; preds = %if.then284, %if.then281
  %152 = load %struct.huft*, %struct.huft** %tl, align 4
  %call290 = call i32 @huft_free(%struct.huft* %152)
  %153 = load i32, i32* %i, align 4
  store i32 %153, i32* %retval, align 4
  br label %return

if.end291:                                        ; preds = %if.end275
  %154 = load i32, i32* %bd, align 4
  %155 = load i32, i32* %bl, align 4
  %156 = load %struct.huft*, %struct.huft** %td, align 4
  %157 = load %struct.huft*, %struct.huft** %tl, align 4
  %call292 = call i32 @inflate_codes(%struct.huft* %157, %struct.huft* %156, i32 %155, i32 %154)
  %tobool293 = icmp ne i32 %call292, 0
  br i1 %tobool293, label %if.then294, label %if.end295

if.then294:                                       ; preds = %if.end291
  store i32 1, i32* %retval, align 4
  br label %return

if.end295:                                        ; preds = %if.end291
  %158 = load %struct.huft*, %struct.huft** %tl, align 4
  %call296 = call i32 @huft_free(%struct.huft* %158)
  %159 = load %struct.huft*, %struct.huft** %td, align 4
  %call297 = call i32 @huft_free(%struct.huft* %159)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end295, %if.then294, %if.end289, %if.end274, %if.then248, %if.then211, %if.then173, %if.end102, %if.then
  %160 = load i32, i32* %retval, align 4
  ret i32 %160
}

; Function Attrs: noinline nounwind
define i32 @inflate_block(i32* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %e.addr = alloca i32*, align 4
  %t = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32* %e, i32** %e.addr, align 4
  %0 = load i32, i32* @bb, align 4
  store i32 %0, i32* %b, align 4
  %1 = load i32, i32* @bk, align 4
  store i32 %1, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %2 = load i32, i32* %k, align 4
  %cmp = icmp ult i32 %2, 1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* @inptr, align 4
  %4 = load i32, i32* @insize, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %5 = load i32, i32* @inptr, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ]
  %conv2 = trunc i32 %cond to i8
  %conv3 = zext i8 %conv2 to i32
  %7 = load i32, i32* %k, align 4
  %shl = shl i32 %conv3, %7
  %8 = load i32, i32* %b, align 4
  %or = or i32 %8, %shl
  store i32 %or, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add i32 %9, 8
  store i32 %add, i32* %k, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %b, align 4
  %and = and i32 %10, 1
  %11 = load i32*, i32** %e.addr, align 4
  store i32 %and, i32* %11, align 4
  %12 = load i32, i32* %b, align 4
  %shr = lshr i32 %12, 1
  store i32 %shr, i32* %b, align 4
  %13 = load i32, i32* %k, align 4
  %sub = sub i32 %13, 1
  store i32 %sub, i32* %k, align 4
  br label %while.cond4

while.cond4:                                      ; preds = %cond.end16, %while.end
  %14 = load i32, i32* %k, align 4
  %cmp5 = icmp ult i32 %14, 2
  br i1 %cmp5, label %while.body7, label %while.end23

while.body7:                                      ; preds = %while.cond4
  %15 = load i32, i32* @inptr, align 4
  %16 = load i32, i32* @insize, align 4
  %cmp8 = icmp ult i32 %15, %16
  br i1 %cmp8, label %cond.true10, label %cond.false14

cond.true10:                                      ; preds = %while.body7
  %17 = load i32, i32* @inptr, align 4
  %inc11 = add i32 %17, 1
  store i32 %inc11, i32* @inptr, align 4
  %arrayidx12 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %17
  %18 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %18 to i32
  br label %cond.end16

cond.false14:                                     ; preds = %while.body7
  %call15 = call i32 @fill_inbuf(i32 0)
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false14, %cond.true10
  %cond17 = phi i32 [ %conv13, %cond.true10 ], [ %call15, %cond.false14 ]
  %conv18 = trunc i32 %cond17 to i8
  %conv19 = zext i8 %conv18 to i32
  %19 = load i32, i32* %k, align 4
  %shl20 = shl i32 %conv19, %19
  %20 = load i32, i32* %b, align 4
  %or21 = or i32 %20, %shl20
  store i32 %or21, i32* %b, align 4
  %21 = load i32, i32* %k, align 4
  %add22 = add i32 %21, 8
  store i32 %add22, i32* %k, align 4
  br label %while.cond4

while.end23:                                      ; preds = %while.cond4
  %22 = load i32, i32* %b, align 4
  %and24 = and i32 %22, 3
  store i32 %and24, i32* %t, align 4
  %23 = load i32, i32* %b, align 4
  %shr25 = lshr i32 %23, 2
  store i32 %shr25, i32* %b, align 4
  %24 = load i32, i32* %k, align 4
  %sub26 = sub i32 %24, 2
  store i32 %sub26, i32* %k, align 4
  %25 = load i32, i32* %b, align 4
  store i32 %25, i32* @bb, align 4
  %26 = load i32, i32* %k, align 4
  store i32 %26, i32* @bk, align 4
  %27 = load i32, i32* %t, align 4
  %cmp27 = icmp eq i32 %27, 2
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %while.end23
  %call29 = call i32 @inflate_dynamic()
  store i32 %call29, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end23
  %28 = load i32, i32* %t, align 4
  %cmp30 = icmp eq i32 %28, 0
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end
  %call33 = call i32 @inflate_stored()
  store i32 %call33, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.end
  %29 = load i32, i32* %t, align 4
  %cmp35 = icmp eq i32 %29, 1
  br i1 %cmp35, label %if.then37, label %if.end39

if.then37:                                        ; preds = %if.end34
  %call38 = call i32 @inflate_fixed()
  store i32 %call38, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end34
  store i32 2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end39, %if.then37, %if.then32, %if.then
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind
define i32 @inflate() #0 {
entry:
  %retval = alloca i32, align 4
  %e = alloca i32, align 4
  %r = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 0, i32* @outcnt, align 4
  store i32 0, i32* @bk, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* %h, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  store i32 0, i32* @hufts, align 4
  %call = call i32 @inflate_block(i32* %e)
  store i32 %call, i32* %r, align 4
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load i32, i32* %r, align 4
  store i32 %0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body
  %1 = load i32, i32* @hufts, align 4
  %2 = load i32, i32* %h, align 4
  %cmp1 = icmp ugt i32 %1, %2
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* @hufts, align 4
  store i32 %3, i32* %h, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  br label %do.cond

do.cond:                                          ; preds = %if.end3
  %4 = load i32, i32* %e, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %5 = load i32, i32* @bk, align 4
  %cmp4 = icmp uge i32 %5, 8
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* @bk, align 4
  %sub = sub i32 %6, 8
  store i32 %sub, i32* @bk, align 4
  %7 = load i32, i32* @inptr, align 4
  %dec = add i32 %7, -1
  store i32 %dec, i32* @inptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i32, i32* @outcnt, align 4
  store i32 %8, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind
define i32 @lzw(i32 %in, i32 %out) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* @msg_done, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* @msg_done, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.41, i32 0, i32 0))
  %1 = load i32, i32* %in.addr, align 4
  %2 = load i32, i32* %out.addr, align 4
  %cmp = icmp ne i32 %1, %2
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 1, i32* @exit_code, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind
define void @"\01?StartThreadEventForOthread@@YAXH@Z"(i32 %CurID) #0 {
entry:
  %CurID.addr = alloca i32, align 4
  %func = alloca void ()*, align 4
  store i32 %CurID, i32* %CurID.addr, align 4
  br label %while.body

while.body:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %CurID.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?hMutexList@@3PAPAXA", i32 0, i32 %0
  %1 = load i8*, i8** %arrayidx, align 4
  %call = call x86_stdcallcc i32 @"\01_WaitForSingleObject@8"(i8* %1, i32 -1)
  %2 = load i32, i32* %CurID.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?hMutexList@@3PAPAXA", i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx1, align 4
  %call2 = call x86_stdcallcc i32 @"\01_ResetEvent@4"(i8* %3)
  %4 = load i32, i32* @"\01?GlobalSignal@@3HA", align 4
  %5 = load i32, i32* %CurID.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x [1000 x i32]], [20 x [1000 x i32]]* @"\01?FunctionGrgphForOthread@@3PAY0DOI@HA", i32 0, i32 %5
  %arrayidx4 = getelementptr inbounds [1000 x i32], [1000 x i32]* %arrayidx3, i32 0, i32 %4
  %6 = load i32, i32* %arrayidx4, align 4
  %7 = inttoptr i32 %6 to void ()*
  store void ()* %7, void ()** %func, align 4
  %8 = load void ()*, void ()** %func, align 4
  call void %8()
  %9 = load i32, i32* %CurID.addr, align 4
  %arrayidx5 = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?MutexFuncList@@3PAPAXA", i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx5, align 4
  %call6 = call x86_stdcallcc i32 @"\01_SetEvent@4"(i8* %10)
  br label %while.body

return:                                           ; No predecessors!
  ret void
}

declare dllimport x86_stdcallcc i32 @"\01_WaitForSingleObject@8"(i8*, i32) #2

declare dllimport x86_stdcallcc i32 @"\01_ResetEvent@4"(i8*) #2

declare dllimport x86_stdcallcc i32 @"\01_SetEvent@4"(i8*) #2

; Function Attrs: noinline nounwind
define void @"\01?StartThreadWhileForOthread@@YAXH@Z"(i32 %CurID) #0 {
entry:
  %CurID.addr = alloca i32, align 4
  %func = alloca void ()*, align 4
  store i32 %CurID, i32* %CurID.addr, align 4
  br label %while.body

while.body:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* @"\01?GlobalThreadID@@3HA", align 4
  %1 = load i32, i32* %CurID.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %2 = load i32, i32* @"\01?GlobalSignal@@3HA", align 4
  %3 = load i32, i32* %CurID.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [1000 x i32]], [20 x [1000 x i32]]* @"\01?FunctionGrgphForOthread@@3PAY0DOI@HA", i32 0, i32 %3
  %arrayidx1 = getelementptr inbounds [1000 x i32], [1000 x i32]* %arrayidx, i32 0, i32 %2
  %4 = load i32, i32* %arrayidx1, align 4
  %5 = inttoptr i32 %4 to void ()*
  store void ()* %5, void ()** %func, align 4
  %6 = load void ()*, void ()** %func, align 4
  call void %6()
  store i32 -1, i32* @"\01?GlobalThreadID@@3HA", align 4
  %7 = load i32, i32* %CurID.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i32], [20 x i32]* @"\01?WhileEndFlag@@3PAHA", i32 0, i32 %7
  store i32 -1, i32* %arrayidx2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.body

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: noinline nounwind
define void @"\01?MultiThreadForOthread@@YAXH@Z"(i32 %IDLength) #0 {
entry:
  %IDLength.addr = alloca i32, align 4
  %str = alloca [10 x i8], align 1
  %CurID = alloca i32, align 4
  store i32 %IDLength, i32* %IDLength.addr, align 4
  %0 = bitcast [10 x i8]* %str to i8*
  call void @llvm.memset.p0i8.i32(i8* %0, i8 0, i32 10, i32 1, i1 false)
  store i32 0, i32* %CurID, align 4
  store i32 0, i32* %CurID, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %CurID, align 4
  %2 = load i32, i32* %IDLength.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %CurID, align 4
  %4 = load i32, i32* @"\01?thresholdForOthread@@3HA", align 4
  %cmp1 = icmp slt i32 %3, %4
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %CurID, align 4
  %6 = inttoptr i32 %5 to i8*
  %call = call x86_stdcallcc i8* @"\01_CreateThread@24"(%struct._SECURITY_ATTRIBUTES* null, i32 0, i32 (i8*)* bitcast (void (i32)* @"\01?StartThreadWhileForOthread@@YAXH@Z" to i32 (i8*)*), i8* %6, i32 0, i32* null)
  br label %if.end

if.else:                                          ; preds = %for.body
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %str, i32 0, i32 0
  %7 = load i32, i32* %CurID, align 4
  %call2 = call i8* @itoa(i32 %7, i8* %arraydecay, i32 10)
  %arraydecay3 = getelementptr inbounds [10 x i8], [10 x i8]* %str, i32 0, i32 0
  %8 = bitcast i8* %arraydecay3 to i16*
  %call4 = call x86_stdcallcc i8* @"\01_CreateEventW@16"(%struct._SECURITY_ATTRIBUTES* null, i32 1, i32 0, i16* %8)
  %9 = load i32, i32* %CurID, align 4
  %arrayidx = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?hMutexList@@3PAPAXA", i32 0, i32 %9
  store i8* %call4, i8** %arrayidx, align 4
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %str, i32 0, i32 0
  %10 = load i32, i32* %CurID, align 4
  %11 = load i32, i32* @"\01?threadNumForOthread@@3HA", align 4
  %add = add nsw i32 %10, %11
  %add6 = add nsw i32 %add, 1
  %call7 = call i8* @itoa(i32 %add6, i8* %arraydecay5, i32 10)
  %arraydecay8 = getelementptr inbounds [10 x i8], [10 x i8]* %str, i32 0, i32 0
  %12 = bitcast i8* %arraydecay8 to i16*
  %call9 = call x86_stdcallcc i8* @"\01_CreateEventW@16"(%struct._SECURITY_ATTRIBUTES* null, i32 1, i32 0, i16* %12)
  %13 = load i32, i32* %CurID, align 4
  %arrayidx10 = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?MutexFuncList@@3PAPAXA", i32 0, i32 %13
  store i8* %call9, i8** %arrayidx10, align 4
  %14 = load i32, i32* %CurID, align 4
  %15 = inttoptr i32 %14 to i8*
  %call11 = call x86_stdcallcc i8* @"\01_CreateThread@24"(%struct._SECURITY_ATTRIBUTES* null, i32 0, i32 (i8*)* bitcast (void (i32)* @"\01?StartThreadEventForOthread@@YAXH@Z" to i32 (i8*)*), i8* %15, i32 0, i32* null)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %CurID, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %CurID, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare dllimport x86_stdcallcc i8* @"\01_CreateThread@24"(%struct._SECURITY_ATTRIBUTES*, i32, i32 (i8*)*, i8*, i32, i32*) #2

declare dllimport i8* @itoa(i32, i8*, i32) #2

declare dllimport x86_stdcallcc i8* @"\01_CreateEventW@16"(%struct._SECURITY_ATTRIBUTES*, i32, i32, i16*) #2

; Function Attrs: noinline nounwind
define void @"\01?printNumForOthread@@YAXXZ"() #0 {
entry:
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %0 = load i32, i32* @"\01?totalnum@@3HA", align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.42, i32 0, i32 0), i32 %0)
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %j, align 4
  %cmp = icmp slt i32 %1, 1000
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* @"\01?threadNumForOthread@@3HA", align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x [1000 x i32]], [20 x [1000 x i32]]* @"\01?CalcCallNumForOthread@@3PAY0DOI@HA", i32 0, i32 %5
  %arrayidx4 = getelementptr inbounds [1000 x i32], [1000 x i32]* %arrayidx, i32 0, i32 %4
  %6 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp ne i32 %6, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [20 x [1000 x i32]], [20 x [1000 x i32]]* @"\01?CalcCallNumForOthread@@3PAY0DOI@HA", i32 0, i32 %8
  %arrayidx7 = getelementptr inbounds [1000 x i32], [1000 x i32]* %arrayidx6, i32 0, i32 %7
  %9 = load i32, i32* %arrayidx7, align 4
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %i, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.43, i32 0, i32 0), i32 %11, i32 %10, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %13 = load i32, i32* %j, align 4
  %inc10 = add nsw i32 %13, 1
  store i32 %inc10, i32* %j, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

declare dllimport i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind
define void @"\01?SubOldCallForOthread@@YAXHH@Z"(i32 %tempSignal, i32 %ID) #0 {
entry:
  %ID.addr = alloca i32, align 4
  %tempSignal.addr = alloca i32, align 4
  store i32 %ID, i32* %ID.addr, align 4
  store i32 %tempSignal, i32* %tempSignal.addr, align 4
  %0 = load i32, i32* %tempSignal.addr, align 4
  store i32 %0, i32* @"\01?GlobalSignal@@3HA", align 4
  %1 = load i32, i32* %ID.addr, align 4
  %2 = load i32, i32* @"\01?thresholdForOthread@@3HA", align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %ID.addr, align 4
  store i32 %3, i32* @"\01?GlobalThreadID@@3HA", align 4
  br label %while.body

while.body:                                       ; preds = %if.end, %if.then
  %4 = load i32, i32* %ID.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @"\01?WhileEndFlag@@3PAHA", i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp eq i32 %5, -1
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %while.body
  %6 = load i32, i32* %ID.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @"\01?WhileEndFlag@@3PAHA", i32 0, i32 %6
  store i32 0, i32* %arrayidx3, align 4
  br label %while.end

if.end:                                           ; preds = %while.body
  br label %while.body

while.end:                                        ; preds = %if.then2
  br label %if.end12

if.else:                                          ; preds = %entry
  %7 = load i32, i32* @"\01?totalnum@@3HA", align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* @"\01?totalnum@@3HA", align 4
  %8 = load i32, i32* %tempSignal.addr, align 4
  %9 = load i32, i32* %ID.addr, align 4
  %arrayidx4 = getelementptr inbounds [20 x [1000 x i32]], [20 x [1000 x i32]]* @"\01?CalcCallNumForOthread@@3PAY0DOI@HA", i32 0, i32 %9
  %arrayidx5 = getelementptr inbounds [1000 x i32], [1000 x i32]* %arrayidx4, i32 0, i32 %8
  %10 = load i32, i32* %arrayidx5, align 4
  %inc6 = add nsw i32 %10, 1
  store i32 %inc6, i32* %arrayidx5, align 4
  %11 = load i32, i32* %ID.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?hMutexList@@3PAPAXA", i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx7, align 4
  %call = call x86_stdcallcc i32 @"\01_SetEvent@4"(i8* %12)
  %13 = load i32, i32* %ID.addr, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?MutexFuncList@@3PAPAXA", i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %call9 = call x86_stdcallcc i32 @"\01_WaitForSingleObject@8"(i8* %14, i32 -1)
  %15 = load i32, i32* %ID.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i8*], [20 x i8*]* @"\01?MutexFuncList@@3PAPAXA", i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx10, align 4
  %call11 = call x86_stdcallcc i32 @"\01_ResetEvent@4"(i8* %16)
  br label %if.end12

if.end12:                                         ; preds = %if.else, %while.end
  ret void
}

; Function Attrs: noinline nounwind
define double @ran() #0 {
entry:
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %test = alloca i32, align 4
  %0 = load i32, i32* @seedi, align 4
  %div = sdiv i32 %0, 127773
  store i32 %div, i32* %hi, align 4
  %1 = load i32, i32* @seedi, align 4
  %rem = srem i32 %1, 127773
  store i32 %rem, i32* %lo, align 4
  %2 = load i32, i32* %lo, align 4
  %mul = mul nsw i32 16807, %2
  %3 = load i32, i32* %hi, align 4
  %mul1 = mul nsw i32 2836, %3
  %sub = sub nsw i32 %mul, %mul1
  store i32 %sub, i32* %test, align 4
  %4 = load i32, i32* %test, align 4
  %cmp = icmp sgt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %test, align 4
  store i32 %5, i32* @seedi, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %test, align 4
  %add = add nsw i32 %6, 2147483647
  store i32 %add, i32* @seedi, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* @seedi, align 4
  %conv = sitofp i32 %7 to float
  %div2 = fdiv float %conv, 0x41E0000000000000
  %conv3 = fpext float %div2 to double
  ret double %conv3
}

; Function Attrs: noinline nounwind
define i32 @spec_init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %limit = alloca i32, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 3, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 3
  br i1 %cmp1, label %for.body, label %for.end22

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %2
  %limit2 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx, i32 0, i32 0
  %3 = load i32, i32* %limit2, align 4
  store i32 %3, i32* %limit, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %5 = bitcast %struct.spec_fd_t* %arrayidx3 to i8*
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 16, i32 4, i1 false)
  %6 = load i32, i32* %limit, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %7
  %limit5 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx4, i32 0, i32 0
  store i32 %6, i32* %limit5, align 4
  %8 = load i32, i32* %limit, align 4
  %add = add nsw i32 %8, 102400
  %call6 = call noalias i8* @malloc(i32 %add) #1
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %9
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 3
  store i8* %call6, i8** %buf, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %10
  %buf9 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx8, i32 0, i32 3
  %11 = load i8*, i8** %buf9, align 4
  %cmp10 = icmp eq i8* %11, null
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %for.body
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1.45, i32 0, i32 0))
  call void @exit(i32 1) #5
  unreachable

if.end13:                                         ; preds = %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %if.end13
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %limit, align 4
  %cmp15 = icmp slt i32 %12, %13
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %15
  %buf18 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx17, i32 0, i32 3
  %16 = load i8*, i8** %buf18, align 4
  %arrayidx19 = getelementptr inbounds i8, i8* %16, i32 %14
  store i8 0, i8* %arrayidx19, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %17 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %17, 1024
  store i32 %add20, i32* %j, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: noinline nounwind
define i32 @spec_random_load(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %random_text = alloca [32 x [131072 x i8]], align 1
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2.46, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 32
  br i1 %cmp1, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* @dbglvl, align 4
  %cmp2 = icmp slt i32 5, %2
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.47, i32 0, i32 0), i32 %3)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.end5
  %4 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %4, 131072
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %call9 = call double @ran()
  %mul = fmul double %call9, 2.560000e+02
  %conv = fptosi double %mul to i32
  %conv10 = trunc i32 %conv to i8
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [32 x [131072 x i8]], [32 x [131072 x i8]]* %random_text, i32 0, i32 %6
  %arrayidx11 = getelementptr inbounds [131072 x i8], [131072 x i8]* %arrayidx, i32 0, i32 %5
  store i8 %conv10, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %8, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %9 = load i32, i32* @dbglvl, align 4
  %cmp15 = icmp slt i32 4, %9
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end14
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.48, i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.end14
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc30, %if.end19
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %fd.addr, align 4
  %arrayidx21 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %11
  %limit = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx21, i32 0, i32 0
  %12 = load i32, i32* %limit, align 4
  %cmp22 = icmp slt i32 %10, %12
  br i1 %cmp22, label %for.body24, label %for.end31

for.body24:                                       ; preds = %for.cond20
  %13 = load i32, i32* %fd.addr, align 4
  %arrayidx25 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %13
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx25, i32 0, i32 3
  %14 = load i8*, i8** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %14, i32 %15
  %call26 = call double @ran()
  %mul27 = fmul double %call26, 3.200000e+01
  %conv28 = fptosi double %mul27 to i32
  %arrayidx29 = getelementptr inbounds [32 x [131072 x i8]], [32 x [131072 x i8]]* %random_text, i32 0, i32 %conv28
  %arraydecay = getelementptr inbounds [131072 x i8], [131072 x i8]* %arrayidx29, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %add.ptr, i8* %arraydecay, i32 131072, i32 1, i1 false)
  br label %for.inc30

for.inc30:                                        ; preds = %for.body24
  %16 = load i32, i32* %i, align 4
  %add = add nsw i32 %16, 131072
  store i32 %add, i32* %i, align 4
  br label %for.cond20

for.end31:                                        ; preds = %for.cond20
  %17 = load i32, i32* %fd.addr, align 4
  %arrayidx32 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %17
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx32, i32 0, i32 1
  store i32 1048576, i32* %len, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind
define i32 @spec_load(i32 %num, i8* %filename, i32 %size) #0 {
entry:
  %size.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 4
  %num.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  %rc = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %filename, i8** %filename.addr, align 4
  store i32 %num, i32* %num.addr, align 4
  %0 = load i8*, i8** %filename.addr, align 4
  %call = call i32 bitcast (i32 (...)* @open to i32 (i8*, i32)*)(i8* %0, i32 32768)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32* @_errno()
  %2 = load i32, i32* %call1, align 4
  %call2 = call i8* @strerror(i32 %2)
  %3 = load i8*, i8** %filename.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5.49, i32 0, i32 0), i8* %3, i8* %call2)
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %num.addr, align 4
  %arrayidx5 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx5, i32 0, i32 1
  store i32 0, i32* %len, align 4
  %5 = load i32, i32* %num.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %5
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp7 = icmp slt i32 %6, %7
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %num.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx8, i32 0, i32 3
  %9 = load i8*, i8** %buf, align 4
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i32, i32* %fd, align 4
  %call9 = call i32 bitcast (i32 (...)* @read to i32 (i32, i8*, i32)*)(i32 %11, i8* %add.ptr, i32 131072)
  store i32 %call9, i32* %rc, align 4
  %12 = load i32, i32* %rc, align 4
  %cmp10 = icmp eq i32 %12, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  br label %for.end

if.end12:                                         ; preds = %for.body
  %13 = load i32, i32* %rc, align 4
  %cmp13 = icmp slt i32 %13, 0
  br i1 %cmp13, label %if.then14, label %if.end20

if.then14:                                        ; preds = %if.end12
  %call15 = call i32* @_errno()
  %14 = load i32, i32* %call15, align 4
  %call16 = call i8* @strerror(i32 %14)
  %15 = load i8*, i8** %filename.addr, align 4
  %call17 = call %struct._iobuf* @__iob_func()
  %arrayidx18 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call17, i32 2
  %call19 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6.50, i32 0, i32 0), i8* %15, i8* %call16)
  call void @exit(i32 1) #5
  unreachable

if.end20:                                         ; preds = %if.end12
  %16 = load i32, i32* %rc, align 4
  %17 = load i32, i32* %num.addr, align 4
  %arrayidx21 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %17
  %len22 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx21, i32 0, i32 1
  %18 = load i32, i32* %len22, align 4
  %add = add nsw i32 %18, %16
  store i32 %add, i32* %len22, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %19 = load i32, i32* %rc, align 4
  %20 = load i32, i32* %i, align 4
  %add23 = add nsw i32 %20, %19
  store i32 %add23, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then11, %for.cond
  %21 = load i32, i32* %fd, align 4
  %call24 = call i32 @close(i32 %21)
  br label %while.cond

while.cond:                                       ; preds = %if.end40, %for.end
  %22 = load i32, i32* %num.addr, align 4
  %arrayidx25 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %22
  %len26 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx25, i32 0, i32 1
  %23 = load i32, i32* %len26, align 4
  %24 = load i32, i32* %size.addr, align 4
  %cmp27 = icmp slt i32 %23, %24
  br i1 %cmp27, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load i32, i32* %size.addr, align 4
  %26 = load i32, i32* %num.addr, align 4
  %arrayidx28 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %26
  %len29 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx28, i32 0, i32 1
  %27 = load i32, i32* %len29, align 4
  %sub = sub nsw i32 %25, %27
  store i32 %sub, i32* %tmp, align 4
  %28 = load i32, i32* %tmp, align 4
  %29 = load i32, i32* %num.addr, align 4
  %arrayidx30 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %29
  %len31 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx30, i32 0, i32 1
  %30 = load i32, i32* %len31, align 4
  %cmp32 = icmp sgt i32 %28, %30
  br i1 %cmp32, label %if.then33, label %if.end36

if.then33:                                        ; preds = %while.body
  %31 = load i32, i32* %num.addr, align 4
  %arrayidx34 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %31
  %len35 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx34, i32 0, i32 1
  %32 = load i32, i32* %len35, align 4
  store i32 %32, i32* %tmp, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %while.body
  %33 = load i32, i32* @dbglvl, align 4
  %cmp37 = icmp slt i32 3, %33
  br i1 %cmp37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end36
  %34 = load i32, i32* %tmp, align 4
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.51, i32 0, i32 0), i32 %34)
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.end36
  %35 = load i32, i32* %num.addr, align 4
  %arrayidx41 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %35
  %buf42 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx41, i32 0, i32 3
  %36 = load i8*, i8** %buf42, align 4
  %37 = load i32, i32* %num.addr, align 4
  %arrayidx43 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %37
  %len44 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx43, i32 0, i32 1
  %38 = load i32, i32* %len44, align 4
  %add.ptr45 = getelementptr inbounds i8, i8* %36, i32 %38
  %39 = load i32, i32* %num.addr, align 4
  %arrayidx46 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %39
  %buf47 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx46, i32 0, i32 3
  %40 = load i8*, i8** %buf47, align 4
  %41 = load i32, i32* %tmp, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %add.ptr45, i8* %40, i32 %41, i32 1, i1 false)
  %42 = load i32, i32* %tmp, align 4
  %43 = load i32, i32* %num.addr, align 4
  %arrayidx48 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %43
  %len49 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx48, i32 0, i32 1
  %44 = load i32, i32* %len49, align 4
  %add50 = add nsw i32 %44, %42
  store i32 %add50, i32* %len49, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @open(...) #2

declare dllimport i32* @_errno() #2

declare dllimport i8* @strerror(i32) #2

declare i32 @read(...) #2

; Function Attrs: noinline nounwind
define i32 @spec_read(i32 %fd, i8* %buf, i32 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %fd.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i32 0, i32* %rc, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %2 = load i8*, i8** %buf.addr, align 4
  %3 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8.52, i32 0, i32 0), i32 %3, i8* %2, i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %4, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9.53, i32 0, i32 0), i32 %5)
  call void @exit(i32 1) #5
  unreachable

if.end5:                                          ; preds = %if.end
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  %7 = load i32, i32* %pos, align 4
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 1
  %9 = load i32, i32* %len, align 4
  %cmp8 = icmp sge i32 %7, %9
  br i1 %cmp8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end5
  %10 = load i32, i32* @dbglvl, align 4
  %cmp10 = icmp slt i32 4, %10
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.then9
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.54, i32 0, i32 0))
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.then9
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end5
  %11 = load i32, i32* %fd.addr, align 4
  %arrayidx15 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %11
  %pos16 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx15, i32 0, i32 2
  %12 = load i32, i32* %pos16, align 4
  %13 = load i32, i32* %size.addr, align 4
  %add = add nsw i32 %12, %13
  %14 = load i32, i32* %fd.addr, align 4
  %arrayidx17 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %14
  %len18 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx17, i32 0, i32 1
  %15 = load i32, i32* %len18, align 4
  %cmp19 = icmp sge i32 %add, %15
  br i1 %cmp19, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end14
  %16 = load i32, i32* %fd.addr, align 4
  %arrayidx21 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %16
  %len22 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx21, i32 0, i32 1
  %17 = load i32, i32* %len22, align 4
  %18 = load i32, i32* %fd.addr, align 4
  %arrayidx23 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %18
  %pos24 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx23, i32 0, i32 2
  %19 = load i32, i32* %pos24, align 4
  %sub = sub nsw i32 %17, %19
  store i32 %sub, i32* %rc, align 4
  br label %if.end25

if.else:                                          ; preds = %if.end14
  %20 = load i32, i32* %size.addr, align 4
  store i32 %20, i32* %rc, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then20
  %21 = load i8*, i8** %buf.addr, align 4
  %22 = load i32, i32* %fd.addr, align 4
  %arrayidx26 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %22
  %pos27 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx26, i32 0, i32 2
  %23 = load i32, i32* %pos27, align 4
  %24 = load i32, i32* %fd.addr, align 4
  %arrayidx28 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %24
  %buf29 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx28, i32 0, i32 3
  %25 = load i8*, i8** %buf29, align 4
  %arrayidx30 = getelementptr inbounds i8, i8* %25, i32 %23
  %26 = load i32, i32* %rc, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %21, i8* %arrayidx30, i32 %26, i32 1, i1 false)
  %27 = load i32, i32* %rc, align 4
  %28 = load i32, i32* %fd.addr, align 4
  %arrayidx31 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %28
  %pos32 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx31, i32 0, i32 2
  %29 = load i32, i32* %pos32, align 4
  %add33 = add nsw i32 %29, %27
  store i32 %add33, i32* %pos32, align 4
  %30 = load i32, i32* @dbglvl, align 4
  %cmp34 = icmp slt i32 4, %30
  br i1 %cmp34, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end25
  %31 = load i32, i32* %rc, align 4
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11.55, i32 0, i32 0), i32 %31)
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end25
  %32 = load i32, i32* %rc, align 4
  store i32 %32, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end37, %if.end13
  %33 = load i32, i32* %retval, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind
define i32 @spec_getc(i32 %fd) #0 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i32 0, i32* %rc, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12.56, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %2, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13.57, i32 0, i32 0), i32 %3)
  call void @exit(i32 1) #5
  unreachable

if.end5:                                          ; preds = %if.end
  %4 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  %5 = load i32, i32* %pos, align 4
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 1
  %7 = load i32, i32* %len, align 4
  %cmp8 = icmp sge i32 %5, %7
  br i1 %cmp8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end5
  %8 = load i32, i32* @dbglvl, align 4
  %cmp10 = icmp slt i32 4, %8
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.then9
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.58, i32 0, i32 0))
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.then9
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end5
  %9 = load i32, i32* %fd.addr, align 4
  %arrayidx15 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %9
  %pos16 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx15, i32 0, i32 2
  %10 = load i32, i32* %pos16, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %pos16, align 4
  %11 = load i32, i32* %fd.addr, align 4
  %arrayidx17 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %11
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx17, i32 0, i32 3
  %12 = load i8*, i8** %buf, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %12, i32 %10
  %13 = load i8, i8* %arrayidx18, align 1
  %conv = zext i8 %13 to i32
  store i32 %conv, i32* %rc, align 4
  %14 = load i32, i32* @dbglvl, align 4
  %cmp19 = icmp slt i32 4, %14
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end14
  %15 = load i32, i32* %rc, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.59, i32 0, i32 0), i32 %15)
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.end14
  %16 = load i32, i32* %rc, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.end13
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind
define i32 @spec_ungetc(i8 zeroext %ch, i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %rc = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i32 0, i32* %rc, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.60, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %2, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.17.61, i32 0, i32 0), i32 %3)
  call void @exit(i32 1) #5
  unreachable

if.end5:                                          ; preds = %if.end
  %4 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  %5 = load i32, i32* %pos, align 4
  %cmp7 = icmp sle i32 %5, 0
  br i1 %cmp7, label %if.then8, label %if.end14

if.then8:                                         ; preds = %if.end5
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx9 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %pos10 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx9, i32 0, i32 2
  %7 = load i32, i32* %pos10, align 4
  %call11 = call %struct._iobuf* @__iob_func()
  %arrayidx12 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call11, i32 2
  %call13 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx12, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.18.62, i32 0, i32 0), i32 %7)
  call void @exit(i32 1) #5
  unreachable

if.end14:                                         ; preds = %if.end5
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx15 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %pos16 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx15, i32 0, i32 2
  %9 = load i32, i32* %pos16, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %pos16, align 4
  %10 = load i32, i32* %fd.addr, align 4
  %arrayidx17 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %10
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx17, i32 0, i32 3
  %11 = load i8*, i8** %buf, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %11, i32 %dec
  %12 = load i8, i8* %arrayidx18, align 1
  %conv = zext i8 %12 to i32
  %13 = load i8, i8* %ch.addr, align 1
  %conv19 = zext i8 %13 to i32
  %cmp20 = icmp ne i32 %conv, %conv19
  br i1 %cmp20, label %if.then22, label %if.end26

if.then22:                                        ; preds = %if.end14
  %call23 = call %struct._iobuf* @__iob_func()
  %arrayidx24 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call23, i32 2
  %call25 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx24, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.19.63, i32 0, i32 0))
  call void @exit(i32 1) #5
  unreachable

if.end26:                                         ; preds = %if.end14
  %14 = load i32, i32* @dbglvl, align 4
  %cmp27 = icmp slt i32 4, %14
  br i1 %cmp27, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end26
  %15 = load i32, i32* %rc, align 4
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.64, i32 0, i32 0), i32 %15)
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %if.end26
  %16 = load i8, i8* %ch.addr, align 1
  %conv32 = zext i8 %16 to i32
  ret i32 %conv32
}

; Function Attrs: noinline nounwind
define i32 @spec_rewind(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* %fd.addr, align 4
  %arrayidx = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %0
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx, i32 0, i32 2
  store i32 0, i32* %pos, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind
define i32 @spec_reset(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* %fd.addr, align 4
  %arrayidx = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %0
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx, i32 0, i32 3
  %1 = load i8*, i8** %buf, align 4
  %2 = load i32, i32* %fd.addr, align 4
  %arrayidx1 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %2
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx1, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 %3, i32 1, i1 false)
  %4 = load i32, i32* %fd.addr, align 4
  %arrayidx2 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %len3 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx2, i32 0, i32 1
  store i32 0, i32* %len3, align 4
  %5 = load i32, i32* %fd.addr, align 4
  %arrayidx4 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %5
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx4, i32 0, i32 2
  store i32 0, i32* %pos, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind
define i32 @spec_write(i32 %fd, i8* %buf, i32 %size) #0 {
entry:
  %size.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %fd.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %2 = load i8*, i8** %buf.addr, align 4
  %3 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21.65, i32 0, i32 0), i32 %3, i8* %2, i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %4, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.22.66, i32 0, i32 0), i32 %5)
  call void @exit(i32 1) #5
  unreachable

if.end5:                                          ; preds = %if.end
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  %7 = load i32, i32* %pos, align 4
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %buf8 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 3
  %9 = load i8*, i8** %buf8, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %7
  %10 = load i8*, i8** %buf.addr, align 4
  %11 = load i32, i32* %size.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %arrayidx9, i8* %10, i32 %11, i32 1, i1 false)
  %12 = load i32, i32* %size.addr, align 4
  %13 = load i32, i32* %fd.addr, align 4
  %arrayidx10 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %13
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx10, i32 0, i32 1
  %14 = load i32, i32* %len, align 4
  %add = add nsw i32 %14, %12
  store i32 %add, i32* %len, align 4
  %15 = load i32, i32* %size.addr, align 4
  %16 = load i32, i32* %fd.addr, align 4
  %arrayidx11 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %16
  %pos12 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx11, i32 0, i32 2
  %17 = load i32, i32* %pos12, align 4
  %add13 = add nsw i32 %17, %15
  store i32 %add13, i32* %pos12, align 4
  %18 = load i32, i32* @dbglvl, align 4
  %cmp14 = icmp slt i32 4, %18
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end5
  %19 = load i32, i32* %size.addr, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.67, i32 0, i32 0), i32 %19)
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %if.end5
  %20 = load i32, i32* %size.addr, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind
define i32 @spec_putc(i8 zeroext %ch, i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  store i32 %fd, i32* %fd.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4
  %2 = load i8, i8* %ch.addr, align 1
  %conv = zext i8 %2 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24.68, i32 0, i32 0), i32 %conv, i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %3, 3
  br i1 %cmp1, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* %fd.addr, align 4
  %call4 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call4, i32 2
  %call5 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.25.69, i32 0, i32 0), i32 %4)
  call void @exit(i32 1) #5
  unreachable

if.end6:                                          ; preds = %if.end
  %5 = load i8, i8* %ch.addr, align 1
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 2
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx8, i32 0, i32 3
  %9 = load i8*, i8** %buf, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %7
  store i8 %5, i8* %arrayidx9, align 1
  %10 = load i32, i32* %fd.addr, align 4
  %arrayidx10 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %10
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx10, i32 0, i32 1
  %11 = load i32, i32* %len, align 4
  %inc11 = add nsw i32 %11, 1
  store i32 %inc11, i32* %len, align 4
  %12 = load i8, i8* %ch.addr, align 1
  %conv12 = zext i8 %12 to i32
  ret i32 %conv12
}

; Function Attrs: noinline nounwind
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %argc.addr = alloca i32, align 4
  %t = alloca i32, align 4
  %sum = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fd = alloca i32, align 4
  %level = alloca i32, align 4
  %input_size = alloca i32, align 4
  %compressed_size = alloca i32, align 4
  %input_name = alloca i8*, align 4
  %validate_array = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i32 0, i32* %sum, align 4
  %call = call i32 @clock()
  store i32 %call, i32* %t, align 4
  store i32 64, i32* %input_size, align 4
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26.70, i32 0, i32 0), i8** %input_name, align 4
  store i32 10, i32* @seedi, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  store i8* %2, i8** %input_name, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp sgt i32 %3, 2
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 @atoi(i8* %5)
  store i32 %call4, i32* %input_size, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %cmp6 = icmp sgt i32 %6, 3
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end5
  %7 = load i8**, i8*** %argv.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %7, i32 3
  %8 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 @atoi(i8* %8)
  store i32 %call9, i32* %compressed_size, align 4
  br label %if.end10

if.else:                                          ; preds = %if.end5
  %9 = load i32, i32* %input_size, align 4
  store i32 %9, i32* %compressed_size, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then7
  %10 = load i32, i32* %input_size, align 4
  %mul = mul nsw i32 %10, 1048576
  store i32 %mul, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 0), align 4
  %11 = load i32, i32* %compressed_size, align 4
  %mul11 = mul nsw i32 %11, 1048576
  store i32 %mul11, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 1, i32 0), align 4
  %12 = load i32, i32* %input_size, align 4
  %mul12 = mul nsw i32 %12, 1048576
  store i32 %mul12, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 2, i32 0), align 4
  %call13 = call i32 @spec_init()
  %call14 = call i32 @debug_time()
  %13 = load i32, i32* @dbglvl, align 4
  %cmp15 = icmp slt i32 2, %13
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.27.71, i32 0, i32 0))
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end10
  %14 = load i32, i32* %input_size, align 4
  %mul19 = mul nsw i32 %14, 1048576
  %15 = load i8*, i8** %input_name, align 4
  %call20 = call i32 @spec_load(i32 0, i8* %15, i32 %mul19)
  %16 = load i32, i32* @dbglvl, align 4
  %cmp21 = icmp slt i32 3, %16
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end18
  %17 = load i32, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 1), align 4
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.28.72, i32 0, i32 0), i32 %17)
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end18
  %18 = load i32, i32* %input_size, align 4
  %mul25 = mul nsw i32 %18, 1048576
  %div = sdiv i32 %mul25, 1024
  %call26 = call noalias i8* @malloc(i32 %div) #1
  store i8* %call26, i8** %validate_array, align 4
  %19 = load i8*, i8** %validate_array, align 4
  %cmp27 = icmp eq i8* %19, null
  br i1 %cmp27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %if.end24
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.29.73, i32 0, i32 0))
  call void @exit(i32 1) #5
  unreachable

if.end30:                                         ; preds = %if.end24
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end30
  %20 = load i32, i32* %i, align 4
  %mul31 = mul nsw i32 %20, 1027
  %21 = load i32, i32* %input_size, align 4
  %mul32 = mul nsw i32 %21, 1048576
  %cmp33 = icmp slt i32 %mul31, %mul32
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i32, i32* %i, align 4
  %mul34 = mul nsw i32 %22, 1027
  %23 = load i8*, i8** getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 3), align 4
  %arrayidx35 = getelementptr inbounds i8, i8* %23, i32 %mul34
  %24 = load i8, i8* %arrayidx35, align 1
  %25 = load i32, i32* %i, align 4
  %26 = load i8*, i8** %validate_array, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %26, i32 %25
  store i8 %24, i8* %arrayidx36, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @spec_initbufs()
  store i32 1, i32* %level, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc87, %for.end
  %28 = load i32, i32* %level, align 4
  %cmp38 = icmp sle i32 %28, 9
  br i1 %cmp38, label %for.body39, label %for.end88

for.body39:                                       ; preds = %for.cond37
  %call40 = call i32 @debug_time()
  %29 = load i32, i32* @dbglvl, align 4
  %cmp41 = icmp slt i32 2, %29
  br i1 %cmp41, label %if.then42, label %if.end44

if.then42:                                        ; preds = %for.body39
  %30 = load i32, i32* %level, align 4
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.30.74, i32 0, i32 0), i32 %30)
  br label %if.end44

if.end44:                                         ; preds = %if.then42, %for.body39
  %31 = load i32, i32* %level, align 4
  call void @spec_compress(i32 0, i32 1, i32 %31)
  %call45 = call i32 @debug_time()
  %32 = load i32, i32* @dbglvl, align 4
  %cmp46 = icmp slt i32 3, %32
  br i1 %cmp46, label %if.then47, label %if.end49

if.then47:                                        ; preds = %if.end44
  %33 = load i32, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 1, i32 1), align 4
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.31.75, i32 0, i32 0), i32 %33)
  br label %if.end49

if.end49:                                         ; preds = %if.then47, %if.end44
  %call50 = call i32 @spec_reset(i32 0)
  %call51 = call i32 @spec_rewind(i32 1)
  %call52 = call i32 @debug_time()
  %34 = load i32, i32* @dbglvl, align 4
  %cmp53 = icmp slt i32 2, %34
  br i1 %cmp53, label %if.then54, label %if.end56

if.then54:                                        ; preds = %if.end49
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.32.76, i32 0, i32 0))
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %if.end49
  %35 = load i32, i32* %level, align 4
  call void @spec_uncompress(i32 1, i32 0, i32 %35)
  %call57 = call i32 @debug_time()
  %36 = load i32, i32* @dbglvl, align 4
  %cmp58 = icmp slt i32 3, %36
  br i1 %cmp58, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.end56
  %37 = load i32, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 1), align 4
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.33.77, i32 0, i32 0), i32 %37)
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %if.end56
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc76, %if.end61
  %38 = load i32, i32* %i, align 4
  %mul63 = mul nsw i32 %38, 1027
  %39 = load i32, i32* %input_size, align 4
  %mul64 = mul nsw i32 %39, 1048576
  %cmp65 = icmp slt i32 %mul63, %mul64
  br i1 %cmp65, label %for.body66, label %for.end78

for.body66:                                       ; preds = %for.cond62
  %40 = load i32, i32* %i, align 4
  %41 = load i8*, i8** %validate_array, align 4
  %arrayidx67 = getelementptr inbounds i8, i8* %41, i32 %40
  %42 = load i8, i8* %arrayidx67, align 1
  %conv = zext i8 %42 to i32
  %43 = load i32, i32* %i, align 4
  %mul68 = mul nsw i32 %43, 1027
  %44 = load i8*, i8** getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 3), align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %44, i32 %mul68
  %45 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %45 to i32
  %cmp71 = icmp ne i32 %conv, %conv70
  br i1 %cmp71, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.body66
  %46 = load i32, i32* %input_size, align 4
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34.78, i32 0, i32 0), i32 %46)
  call void @exit(i32 1) #5
  unreachable

if.end75:                                         ; preds = %for.body66
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %47 = load i32, i32* %i, align 4
  %inc77 = add nsw i32 %47, 1
  store i32 %inc77, i32* %i, align 4
  br label %for.cond62

for.end78:                                        ; preds = %for.cond62
  %call79 = call i32 @debug_time()
  %48 = load i32, i32* @dbglvl, align 4
  %cmp80 = icmp slt i32 3, %48
  br i1 %cmp80, label %if.then82, label %if.end84

if.then82:                                        ; preds = %for.end78
  %call83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.35.79, i32 0, i32 0))
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %for.end78
  %call85 = call i32 @spec_reset(i32 1)
  %call86 = call i32 @spec_rewind(i32 0)
  br label %for.inc87

for.inc87:                                        ; preds = %if.end84
  %49 = load i32, i32* %level, align 4
  %add = add nsw i32 %49, 2
  store i32 %add, i32* %level, align 4
  br label %for.cond37

for.end88:                                        ; preds = %for.cond37
  %50 = load i32, i32* %input_size, align 4
  %call89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.36.80, i32 0, i32 0), i32 %50)
  %call90 = call i32 @clock()
  %51 = load i32, i32* %t, align 4
  %sub = sub nsw i32 %call90, %51
  store i32 %sub, i32* %t, align 4
  %52 = load i32, i32* %t, align 4
  %conv91 = sitofp i32 %52 to float
  %div92 = fdiv float %conv91, 1.000000e+03
  %conv93 = fpext float %div92 to double
  %53 = load i32, i32* %sum, align 4
  %call94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.37.81, i32 0, i32 0), i32 %53, double %conv93)
  ret i32 0
}

declare dllimport i32 @clock() #2

declare dllimport i32 @atoi(i8*) #2

; Function Attrs: noinline nounwind
define i32 @debug_time() #0 {
entry:
  ret i32 0
}

; Function Attrs: noinline nounwind
define void @spec_initbufs() #0 {
entry:
  store i32 0, i32* @no_name, align 4
  store i32 0, i32* @no_time, align 4
  store i32 0, i32* @time_stamp, align 4
  store i32 0, i32* @save_orig_name, align 4
  store i32 -1, i32* @ifile_size, align 4
  store i32 1, i32* @to_stdout, align 4
  ret void
}

; Function Attrs: noinline nounwind
define void @spec_compress(i32 %in, i32 %out, i32 %lev) #0 {
entry:
  %lev.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  store i32 %lev, i32* %lev.addr, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* %lev.addr, align 4
  store i32 %0, i32* @level, align 4
  store i32 0, i32* @part_nb, align 4
  call void @clear_bufs()
  %1 = load i32, i32* %in.addr, align 4
  store i32 %1, i32* @ifd, align 4
  %2 = load i32, i32* %out.addr, align 4
  store i32 %2, i32* @ofd, align 4
  %3 = load i32, i32* @ofd, align 4
  %4 = load i32, i32* @ifd, align 4
  %call = call i32 @zip(i32 %4, i32 %3)
  ret void
}

; Function Attrs: noinline nounwind
define void @spec_uncompress(i32 %in, i32 %out, i32 %lev) #0 {
entry:
  %lev.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  store i32 %lev, i32* %lev.addr, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* %lev.addr, align 4
  store i32 %0, i32* @level, align 4
  store i32 0, i32* @part_nb, align 4
  call void @clear_bufs()
  %1 = load i32, i32* %in.addr, align 4
  store i32 %1, i32* @ifd, align 4
  %2 = load i32, i32* %out.addr, align 4
  store i32 %2, i32* @ofd, align 4
  %call = call i32 @get_method(i32 1)
  store i32 %call, i32* @method, align 4
  %3 = load i32, i32* @ofd, align 4
  %4 = load i32, i32* @ifd, align 4
  %call1 = call i32 @unzip(i32 %4, i32 %3)
  ret void
}

; Function Attrs: noinline nounwind
define void @ct_init(i16* %attr, i32* %methodp) #0 {
entry:
  %methodp.addr = alloca i32*, align 4
  %attr.addr = alloca i16*, align 4
  %n = alloca i32, align 4
  %bits = alloca i32, align 4
  %length = alloca i32, align 4
  %code = alloca i32, align 4
  %dist = alloca i32, align 4
  store i32* %methodp, i32** %methodp.addr, align 4
  store i16* %attr, i16** %attr.addr, align 4
  %0 = load i16*, i16** %attr.addr, align 4
  store i16* %0, i16** @file_type, align 4
  %1 = load i32*, i32** %methodp.addr, align 4
  store i32* %1, i32** @file_method, align 4
  store i32 0, i32* @input_len, align 4
  store i32 0, i32* @compressed_len, align 4
  %2 = load i16, i16* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i32 0, i32 0, i32 1, i32 0), align 2
  %conv = zext i16 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %length, align 4
  store i32 0, i32* %code, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %if.end
  %3 = load i32, i32* %code, align 4
  %cmp2 = icmp slt i32 %3, 28
  br i1 %cmp2, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %length, align 4
  %5 = load i32, i32* %code, align 4
  %arrayidx = getelementptr inbounds [29 x i32], [29 x i32]* @base_length, i32 0, i32 %5
  store i32 %4, i32* %arrayidx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %code, align 4
  %arrayidx5 = getelementptr inbounds [29 x i32], [29 x i32]* @extra_lbits, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx5, align 4
  %shl = shl i32 1, %8
  %cmp6 = icmp slt i32 %6, %shl
  br i1 %cmp6, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond4
  %9 = load i32, i32* %code, align 4
  %conv9 = trunc i32 %9 to i8
  %10 = load i32, i32* %length, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %length, align 4
  %arrayidx10 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i32 0, i32 %10
  store i8 %conv9, i8* %arrayidx10, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %11 = load i32, i32* %n, align 4
  %inc11 = add nsw i32 %11, 1
  store i32 %inc11, i32* %n, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %12 = load i32, i32* %code, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %code, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %13 = load i32, i32* %code, align 4
  %conv15 = trunc i32 %13 to i8
  %14 = load i32, i32* %length, align 4
  %sub = sub nsw i32 %14, 1
  %arrayidx16 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i32 0, i32 %sub
  store i8 %conv15, i8* %arrayidx16, align 1
  store i32 0, i32* %dist, align 4
  store i32 0, i32* %code, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc34, %for.end14
  %15 = load i32, i32* %code, align 4
  %cmp18 = icmp slt i32 %15, 16
  br i1 %cmp18, label %for.body20, label %for.end36

for.body20:                                       ; preds = %for.cond17
  %16 = load i32, i32* %dist, align 4
  %17 = load i32, i32* %code, align 4
  %arrayidx21 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i32 0, i32 %17
  store i32 %16, i32* %arrayidx21, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc31, %for.body20
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %code, align 4
  %arrayidx23 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx23, align 4
  %shl24 = shl i32 1, %20
  %cmp25 = icmp slt i32 %18, %shl24
  br i1 %cmp25, label %for.body27, label %for.end33

for.body27:                                       ; preds = %for.cond22
  %21 = load i32, i32* %code, align 4
  %conv28 = trunc i32 %21 to i8
  %22 = load i32, i32* %dist, align 4
  %inc29 = add nsw i32 %22, 1
  store i32 %inc29, i32* %dist, align 4
  %arrayidx30 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i32 0, i32 %22
  store i8 %conv28, i8* %arrayidx30, align 1
  br label %for.inc31

for.inc31:                                        ; preds = %for.body27
  %23 = load i32, i32* %n, align 4
  %inc32 = add nsw i32 %23, 1
  store i32 %inc32, i32* %n, align 4
  br label %for.cond22

for.end33:                                        ; preds = %for.cond22
  br label %for.inc34

for.inc34:                                        ; preds = %for.end33
  %24 = load i32, i32* %code, align 4
  %inc35 = add nsw i32 %24, 1
  store i32 %inc35, i32* %code, align 4
  br label %for.cond17

for.end36:                                        ; preds = %for.cond17
  %25 = load i32, i32* %dist, align 4
  %shr = ashr i32 %25, 7
  store i32 %shr, i32* %dist, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc56, %for.end36
  %26 = load i32, i32* %code, align 4
  %cmp38 = icmp slt i32 %26, 30
  br i1 %cmp38, label %for.body40, label %for.end58

for.body40:                                       ; preds = %for.cond37
  %27 = load i32, i32* %dist, align 4
  %shl41 = shl i32 %27, 7
  %28 = load i32, i32* %code, align 4
  %arrayidx42 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i32 0, i32 %28
  store i32 %shl41, i32* %arrayidx42, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.body40
  %29 = load i32, i32* %n, align 4
  %30 = load i32, i32* %code, align 4
  %arrayidx44 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i32 0, i32 %30
  %31 = load i32, i32* %arrayidx44, align 4
  %sub45 = sub nsw i32 %31, 7
  %shl46 = shl i32 1, %sub45
  %cmp47 = icmp slt i32 %29, %shl46
  br i1 %cmp47, label %for.body49, label %for.end55

for.body49:                                       ; preds = %for.cond43
  %32 = load i32, i32* %code, align 4
  %conv50 = trunc i32 %32 to i8
  %33 = load i32, i32* %dist, align 4
  %inc51 = add nsw i32 %33, 1
  store i32 %inc51, i32* %dist, align 4
  %add = add nsw i32 256, %33
  %arrayidx52 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i32 0, i32 %add
  store i8 %conv50, i8* %arrayidx52, align 1
  br label %for.inc53

for.inc53:                                        ; preds = %for.body49
  %34 = load i32, i32* %n, align 4
  %inc54 = add nsw i32 %34, 1
  store i32 %inc54, i32* %n, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  br label %for.inc56

for.inc56:                                        ; preds = %for.end55
  %35 = load i32, i32* %code, align 4
  %inc57 = add nsw i32 %35, 1
  store i32 %inc57, i32* %code, align 4
  br label %for.cond37

for.end58:                                        ; preds = %for.cond37
  store i32 0, i32* %bits, align 4
  br label %for.cond59

for.cond59:                                       ; preds = %for.inc64, %for.end58
  %36 = load i32, i32* %bits, align 4
  %cmp60 = icmp sle i32 %36, 15
  br i1 %cmp60, label %for.body62, label %for.end66

for.body62:                                       ; preds = %for.cond59
  %37 = load i32, i32* %bits, align 4
  %arrayidx63 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %37
  store i16 0, i16* %arrayidx63, align 2
  br label %for.inc64

for.inc64:                                        ; preds = %for.body62
  %38 = load i32, i32* %bits, align 4
  %inc65 = add nsw i32 %38, 1
  store i32 %inc65, i32* %bits, align 4
  br label %for.cond59

for.end66:                                        ; preds = %for.cond59
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end66
  %39 = load i32, i32* %n, align 4
  %cmp67 = icmp sle i32 %39, 143
  br i1 %cmp67, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %40 = load i32, i32* %n, align 4
  %inc69 = add nsw i32 %40, 1
  store i32 %inc69, i32* %n, align 4
  %arrayidx70 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 %40
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx70, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  store i16 8, i16* %len, align 2
  %41 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 8), align 2
  %inc71 = add i16 %41, 1
  store i16 %inc71, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 8), align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond72

while.cond72:                                     ; preds = %while.body75, %while.end
  %42 = load i32, i32* %n, align 4
  %cmp73 = icmp sle i32 %42, 255
  br i1 %cmp73, label %while.body75, label %while.end81

while.body75:                                     ; preds = %while.cond72
  %43 = load i32, i32* %n, align 4
  %inc76 = add nsw i32 %43, 1
  store i32 %inc76, i32* %n, align 4
  %arrayidx77 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 %43
  %dl78 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx77, i32 0, i32 1
  %len79 = bitcast %union.anon.5* %dl78 to i16*
  store i16 9, i16* %len79, align 2
  %44 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 9), align 2
  %inc80 = add i16 %44, 1
  store i16 %inc80, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 9), align 2
  br label %while.cond72

while.end81:                                      ; preds = %while.cond72
  br label %while.cond82

while.cond82:                                     ; preds = %while.body85, %while.end81
  %45 = load i32, i32* %n, align 4
  %cmp83 = icmp sle i32 %45, 279
  br i1 %cmp83, label %while.body85, label %while.end91

while.body85:                                     ; preds = %while.cond82
  %46 = load i32, i32* %n, align 4
  %inc86 = add nsw i32 %46, 1
  store i32 %inc86, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 %46
  %dl88 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx87, i32 0, i32 1
  %len89 = bitcast %union.anon.5* %dl88 to i16*
  store i16 7, i16* %len89, align 2
  %47 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 7), align 2
  %inc90 = add i16 %47, 1
  store i16 %inc90, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 7), align 2
  br label %while.cond82

while.end91:                                      ; preds = %while.cond82
  br label %while.cond92

while.cond92:                                     ; preds = %while.body95, %while.end91
  %48 = load i32, i32* %n, align 4
  %cmp93 = icmp sle i32 %48, 287
  br i1 %cmp93, label %while.body95, label %while.end101

while.body95:                                     ; preds = %while.cond92
  %49 = load i32, i32* %n, align 4
  %inc96 = add nsw i32 %49, 1
  store i32 %inc96, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 %49
  %dl98 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx97, i32 0, i32 1
  %len99 = bitcast %union.anon.5* %dl98 to i16*
  store i16 8, i16* %len99, align 2
  %50 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 8), align 2
  %inc100 = add i16 %50, 1
  store i16 %inc100, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i32 0, i32 8), align 2
  br label %while.cond92

while.end101:                                     ; preds = %while.cond92
  call void @gen_codes(%struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 0), i32 287)
  store i32 0, i32* %n, align 4
  br label %for.cond102

for.cond102:                                      ; preds = %for.inc112, %while.end101
  %51 = load i32, i32* %n, align 4
  %cmp103 = icmp slt i32 %51, 30
  br i1 %cmp103, label %for.body105, label %for.end114

for.body105:                                      ; preds = %for.cond102
  %52 = load i32, i32* %n, align 4
  %arrayidx106 = getelementptr inbounds [30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i32 0, i32 %52
  %dl107 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx106, i32 0, i32 1
  %len108 = bitcast %union.anon.5* %dl107 to i16*
  store i16 5, i16* %len108, align 2
  %53 = load i32, i32* %n, align 4
  %call = call i32 @bi_reverse(i32 %53, i32 5)
  %conv109 = trunc i32 %call to i16
  %54 = load i32, i32* %n, align 4
  %arrayidx110 = getelementptr inbounds [30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i32 0, i32 %54
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx110, i32 0, i32 0
  %code111 = bitcast %union.anon.5* %fc to i16*
  store i16 %conv109, i16* %code111, align 2
  br label %for.inc112

for.inc112:                                       ; preds = %for.body105
  %55 = load i32, i32* %n, align 4
  %inc113 = add nsw i32 %55, 1
  store i32 %inc113, i32* %n, align 4
  br label %for.cond102

for.end114:                                       ; preds = %for.cond102
  call void @init_block()
  br label %return

return:                                           ; preds = %for.end114, %if.then
  ret void
}

; Function Attrs: noinline nounwind
define internal void @gen_codes(%struct.ct_data* %tree, i32 %max_code) #0 {
entry:
  %max_code.addr = alloca i32, align 4
  %tree.addr = alloca %struct.ct_data*, align 4
  %next_code = alloca [16 x i16], align 2
  %code = alloca i16, align 2
  %bits = alloca i32, align 4
  %n = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %max_code, i32* %max_code.addr, align 4
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 4
  store i16 0, i16* %code, align 2
  store i32 1, i32* %bits, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %bits, align 4
  %cmp = icmp sle i32 %0, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i16, i16* %code, align 2
  %conv = zext i16 %1 to i32
  %2 = load i32, i32* %bits, align 4
  %sub = sub nsw i32 %2, 1
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %sub
  %3 = load i16, i16* %arrayidx, align 2
  %conv1 = zext i16 %3 to i32
  %add = add nsw i32 %conv, %conv1
  %shl = shl i32 %add, 1
  %conv2 = trunc i32 %shl to i16
  store i16 %conv2, i16* %code, align 2
  %4 = load i32, i32* %bits, align 4
  %arrayidx3 = getelementptr inbounds [16 x i16], [16 x i16]* %next_code, i32 0, i32 %4
  store i16 %conv2, i16* %arrayidx3, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %bits, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %bits, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %n, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc19, %for.end
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %max_code.addr, align 4
  %cmp5 = icmp sle i32 %6, %7
  br i1 %cmp5, label %for.body7, label %for.end21

for.body7:                                        ; preds = %for.cond4
  %8 = load i32, i32* %n, align 4
  %9 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx8 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %9, i32 %8
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx8, i32 0, i32 1
  %len9 = bitcast %union.anon.5* %dl to i16*
  %10 = load i16, i16* %len9, align 2
  %conv10 = zext i16 %10 to i32
  store i32 %conv10, i32* %len, align 4
  %11 = load i32, i32* %len, align 4
  %cmp11 = icmp eq i32 %11, 0
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc19

if.end:                                           ; preds = %for.body7
  %12 = load i32, i32* %len, align 4
  %13 = load i32, i32* %len, align 4
  %arrayidx13 = getelementptr inbounds [16 x i16], [16 x i16]* %next_code, i32 0, i32 %13
  %14 = load i16, i16* %arrayidx13, align 2
  %inc14 = add i16 %14, 1
  store i16 %inc14, i16* %arrayidx13, align 2
  %conv15 = zext i16 %14 to i32
  %call = call i32 @bi_reverse(i32 %conv15, i32 %12)
  %conv16 = trunc i32 %call to i16
  %15 = load i32, i32* %n, align 4
  %16 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %16, i32 %15
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx17, i32 0, i32 0
  %code18 = bitcast %union.anon.5* %fc to i16*
  store i16 %conv16, i16* %code18, align 2
  br label %for.inc19

for.inc19:                                        ; preds = %if.end, %if.then
  %17 = load i32, i32* %n, align 4
  %inc20 = add nsw i32 %17, 1
  store i32 %inc20, i32* %n, align 4
  br label %for.cond4

for.end21:                                        ; preds = %for.cond4
  ret void
}

; Function Attrs: noinline nounwind
define internal void @init_block() #0 {
entry:
  %n = alloca i32, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, 286
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 %1
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 0
  %freq = bitcast %union.anon.5* %fc to i16*
  store i16 0, i16* %freq, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %3 = load i32, i32* %n, align 4
  %cmp2 = icmp slt i32 %3, 30
  br i1 %cmp2, label %for.body3, label %for.end9

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %n, align 4
  %arrayidx4 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 %4
  %fc5 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx4, i32 0, i32 0
  %freq6 = bitcast %union.anon.5* %fc5 to i16*
  store i16 0, i16* %freq6, align 2
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %5 = load i32, i32* %n, align 4
  %inc8 = add nsw i32 %5, 1
  store i32 %inc8, i32* %n, align 4
  br label %for.cond1

for.end9:                                         ; preds = %for.cond1
  store i32 0, i32* %n, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %6 = load i32, i32* %n, align 4
  %cmp11 = icmp slt i32 %6, 19
  br i1 %cmp11, label %for.body12, label %for.end18

for.body12:                                       ; preds = %for.cond10
  %7 = load i32, i32* %n, align 4
  %arrayidx13 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %7
  %fc14 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx13, i32 0, i32 0
  %freq15 = bitcast %union.anon.5* %fc14 to i16*
  store i16 0, i16* %freq15, align 2
  br label %for.inc16

for.inc16:                                        ; preds = %for.body12
  %8 = load i32, i32* %n, align 4
  %inc17 = add nsw i32 %8, 1
  store i32 %inc17, i32* %n, align 4
  br label %for.cond10

for.end18:                                        ; preds = %for.cond10
  store i16 1, i16* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 256, i32 0, i32 0), align 2
  store i32 0, i32* @static_len, align 4
  store i32 0, i32* @opt_len, align 4
  store i32 0, i32* @last_flags, align 4
  store i32 0, i32* @last_dist, align 4
  store i32 0, i32* @last_lit, align 4
  store i8 0, i8* @flags, align 1
  store i8 1, i8* @flag_bit, align 1
  ret void
}

; Function Attrs: noinline nounwind
define i32 @flush_block(i8* %buf, i32 %stored_len, i32 %eof) #0 {
entry:
  %eof.addr = alloca i32, align 4
  %stored_len.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %opt_lenb = alloca i32, align 4
  %static_lenb = alloca i32, align 4
  %max_blindex = alloca i32, align 4
  store i32 %eof, i32* %eof.addr, align 4
  store i32 %stored_len, i32* %stored_len.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  %0 = load i8, i8* @flags, align 1
  %1 = load i32, i32* @last_flags, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i32 0, i32 %1
  store i8 %0, i8* %arrayidx, align 1
  %2 = load i16*, i16** @file_type, align 4
  %3 = load i16, i16* %2, align 2
  %conv = zext i16 %3 to i32
  %cmp = icmp eq i32 %conv, 65535
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @set_file_type()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @build_tree(%struct.tree_desc* @l_desc)
  call void @build_tree(%struct.tree_desc* @d_desc)
  %call = call i32 @build_bl_tree()
  store i32 %call, i32* %max_blindex, align 4
  %4 = load i32, i32* @opt_len, align 4
  %add = add i32 %4, 3
  %add2 = add i32 %add, 7
  %shr = lshr i32 %add2, 3
  store i32 %shr, i32* %opt_lenb, align 4
  %5 = load i32, i32* @static_len, align 4
  %add3 = add i32 %5, 3
  %add4 = add i32 %add3, 7
  %shr5 = lshr i32 %add4, 3
  store i32 %shr5, i32* %static_lenb, align 4
  %6 = load i32, i32* %stored_len.addr, align 4
  %7 = load i32, i32* @input_len, align 4
  %add6 = add i32 %7, %6
  store i32 %add6, i32* @input_len, align 4
  %8 = load i32, i32* %static_lenb, align 4
  %9 = load i32, i32* %opt_lenb, align 4
  %cmp7 = icmp ule i32 %8, %9
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %10 = load i32, i32* %static_lenb, align 4
  store i32 %10, i32* %opt_lenb, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end
  %11 = load i32, i32* %stored_len.addr, align 4
  %12 = load i32, i32* %opt_lenb, align 4
  %cmp11 = icmp ule i32 %11, %12
  br i1 %cmp11, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end10
  %13 = load i32, i32* %eof.addr, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %land.lhs.true13, label %if.else

land.lhs.true13:                                  ; preds = %land.lhs.true
  %14 = load i32, i32* @compressed_len, align 4
  %cmp14 = icmp eq i32 %14, 0
  br i1 %cmp14, label %land.lhs.true16, label %if.else

land.lhs.true16:                                  ; preds = %land.lhs.true13
  br i1 false, label %if.then17, label %if.else

if.then17:                                        ; preds = %land.lhs.true16
  %15 = load i8*, i8** %buf.addr, align 4
  %cmp18 = icmp eq i8* %15, null
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then17
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.86, i32 0, i32 0))
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.then17
  %16 = load i32, i32* %stored_len.addr, align 4
  %17 = load i8*, i8** %buf.addr, align 4
  call void @copy_block(i8* %17, i32 %16, i32 0)
  %18 = load i32, i32* %stored_len.addr, align 4
  %shl = shl i32 %18, 3
  store i32 %shl, i32* @compressed_len, align 4
  %19 = load i32*, i32** @file_method, align 4
  store i32 0, i32* %19, align 4
  br label %if.end51

if.else:                                          ; preds = %land.lhs.true16, %land.lhs.true13, %land.lhs.true, %if.end10
  %20 = load i32, i32* %stored_len.addr, align 4
  %add22 = add i32 %20, 4
  %21 = load i32, i32* %opt_lenb, align 4
  %cmp23 = icmp ule i32 %add22, %21
  br i1 %cmp23, label %land.lhs.true25, label %if.else35

land.lhs.true25:                                  ; preds = %if.else
  %22 = load i8*, i8** %buf.addr, align 4
  %cmp26 = icmp ne i8* %22, null
  br i1 %cmp26, label %if.then28, label %if.else35

if.then28:                                        ; preds = %land.lhs.true25
  %23 = load i32, i32* %eof.addr, align 4
  %add29 = add nsw i32 0, %23
  call void @send_bits(i32 %add29, i32 3)
  %24 = load i32, i32* @compressed_len, align 4
  %add30 = add i32 %24, 3
  %add31 = add i32 %add30, 7
  %and = and i32 %add31, -8
  store i32 %and, i32* @compressed_len, align 4
  %25 = load i32, i32* %stored_len.addr, align 4
  %add32 = add i32 %25, 4
  %shl33 = shl i32 %add32, 3
  %26 = load i32, i32* @compressed_len, align 4
  %add34 = add i32 %26, %shl33
  store i32 %add34, i32* @compressed_len, align 4
  %27 = load i32, i32* %stored_len.addr, align 4
  %28 = load i8*, i8** %buf.addr, align 4
  call void @copy_block(i8* %28, i32 %27, i32 1)
  br label %if.end50

if.else35:                                        ; preds = %land.lhs.true25, %if.else
  %29 = load i32, i32* %static_lenb, align 4
  %30 = load i32, i32* %opt_lenb, align 4
  %cmp36 = icmp eq i32 %29, %30
  br i1 %cmp36, label %if.then38, label %if.else42

if.then38:                                        ; preds = %if.else35
  %31 = load i32, i32* %eof.addr, align 4
  %add39 = add nsw i32 2, %31
  call void @send_bits(i32 %add39, i32 3)
  call void @compress_block(%struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i32 0, i32 0))
  %32 = load i32, i32* @static_len, align 4
  %add40 = add i32 3, %32
  %33 = load i32, i32* @compressed_len, align 4
  %add41 = add i32 %33, %add40
  store i32 %add41, i32* @compressed_len, align 4
  br label %if.end49

if.else42:                                        ; preds = %if.else35
  %34 = load i32, i32* %eof.addr, align 4
  %add43 = add nsw i32 4, %34
  call void @send_bits(i32 %add43, i32 3)
  %35 = load i32, i32* %max_blindex, align 4
  %add44 = add nsw i32 %35, 1
  %36 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @d_desc, i32 0, i32 6), align 4
  %add45 = add nsw i32 %36, 1
  %37 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @l_desc, i32 0, i32 6), align 4
  %add46 = add nsw i32 %37, 1
  call void @send_all_trees(i32 %add46, i32 %add45, i32 %add44)
  call void @compress_block(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 0))
  %38 = load i32, i32* @opt_len, align 4
  %add47 = add i32 3, %38
  %39 = load i32, i32* @compressed_len, align 4
  %add48 = add i32 %39, %add47
  store i32 %add48, i32* @compressed_len, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.else42, %if.then38
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then28
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end21
  call void @init_block()
  %40 = load i32, i32* %eof.addr, align 4
  %tobool52 = icmp ne i32 %40, 0
  br i1 %tobool52, label %if.then53, label %if.end55

if.then53:                                        ; preds = %if.end51
  call void @bi_windup()
  %41 = load i32, i32* @compressed_len, align 4
  %add54 = add i32 %41, 7
  store i32 %add54, i32* @compressed_len, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then53, %if.end51
  %42 = load i32, i32* @compressed_len, align 4
  %shr56 = lshr i32 %42, 3
  ret i32 %shr56
}

; Function Attrs: noinline nounwind
define internal void @set_file_type() #0 {
entry:
  %n = alloca i32, align 4
  %ascii_freq = alloca i32, align 4
  %bin_freq = alloca i32, align 4
  store i32 0, i32* %n, align 4
  store i32 0, i32* %ascii_freq, align 4
  store i32 0, i32* %bin_freq, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %n, align 4
  %arrayidx = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 %1
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 0
  %freq = bitcast %union.anon.5* %fc to i16*
  %2 = load i16, i16* %freq, align 2
  %conv = zext i16 %2 to i32
  %3 = load i32, i32* %bin_freq, align 4
  %add = add i32 %3, %conv
  store i32 %add, i32* %bin_freq, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond1

while.cond1:                                      ; preds = %while.body4, %while.end
  %4 = load i32, i32* %n, align 4
  %cmp2 = icmp slt i32 %4, 128
  br i1 %cmp2, label %while.body4, label %while.end11

while.body4:                                      ; preds = %while.cond1
  %5 = load i32, i32* %n, align 4
  %inc5 = add nsw i32 %5, 1
  store i32 %inc5, i32* %n, align 4
  %arrayidx6 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 %5
  %fc7 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx6, i32 0, i32 0
  %freq8 = bitcast %union.anon.5* %fc7 to i16*
  %6 = load i16, i16* %freq8, align 2
  %conv9 = zext i16 %6 to i32
  %7 = load i32, i32* %ascii_freq, align 4
  %add10 = add i32 %7, %conv9
  store i32 %add10, i32* %ascii_freq, align 4
  br label %while.cond1

while.end11:                                      ; preds = %while.cond1
  br label %while.cond12

while.cond12:                                     ; preds = %while.body15, %while.end11
  %8 = load i32, i32* %n, align 4
  %cmp13 = icmp slt i32 %8, 256
  br i1 %cmp13, label %while.body15, label %while.end22

while.body15:                                     ; preds = %while.cond12
  %9 = load i32, i32* %n, align 4
  %inc16 = add nsw i32 %9, 1
  store i32 %inc16, i32* %n, align 4
  %arrayidx17 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 %9
  %fc18 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx17, i32 0, i32 0
  %freq19 = bitcast %union.anon.5* %fc18 to i16*
  %10 = load i16, i16* %freq19, align 2
  %conv20 = zext i16 %10 to i32
  %11 = load i32, i32* %bin_freq, align 4
  %add21 = add i32 %11, %conv20
  store i32 %add21, i32* %bin_freq, align 4
  br label %while.cond12

while.end22:                                      ; preds = %while.cond12
  %12 = load i32, i32* %bin_freq, align 4
  %13 = load i32, i32* %ascii_freq, align 4
  %shr = lshr i32 %13, 2
  %cmp23 = icmp ugt i32 %12, %shr
  %cond = select i1 %cmp23, i32 0, i32 1
  %conv25 = trunc i32 %cond to i16
  %14 = load i16*, i16** @file_type, align 4
  store i16 %conv25, i16* %14, align 2
  %15 = load i16*, i16** @file_type, align 4
  %16 = load i16, i16* %15, align 2
  %conv26 = zext i16 %16 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end22
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @warn(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2.84, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.85, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.end22
  ret void
}

; Function Attrs: noinline nounwind
define internal void @build_tree(%struct.tree_desc* %desc) #0 {
entry:
  %desc.addr = alloca %struct.tree_desc*, align 4
  %tree = alloca %struct.ct_data*, align 4
  %stree = alloca %struct.ct_data*, align 4
  %elems = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %max_code = alloca i32, align 4
  %node = alloca i32, align 4
  %new = alloca i32, align 4
  store %struct.tree_desc* %desc, %struct.tree_desc** %desc.addr, align 4
  %0 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %dyn_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %0, i32 0, i32 0
  %1 = load %struct.ct_data*, %struct.ct_data** %dyn_tree, align 4
  store %struct.ct_data* %1, %struct.ct_data** %tree, align 4
  %2 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %static_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %2, i32 0, i32 1
  %3 = load %struct.ct_data*, %struct.ct_data** %static_tree, align 4
  store %struct.ct_data* %3, %struct.ct_data** %stree, align 4
  %4 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %elems1 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %4, i32 0, i32 4
  %5 = load i32, i32* %elems1, align 4
  store i32 %5, i32* %elems, align 4
  store i32 -1, i32* %max_code, align 4
  %6 = load i32, i32* %elems, align 4
  store i32 %6, i32* %node, align 4
  store i32 0, i32* @heap_len, align 4
  store i32 573, i32* @heap_max, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %elems, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %10 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx = getelementptr inbounds %struct.ct_data, %struct.ct_data* %10, i32 %9
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 0
  %freq = bitcast %union.anon.5* %fc to i16*
  %11 = load i16, i16* %freq, align 2
  %conv = zext i16 %11 to i32
  %cmp2 = icmp ne i32 %conv, 0
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load i32, i32* %n, align 4
  store i32 %12, i32* %max_code, align 4
  %13 = load i32, i32* @heap_len, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* @heap_len, align 4
  %arrayidx4 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %inc
  store i32 %12, i32* %arrayidx4, align 4
  %14 = load i32, i32* %n, align 4
  %arrayidx5 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %14
  store i8 0, i8* %arrayidx5, align 1
  br label %if.end

if.else:                                          ; preds = %for.body
  %15 = load i32, i32* %n, align 4
  %16 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx6 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %16, i32 %15
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx6, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  store i16 0, i16* %len, align 2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %n, align 4
  %inc7 = add nsw i32 %17, 1
  store i32 %inc7, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end24, %for.end
  %18 = load i32, i32* @heap_len, align 4
  %cmp8 = icmp slt i32 %18, 2
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load i32, i32* %max_code, align 4
  %cmp10 = icmp slt i32 %19, 2
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %20 = load i32, i32* %max_code, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* %max_code, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc12, %cond.true ], [ 0, %cond.false ]
  %21 = load i32, i32* @heap_len, align 4
  %inc13 = add nsw i32 %21, 1
  store i32 %inc13, i32* @heap_len, align 4
  %arrayidx14 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %inc13
  store i32 %cond, i32* %arrayidx14, align 4
  store i32 %cond, i32* %new, align 4
  %22 = load i32, i32* %new, align 4
  %23 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx15 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %23, i32 %22
  %fc16 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx15, i32 0, i32 0
  %freq17 = bitcast %union.anon.5* %fc16 to i16*
  store i16 1, i16* %freq17, align 2
  %24 = load i32, i32* %new, align 4
  %arrayidx18 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %24
  store i8 0, i8* %arrayidx18, align 1
  %25 = load i32, i32* @opt_len, align 4
  %dec = add i32 %25, -1
  store i32 %dec, i32* @opt_len, align 4
  %26 = load %struct.ct_data*, %struct.ct_data** %stree, align 4
  %tobool = icmp ne %struct.ct_data* %26, null
  br i1 %tobool, label %if.then19, label %if.end24

if.then19:                                        ; preds = %cond.end
  %27 = load i32, i32* %new, align 4
  %28 = load %struct.ct_data*, %struct.ct_data** %stree, align 4
  %arrayidx20 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %28, i32 %27
  %dl21 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx20, i32 0, i32 1
  %len22 = bitcast %union.anon.5* %dl21 to i16*
  %29 = load i16, i16* %len22, align 2
  %conv23 = zext i16 %29 to i32
  %30 = load i32, i32* @static_len, align 4
  %sub = sub i32 %30, %conv23
  store i32 %sub, i32* @static_len, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then19, %cond.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %31 = load i32, i32* %max_code, align 4
  %32 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %max_code25 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %32, i32 0, i32 6
  store i32 %31, i32* %max_code25, align 4
  %33 = load i32, i32* @heap_len, align 4
  %div = sdiv i32 %33, 2
  store i32 %div, i32* %n, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc30, %while.end
  %34 = load i32, i32* %n, align 4
  %cmp27 = icmp sge i32 %34, 1
  br i1 %cmp27, label %for.body29, label %for.end32

for.body29:                                       ; preds = %for.cond26
  %35 = load i32, i32* %n, align 4
  %36 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  call void @pqdownheap(%struct.ct_data* %36, i32 %35)
  br label %for.inc30

for.inc30:                                        ; preds = %for.body29
  %37 = load i32, i32* %n, align 4
  %dec31 = add nsw i32 %37, -1
  store i32 %dec31, i32* %n, align 4
  br label %for.cond26

for.end32:                                        ; preds = %for.cond26
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end32
  %38 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i32 0, i32 1), align 4
  store i32 %38, i32* %n, align 4
  %39 = load i32, i32* @heap_len, align 4
  %dec33 = add nsw i32 %39, -1
  store i32 %dec33, i32* @heap_len, align 4
  %arrayidx34 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %39
  %40 = load i32, i32* %arrayidx34, align 4
  store i32 %40, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i32 0, i32 1), align 4
  %41 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  call void @pqdownheap(%struct.ct_data* %41, i32 1)
  %42 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i32 0, i32 1), align 4
  store i32 %42, i32* %m, align 4
  %43 = load i32, i32* %n, align 4
  %44 = load i32, i32* @heap_max, align 4
  %dec35 = add nsw i32 %44, -1
  store i32 %dec35, i32* @heap_max, align 4
  %arrayidx36 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %dec35
  store i32 %43, i32* %arrayidx36, align 4
  %45 = load i32, i32* %m, align 4
  %46 = load i32, i32* @heap_max, align 4
  %dec37 = add nsw i32 %46, -1
  store i32 %dec37, i32* @heap_max, align 4
  %arrayidx38 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %dec37
  store i32 %45, i32* %arrayidx38, align 4
  %47 = load i32, i32* %n, align 4
  %48 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx39 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %48, i32 %47
  %fc40 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx39, i32 0, i32 0
  %freq41 = bitcast %union.anon.5* %fc40 to i16*
  %49 = load i16, i16* %freq41, align 2
  %conv42 = zext i16 %49 to i32
  %50 = load i32, i32* %m, align 4
  %51 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx43 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %51, i32 %50
  %fc44 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx43, i32 0, i32 0
  %freq45 = bitcast %union.anon.5* %fc44 to i16*
  %52 = load i16, i16* %freq45, align 2
  %conv46 = zext i16 %52 to i32
  %add = add nsw i32 %conv42, %conv46
  %conv47 = trunc i32 %add to i16
  %53 = load i32, i32* %node, align 4
  %54 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx48 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %54, i32 %53
  %fc49 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx48, i32 0, i32 0
  %freq50 = bitcast %union.anon.5* %fc49 to i16*
  store i16 %conv47, i16* %freq50, align 2
  %55 = load i32, i32* %n, align 4
  %arrayidx51 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %55
  %56 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %56 to i32
  %57 = load i32, i32* %m, align 4
  %arrayidx53 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %57
  %58 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %58 to i32
  %cmp55 = icmp sge i32 %conv52, %conv54
  br i1 %cmp55, label %cond.true57, label %cond.false60

cond.true57:                                      ; preds = %do.body
  %59 = load i32, i32* %n, align 4
  %arrayidx58 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %59
  %60 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %60 to i32
  br label %cond.end63

cond.false60:                                     ; preds = %do.body
  %61 = load i32, i32* %m, align 4
  %arrayidx61 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %61
  %62 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %62 to i32
  br label %cond.end63

cond.end63:                                       ; preds = %cond.false60, %cond.true57
  %cond64 = phi i32 [ %conv59, %cond.true57 ], [ %conv62, %cond.false60 ]
  %add65 = add nsw i32 %cond64, 1
  %conv66 = trunc i32 %add65 to i8
  %63 = load i32, i32* %node, align 4
  %arrayidx67 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %63
  store i8 %conv66, i8* %arrayidx67, align 1
  %64 = load i32, i32* %node, align 4
  %conv68 = trunc i32 %64 to i16
  %65 = load i32, i32* %m, align 4
  %66 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx69 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %66, i32 %65
  %dl70 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx69, i32 0, i32 1
  %dad = bitcast %union.anon.5* %dl70 to i16*
  store i16 %conv68, i16* %dad, align 2
  %67 = load i32, i32* %n, align 4
  %68 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx71 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %68, i32 %67
  %dl72 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx71, i32 0, i32 1
  %dad73 = bitcast %union.anon.5* %dl72 to i16*
  store i16 %conv68, i16* %dad73, align 2
  %69 = load i32, i32* %node, align 4
  %inc74 = add nsw i32 %69, 1
  store i32 %inc74, i32* %node, align 4
  store i32 %69, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i32 0, i32 1), align 4
  %70 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  call void @pqdownheap(%struct.ct_data* %70, i32 1)
  br label %do.cond

do.cond:                                          ; preds = %cond.end63
  %71 = load i32, i32* @heap_len, align 4
  %cmp75 = icmp sge i32 %71, 2
  br i1 %cmp75, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %72 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i32 0, i32 1), align 4
  %73 = load i32, i32* @heap_max, align 4
  %dec77 = add nsw i32 %73, -1
  store i32 %dec77, i32* @heap_max, align 4
  %arrayidx78 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %dec77
  store i32 %72, i32* %arrayidx78, align 4
  %74 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  call void @gen_bitlen(%struct.tree_desc* %74)
  %75 = load i32, i32* %max_code, align 4
  %76 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  call void @gen_codes(%struct.ct_data* %76, i32 %75)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @pqdownheap(%struct.ct_data* %tree, i32 %k) #0 {
entry:
  %k.addr = alloca i32, align 4
  %tree.addr = alloca %struct.ct_data*, align 4
  %v = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %k, i32* %k.addr, align 4
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 4
  %0 = load i32, i32* %k.addr, align 4
  %arrayidx = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %v, align 4
  %2 = load i32, i32* %k.addr, align 4
  %shl = shl i32 %2, 1
  store i32 %shl, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end66, %entry
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* @heap_len, align 4
  %cmp = icmp sle i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* @heap_len, align 4
  %cmp1 = icmp slt i32 %5, %6
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %7, 1
  %arrayidx2 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %add
  %8 = load i32, i32* %arrayidx2, align 4
  %9 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %9, i32 %8
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx3, i32 0, i32 0
  %freq = bitcast %union.anon.5* %fc to i16*
  %10 = load i16, i16* %freq, align 2
  %conv = zext i16 %10 to i32
  %11 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %13 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx5 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %13, i32 %12
  %fc6 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx5, i32 0, i32 0
  %freq7 = bitcast %union.anon.5* %fc6 to i16*
  %14 = load i16, i16* %freq7, align 2
  %conv8 = zext i16 %14 to i32
  %cmp9 = icmp slt i32 %conv, %conv8
  br i1 %cmp9, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %15 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %15, 1
  %arrayidx12 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %add11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %17, i32 %16
  %fc14 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx13, i32 0, i32 0
  %freq15 = bitcast %union.anon.5* %fc14 to i16*
  %18 = load i16, i16* %freq15, align 2
  %conv16 = zext i16 %18 to i32
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx17, align 4
  %21 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx18 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %21, i32 %20
  %fc19 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx18, i32 0, i32 0
  %freq20 = bitcast %union.anon.5* %fc19 to i16*
  %22 = load i16, i16* %freq20, align 2
  %conv21 = zext i16 %22 to i32
  %cmp22 = icmp eq i32 %conv16, %conv21
  br i1 %cmp22, label %land.lhs.true24, label %if.end

land.lhs.true24:                                  ; preds = %lor.lhs.false
  %23 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %23, 1
  %arrayidx26 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %add25
  %24 = load i32, i32* %arrayidx26, align 4
  %arrayidx27 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %24
  %25 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %25 to i32
  %26 = load i32, i32* %j, align 4
  %arrayidx29 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx29, align 4
  %arrayidx30 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %27
  %28 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %28 to i32
  %cmp32 = icmp sle i32 %conv28, %conv31
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true24, %land.lhs.true
  %29 = load i32, i32* %j, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true24, %lor.lhs.false, %while.body
  %30 = load i32, i32* %v, align 4
  %31 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx34 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %31, i32 %30
  %fc35 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx34, i32 0, i32 0
  %freq36 = bitcast %union.anon.5* %fc35 to i16*
  %32 = load i16, i16* %freq36, align 2
  %conv37 = zext i16 %32 to i32
  %33 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx38, align 4
  %35 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx39 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %35, i32 %34
  %fc40 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx39, i32 0, i32 0
  %freq41 = bitcast %union.anon.5* %fc40 to i16*
  %36 = load i16, i16* %freq41, align 2
  %conv42 = zext i16 %36 to i32
  %cmp43 = icmp slt i32 %conv37, %conv42
  br i1 %cmp43, label %if.then65, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end
  %37 = load i32, i32* %v, align 4
  %38 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx46 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %38, i32 %37
  %fc47 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx46, i32 0, i32 0
  %freq48 = bitcast %union.anon.5* %fc47 to i16*
  %39 = load i16, i16* %freq48, align 2
  %conv49 = zext i16 %39 to i32
  %40 = load i32, i32* %j, align 4
  %arrayidx50 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %40
  %41 = load i32, i32* %arrayidx50, align 4
  %42 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx51 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %42, i32 %41
  %fc52 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx51, i32 0, i32 0
  %freq53 = bitcast %union.anon.5* %fc52 to i16*
  %43 = load i16, i16* %freq53, align 2
  %conv54 = zext i16 %43 to i32
  %cmp55 = icmp eq i32 %conv49, %conv54
  br i1 %cmp55, label %land.lhs.true57, label %if.end66

land.lhs.true57:                                  ; preds = %lor.lhs.false45
  %44 = load i32, i32* %v, align 4
  %arrayidx58 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %44
  %45 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %45 to i32
  %46 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx60, align 4
  %arrayidx61 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i32 0, i32 %47
  %48 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %48 to i32
  %cmp63 = icmp sle i32 %conv59, %conv62
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %land.lhs.true57, %if.end
  br label %while.end

if.end66:                                         ; preds = %land.lhs.true57, %lor.lhs.false45
  %49 = load i32, i32* %j, align 4
  %arrayidx67 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %49
  %50 = load i32, i32* %arrayidx67, align 4
  %51 = load i32, i32* %k.addr, align 4
  %arrayidx68 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %51
  store i32 %50, i32* %arrayidx68, align 4
  %52 = load i32, i32* %j, align 4
  store i32 %52, i32* %k.addr, align 4
  %53 = load i32, i32* %j, align 4
  %shl69 = shl i32 %53, 1
  store i32 %shl69, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then65, %while.cond
  %54 = load i32, i32* %v, align 4
  %55 = load i32, i32* %k.addr, align 4
  %arrayidx70 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %55
  store i32 %54, i32* %arrayidx70, align 4
  ret void
}

; Function Attrs: noinline nounwind
define internal void @gen_bitlen(%struct.tree_desc* %desc) #0 {
entry:
  %desc.addr = alloca %struct.tree_desc*, align 4
  %tree = alloca %struct.ct_data*, align 4
  %extra = alloca i32*, align 4
  %base = alloca i32, align 4
  %max_code = alloca i32, align 4
  %max_length = alloca i32, align 4
  %stree = alloca %struct.ct_data*, align 4
  %h = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %bits = alloca i32, align 4
  %xbits = alloca i32, align 4
  %f = alloca i16, align 2
  %overflow = alloca i32, align 4
  store %struct.tree_desc* %desc, %struct.tree_desc** %desc.addr, align 4
  %0 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %dyn_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %0, i32 0, i32 0
  %1 = load %struct.ct_data*, %struct.ct_data** %dyn_tree, align 4
  store %struct.ct_data* %1, %struct.ct_data** %tree, align 4
  %2 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %extra_bits = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %2, i32 0, i32 2
  %3 = load i32*, i32** %extra_bits, align 4
  store i32* %3, i32** %extra, align 4
  %4 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %extra_base = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %4, i32 0, i32 3
  %5 = load i32, i32* %extra_base, align 4
  store i32 %5, i32* %base, align 4
  %6 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %max_code1 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %6, i32 0, i32 6
  %7 = load i32, i32* %max_code1, align 4
  store i32 %7, i32* %max_code, align 4
  %8 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %max_length2 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %8, i32 0, i32 5
  %9 = load i32, i32* %max_length2, align 4
  store i32 %9, i32* %max_length, align 4
  %10 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 4
  %static_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %10, i32 0, i32 1
  %11 = load %struct.ct_data*, %struct.ct_data** %static_tree, align 4
  store %struct.ct_data* %11, %struct.ct_data** %stree, align 4
  store i32 0, i32* %overflow, align 4
  store i32 0, i32* %bits, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32, i32* %bits, align 4
  %cmp = icmp sle i32 %12, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %bits, align 4
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %13
  store i16 0, i16* %arrayidx, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %bits, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %bits, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* @heap_max, align 4
  %arrayidx3 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx3, align 4
  %17 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx4 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %17, i32 %16
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx4, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  store i16 0, i16* %len, align 2
  %18 = load i32, i32* @heap_max, align 4
  %add = add nsw i32 %18, 1
  store i32 %add, i32* %h, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc47, %for.end
  %19 = load i32, i32* %h, align 4
  %cmp6 = icmp slt i32 %19, 573
  br i1 %cmp6, label %for.body7, label %for.end49

for.body7:                                        ; preds = %for.cond5
  %20 = load i32, i32* %h, align 4
  %arrayidx8 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx8, align 4
  store i32 %21, i32* %n, align 4
  %22 = load i32, i32* %n, align 4
  %23 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx9 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %23, i32 %22
  %dl10 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx9, i32 0, i32 1
  %dad = bitcast %union.anon.5* %dl10 to i16*
  %24 = load i16, i16* %dad, align 2
  %idxprom = zext i16 %24 to i32
  %25 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx11 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %25, i32 %idxprom
  %dl12 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx11, i32 0, i32 1
  %len13 = bitcast %union.anon.5* %dl12 to i16*
  %26 = load i16, i16* %len13, align 2
  %conv = zext i16 %26 to i32
  %add14 = add nsw i32 %conv, 1
  store i32 %add14, i32* %bits, align 4
  %27 = load i32, i32* %bits, align 4
  %28 = load i32, i32* %max_length, align 4
  %cmp15 = icmp sgt i32 %27, %28
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %29 = load i32, i32* %max_length, align 4
  store i32 %29, i32* %bits, align 4
  %30 = load i32, i32* %overflow, align 4
  %inc17 = add nsw i32 %30, 1
  store i32 %inc17, i32* %overflow, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  %31 = load i32, i32* %bits, align 4
  %conv18 = trunc i32 %31 to i16
  %32 = load i32, i32* %n, align 4
  %33 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx19 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %33, i32 %32
  %dl20 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx19, i32 0, i32 1
  %len21 = bitcast %union.anon.5* %dl20 to i16*
  store i16 %conv18, i16* %len21, align 2
  %34 = load i32, i32* %n, align 4
  %35 = load i32, i32* %max_code, align 4
  %cmp22 = icmp sgt i32 %34, %35
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end
  br label %for.inc47

if.end25:                                         ; preds = %if.end
  %36 = load i32, i32* %bits, align 4
  %arrayidx26 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %36
  %37 = load i16, i16* %arrayidx26, align 2
  %inc27 = add i16 %37, 1
  store i16 %inc27, i16* %arrayidx26, align 2
  store i32 0, i32* %xbits, align 4
  %38 = load i32, i32* %n, align 4
  %39 = load i32, i32* %base, align 4
  %cmp28 = icmp sge i32 %38, %39
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end25
  %40 = load i32, i32* %n, align 4
  %41 = load i32, i32* %base, align 4
  %sub = sub nsw i32 %40, %41
  %42 = load i32*, i32** %extra, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %42, i32 %sub
  %43 = load i32, i32* %arrayidx31, align 4
  store i32 %43, i32* %xbits, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end25
  %44 = load i32, i32* %n, align 4
  %45 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx33 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %45, i32 %44
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx33, i32 0, i32 0
  %freq = bitcast %union.anon.5* %fc to i16*
  %46 = load i16, i16* %freq, align 2
  store i16 %46, i16* %f, align 2
  %47 = load i16, i16* %f, align 2
  %conv34 = zext i16 %47 to i32
  %48 = load i32, i32* %bits, align 4
  %49 = load i32, i32* %xbits, align 4
  %add35 = add nsw i32 %48, %49
  %mul = mul i32 %conv34, %add35
  %50 = load i32, i32* @opt_len, align 4
  %add36 = add i32 %50, %mul
  store i32 %add36, i32* @opt_len, align 4
  %51 = load %struct.ct_data*, %struct.ct_data** %stree, align 4
  %tobool = icmp ne %struct.ct_data* %51, null
  br i1 %tobool, label %if.then37, label %if.end46

if.then37:                                        ; preds = %if.end32
  %52 = load i16, i16* %f, align 2
  %conv38 = zext i16 %52 to i32
  %53 = load i32, i32* %n, align 4
  %54 = load %struct.ct_data*, %struct.ct_data** %stree, align 4
  %arrayidx39 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %54, i32 %53
  %dl40 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx39, i32 0, i32 1
  %len41 = bitcast %union.anon.5* %dl40 to i16*
  %55 = load i16, i16* %len41, align 2
  %conv42 = zext i16 %55 to i32
  %56 = load i32, i32* %xbits, align 4
  %add43 = add nsw i32 %conv42, %56
  %mul44 = mul i32 %conv38, %add43
  %57 = load i32, i32* @static_len, align 4
  %add45 = add i32 %57, %mul44
  store i32 %add45, i32* @static_len, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then37, %if.end32
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46, %if.then24
  %58 = load i32, i32* %h, align 4
  %inc48 = add nsw i32 %58, 1
  store i32 %inc48, i32* %h, align 4
  br label %for.cond5

for.end49:                                        ; preds = %for.cond5
  %59 = load i32, i32* %overflow, align 4
  %cmp50 = icmp eq i32 %59, 0
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %for.end49
  br label %for.end114

if.end53:                                         ; preds = %for.end49
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end53
  %60 = load i32, i32* %max_length, align 4
  %sub54 = sub nsw i32 %60, 1
  store i32 %sub54, i32* %bits, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.body
  %61 = load i32, i32* %bits, align 4
  %arrayidx55 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %61
  %62 = load i16, i16* %arrayidx55, align 2
  %conv56 = zext i16 %62 to i32
  %cmp57 = icmp eq i32 %conv56, 0
  br i1 %cmp57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %63 = load i32, i32* %bits, align 4
  %dec = add nsw i32 %63, -1
  store i32 %dec, i32* %bits, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %64 = load i32, i32* %bits, align 4
  %arrayidx59 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %64
  %65 = load i16, i16* %arrayidx59, align 2
  %dec60 = add i16 %65, -1
  store i16 %dec60, i16* %arrayidx59, align 2
  %66 = load i32, i32* %bits, align 4
  %add61 = add nsw i32 %66, 1
  %arrayidx62 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %add61
  %67 = load i16, i16* %arrayidx62, align 2
  %conv63 = zext i16 %67 to i32
  %add64 = add nsw i32 %conv63, 2
  %conv65 = trunc i32 %add64 to i16
  store i16 %conv65, i16* %arrayidx62, align 2
  %68 = load i32, i32* %max_length, align 4
  %arrayidx66 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %68
  %69 = load i16, i16* %arrayidx66, align 2
  %dec67 = add i16 %69, -1
  store i16 %dec67, i16* %arrayidx66, align 2
  %70 = load i32, i32* %overflow, align 4
  %sub68 = sub nsw i32 %70, 2
  store i32 %sub68, i32* %overflow, align 4
  br label %do.cond

do.cond:                                          ; preds = %while.end
  %71 = load i32, i32* %overflow, align 4
  %cmp69 = icmp sgt i32 %71, 0
  br i1 %cmp69, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %72 = load i32, i32* %max_length, align 4
  store i32 %72, i32* %bits, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.inc112, %do.end
  %73 = load i32, i32* %bits, align 4
  %cmp72 = icmp ne i32 %73, 0
  br i1 %cmp72, label %for.body74, label %for.end114

for.body74:                                       ; preds = %for.cond71
  %74 = load i32, i32* %bits, align 4
  %arrayidx75 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i32 0, i32 %74
  %75 = load i16, i16* %arrayidx75, align 2
  %conv76 = zext i16 %75 to i32
  store i32 %conv76, i32* %n, align 4
  br label %while.cond77

while.cond77:                                     ; preds = %if.end109, %if.then85, %for.body74
  %76 = load i32, i32* %n, align 4
  %cmp78 = icmp ne i32 %76, 0
  br i1 %cmp78, label %while.body80, label %while.end111

while.body80:                                     ; preds = %while.cond77
  %77 = load i32, i32* %h, align 4
  %dec81 = add nsw i32 %77, -1
  store i32 %dec81, i32* %h, align 4
  %arrayidx82 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i32 0, i32 %dec81
  %78 = load i32, i32* %arrayidx82, align 4
  store i32 %78, i32* %m, align 4
  %79 = load i32, i32* %m, align 4
  %80 = load i32, i32* %max_code, align 4
  %cmp83 = icmp sgt i32 %79, %80
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %while.body80
  br label %while.cond77

if.end86:                                         ; preds = %while.body80
  %81 = load i32, i32* %m, align 4
  %82 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx87 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %82, i32 %81
  %dl88 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx87, i32 0, i32 1
  %len89 = bitcast %union.anon.5* %dl88 to i16*
  %83 = load i16, i16* %len89, align 2
  %conv90 = zext i16 %83 to i32
  %84 = load i32, i32* %bits, align 4
  %cmp91 = icmp ne i32 %conv90, %84
  br i1 %cmp91, label %if.then93, label %if.end109

if.then93:                                        ; preds = %if.end86
  %85 = load i32, i32* %bits, align 4
  %86 = load i32, i32* %m, align 4
  %87 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx94 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %87, i32 %86
  %dl95 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx94, i32 0, i32 1
  %len96 = bitcast %union.anon.5* %dl95 to i16*
  %88 = load i16, i16* %len96, align 2
  %conv97 = zext i16 %88 to i32
  %sub98 = sub nsw i32 %85, %conv97
  %89 = load i32, i32* %m, align 4
  %90 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx99 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %90, i32 %89
  %fc100 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx99, i32 0, i32 0
  %freq101 = bitcast %union.anon.5* %fc100 to i16*
  %91 = load i16, i16* %freq101, align 2
  %conv102 = zext i16 %91 to i32
  %mul103 = mul nsw i32 %sub98, %conv102
  %92 = load i32, i32* @opt_len, align 4
  %add104 = add i32 %92, %mul103
  store i32 %add104, i32* @opt_len, align 4
  %93 = load i32, i32* %bits, align 4
  %conv105 = trunc i32 %93 to i16
  %94 = load i32, i32* %m, align 4
  %95 = load %struct.ct_data*, %struct.ct_data** %tree, align 4
  %arrayidx106 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %95, i32 %94
  %dl107 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx106, i32 0, i32 1
  %len108 = bitcast %union.anon.5* %dl107 to i16*
  store i16 %conv105, i16* %len108, align 2
  br label %if.end109

if.end109:                                        ; preds = %if.then93, %if.end86
  %96 = load i32, i32* %n, align 4
  %dec110 = add nsw i32 %96, -1
  store i32 %dec110, i32* %n, align 4
  br label %while.cond77

while.end111:                                     ; preds = %while.cond77
  br label %for.inc112

for.inc112:                                       ; preds = %while.end111
  %97 = load i32, i32* %bits, align 4
  %dec113 = add nsw i32 %97, -1
  store i32 %dec113, i32* %bits, align 4
  br label %for.cond71

for.end114:                                       ; preds = %for.cond71, %if.then52
  ret void
}

; Function Attrs: noinline nounwind
define internal i32 @build_bl_tree() #0 {
entry:
  %max_blindex = alloca i32, align 4
  %0 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @l_desc, i32 0, i32 6), align 4
  call void @scan_tree(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @d_desc, i32 0, i32 6), align 4
  call void @scan_tree(%struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 0), i32 %1)
  call void @build_tree(%struct.tree_desc* @bl_desc)
  store i32 18, i32* %max_blindex, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %max_blindex, align 4
  %cmp = icmp sge i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %max_blindex, align 4
  %arrayidx = getelementptr inbounds [19 x i8], [19 x i8]* @bl_order, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %idxprom = zext i8 %4 to i32
  %arrayidx1 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %idxprom
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx1, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  %5 = load i16, i16* %len, align 2
  %conv = zext i16 %5 to i32
  %cmp2 = icmp ne i32 %conv, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %max_blindex, align 4
  %dec = add nsw i32 %6, -1
  store i32 %dec, i32* %max_blindex, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %7 = load i32, i32* %max_blindex, align 4
  %add = add nsw i32 %7, 1
  %mul = mul nsw i32 3, %add
  %add4 = add nsw i32 %mul, 5
  %add5 = add nsw i32 %add4, 5
  %add6 = add nsw i32 %add5, 4
  %8 = load i32, i32* @opt_len, align 4
  %add7 = add i32 %8, %add6
  store i32 %add7, i32* @opt_len, align 4
  %9 = load i32, i32* %max_blindex, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind
define internal void @scan_tree(%struct.ct_data* %tree, i32 %max_code) #0 {
entry:
  %max_code.addr = alloca i32, align 4
  %tree.addr = alloca %struct.ct_data*, align 4
  %n = alloca i32, align 4
  %prevlen = alloca i32, align 4
  %curlen = alloca i32, align 4
  %nextlen = alloca i32, align 4
  %count = alloca i32, align 4
  %max_count = alloca i32, align 4
  %min_count = alloca i32, align 4
  store i32 %max_code, i32* %max_code.addr, align 4
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 4
  store i32 -1, i32* %prevlen, align 4
  %0 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx = getelementptr inbounds %struct.ct_data, %struct.ct_data* %0, i32 0
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  %1 = load i16, i16* %len, align 2
  %conv = zext i16 %1 to i32
  store i32 %conv, i32* %nextlen, align 4
  store i32 0, i32* %count, align 4
  store i32 7, i32* %max_count, align 4
  store i32 4, i32* %min_count, align 4
  %2 = load i32, i32* %nextlen, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 138, i32* %max_count, align 4
  store i32 3, i32* %min_count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %max_code.addr, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %4, i32 %add
  %dl3 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx2, i32 0, i32 1
  %len4 = bitcast %union.anon.5* %dl3 to i16*
  store i16 -1, i16* %len4, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %n, align 4
  %6 = load i32, i32* %max_code.addr, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %nextlen, align 4
  store i32 %7, i32* %curlen, align 4
  %8 = load i32, i32* %n, align 4
  %add7 = add nsw i32 %8, 1
  %9 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx8 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %9, i32 %add7
  %dl9 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx8, i32 0, i32 1
  %len10 = bitcast %union.anon.5* %dl9 to i16*
  %10 = load i16, i16* %len10, align 2
  %conv11 = zext i16 %10 to i32
  store i32 %conv11, i32* %nextlen, align 4
  %11 = load i32, i32* %count, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %count, align 4
  %12 = load i32, i32* %max_count, align 4
  %cmp12 = icmp slt i32 %inc, %12
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %13 = load i32, i32* %curlen, align 4
  %14 = load i32, i32* %nextlen, align 4
  %cmp14 = icmp eq i32 %13, %14
  br i1 %cmp14, label %if.then16, label %if.else

if.then16:                                        ; preds = %land.lhs.true
  br label %for.inc

if.else:                                          ; preds = %land.lhs.true, %for.body
  %15 = load i32, i32* %count, align 4
  %16 = load i32, i32* %min_count, align 4
  %cmp17 = icmp slt i32 %15, %16
  br i1 %cmp17, label %if.then19, label %if.else24

if.then19:                                        ; preds = %if.else
  %17 = load i32, i32* %count, align 4
  %18 = load i32, i32* %curlen, align 4
  %arrayidx20 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %18
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx20, i32 0, i32 0
  %freq = bitcast %union.anon.5* %fc to i16*
  %19 = load i16, i16* %freq, align 2
  %conv21 = zext i16 %19 to i32
  %add22 = add nsw i32 %conv21, %17
  %conv23 = trunc i32 %add22 to i16
  store i16 %conv23, i16* %freq, align 2
  br label %if.end46

if.else24:                                        ; preds = %if.else
  %20 = load i32, i32* %curlen, align 4
  %cmp25 = icmp ne i32 %20, 0
  br i1 %cmp25, label %if.then27, label %if.else37

if.then27:                                        ; preds = %if.else24
  %21 = load i32, i32* %curlen, align 4
  %22 = load i32, i32* %prevlen, align 4
  %cmp28 = icmp ne i32 %21, %22
  br i1 %cmp28, label %if.then30, label %if.end35

if.then30:                                        ; preds = %if.then27
  %23 = load i32, i32* %curlen, align 4
  %arrayidx31 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %23
  %fc32 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx31, i32 0, i32 0
  %freq33 = bitcast %union.anon.5* %fc32 to i16*
  %24 = load i16, i16* %freq33, align 2
  %inc34 = add i16 %24, 1
  store i16 %inc34, i16* %freq33, align 2
  br label %if.end35

if.end35:                                         ; preds = %if.then30, %if.then27
  %25 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 16, i32 0, i32 0), align 2
  %inc36 = add i16 %25, 1
  store i16 %inc36, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 16, i32 0, i32 0), align 2
  br label %if.end45

if.else37:                                        ; preds = %if.else24
  %26 = load i32, i32* %count, align 4
  %cmp38 = icmp sle i32 %26, 10
  br i1 %cmp38, label %if.then40, label %if.else42

if.then40:                                        ; preds = %if.else37
  %27 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 17, i32 0, i32 0), align 2
  %inc41 = add i16 %27, 1
  store i16 %inc41, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 17, i32 0, i32 0), align 2
  br label %if.end44

if.else42:                                        ; preds = %if.else37
  %28 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 18, i32 0, i32 0), align 2
  %inc43 = add i16 %28, 1
  store i16 %inc43, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 18, i32 0, i32 0), align 2
  br label %if.end44

if.end44:                                         ; preds = %if.else42, %if.then40
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end35
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then19
  br label %if.end47

if.end47:                                         ; preds = %if.end46
  store i32 0, i32* %count, align 4
  %29 = load i32, i32* %curlen, align 4
  store i32 %29, i32* %prevlen, align 4
  %30 = load i32, i32* %nextlen, align 4
  %cmp48 = icmp eq i32 %30, 0
  br i1 %cmp48, label %if.then50, label %if.else51

if.then50:                                        ; preds = %if.end47
  store i32 138, i32* %max_count, align 4
  store i32 3, i32* %min_count, align 4
  br label %if.end57

if.else51:                                        ; preds = %if.end47
  %31 = load i32, i32* %curlen, align 4
  %32 = load i32, i32* %nextlen, align 4
  %cmp52 = icmp eq i32 %31, %32
  br i1 %cmp52, label %if.then54, label %if.else55

if.then54:                                        ; preds = %if.else51
  store i32 6, i32* %max_count, align 4
  store i32 3, i32* %min_count, align 4
  br label %if.end56

if.else55:                                        ; preds = %if.else51
  store i32 7, i32* %max_count, align 4
  store i32 4, i32* %min_count, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.else55, %if.then54
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then50
  br label %for.inc

for.inc:                                          ; preds = %if.end57, %if.then16
  %33 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %33, 1
  store i32 %inc58, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind
define internal void @compress_block(%struct.ct_data* %ltree, %struct.ct_data* %dtree) #0 {
entry:
  %dtree.addr = alloca %struct.ct_data*, align 4
  %ltree.addr = alloca %struct.ct_data*, align 4
  %dist = alloca i32, align 4
  %lc = alloca i32, align 4
  %lx = alloca i32, align 4
  %dx = alloca i32, align 4
  %fx = alloca i32, align 4
  %flag = alloca i8, align 1
  %code = alloca i32, align 4
  %extra = alloca i32, align 4
  store %struct.ct_data* %dtree, %struct.ct_data** %dtree.addr, align 4
  store %struct.ct_data* %ltree, %struct.ct_data** %ltree.addr, align 4
  store i32 0, i32* %lx, align 4
  store i32 0, i32* %dx, align 4
  store i32 0, i32* %fx, align 4
  store i8 0, i8* %flag, align 1
  %0 = load i32, i32* @last_lit, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end65

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %1 = load i32, i32* %lx, align 4
  %and = and i32 %1, 7
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %do.body
  %2 = load i32, i32* %fx, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %fx, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  store i8 %3, i8* %flag, align 1
  br label %if.end

if.end:                                           ; preds = %if.then2, %do.body
  %4 = load i32, i32* %lx, align 4
  %inc3 = add i32 %4, 1
  store i32 %inc3, i32* %lx, align 4
  %arrayidx4 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %4
  %5 = load i8, i8* %arrayidx4, align 1
  %conv = zext i8 %5 to i32
  store i32 %conv, i32* %lc, align 4
  %6 = load i8, i8* %flag, align 1
  %conv5 = zext i8 %6 to i32
  %and6 = and i32 %conv5, 1
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  %7 = load i32, i32* %lc, align 4
  %8 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 4
  %arrayidx10 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %8, i32 %7
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx10, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  %9 = load i16, i16* %len, align 2
  %conv11 = zext i16 %9 to i32
  %10 = load i32, i32* %lc, align 4
  %11 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %11, i32 %10
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx12, i32 0, i32 0
  %code13 = bitcast %union.anon.5* %fc to i16*
  %12 = load i16, i16* %code13, align 2
  %conv14 = zext i16 %12 to i32
  call void @send_bits(i32 %conv14, i32 %conv11)
  br label %if.end59

if.else:                                          ; preds = %if.end
  %13 = load i32, i32* %lc, align 4
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %14 to i32
  store i32 %conv16, i32* %code, align 4
  %15 = load i32, i32* %code, align 4
  %add = add i32 %15, 256
  %add17 = add i32 %add, 1
  %16 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 4
  %arrayidx18 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %16, i32 %add17
  %dl19 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx18, i32 0, i32 1
  %len20 = bitcast %union.anon.5* %dl19 to i16*
  %17 = load i16, i16* %len20, align 2
  %conv21 = zext i16 %17 to i32
  %18 = load i32, i32* %code, align 4
  %add22 = add i32 %18, 256
  %add23 = add i32 %add22, 1
  %19 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %19, i32 %add23
  %fc25 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx24, i32 0, i32 0
  %code26 = bitcast %union.anon.5* %fc25 to i16*
  %20 = load i16, i16* %code26, align 2
  %conv27 = zext i16 %20 to i32
  call void @send_bits(i32 %conv27, i32 %conv21)
  %21 = load i32, i32* %code, align 4
  %arrayidx28 = getelementptr inbounds [29 x i32], [29 x i32]* @extra_lbits, i32 0, i32 %21
  %22 = load i32, i32* %arrayidx28, align 4
  store i32 %22, i32* %extra, align 4
  %23 = load i32, i32* %extra, align 4
  %cmp29 = icmp ne i32 %23, 0
  br i1 %cmp29, label %if.then31, label %if.end33

if.then31:                                        ; preds = %if.else
  %24 = load i32, i32* %code, align 4
  %arrayidx32 = getelementptr inbounds [29 x i32], [29 x i32]* @base_length, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx32, align 4
  %26 = load i32, i32* %lc, align 4
  %sub = sub nsw i32 %26, %25
  store i32 %sub, i32* %lc, align 4
  %27 = load i32, i32* %extra, align 4
  %28 = load i32, i32* %lc, align 4
  call void @send_bits(i32 %28, i32 %27)
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %if.else
  %29 = load i32, i32* %dx, align 4
  %inc34 = add i32 %29, 1
  store i32 %inc34, i32* %dx, align 4
  %arrayidx35 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i32 0, i32 %29
  %30 = load i16, i16* %arrayidx35, align 2
  %conv36 = zext i16 %30 to i32
  store i32 %conv36, i32* %dist, align 4
  %31 = load i32, i32* %dist, align 4
  %cmp37 = icmp ult i32 %31, 256
  br i1 %cmp37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end33
  %32 = load i32, i32* %dist, align 4
  %arrayidx39 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i32 0, i32 %32
  %33 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %33 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end33
  %34 = load i32, i32* %dist, align 4
  %shr = lshr i32 %34, 7
  %add41 = add i32 256, %shr
  %arrayidx42 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i32 0, i32 %add41
  %35 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %35 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv40, %cond.true ], [ %conv43, %cond.false ]
  store i32 %cond, i32* %code, align 4
  %36 = load i32, i32* %code, align 4
  %37 = load %struct.ct_data*, %struct.ct_data** %dtree.addr, align 4
  %arrayidx44 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %37, i32 %36
  %dl45 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx44, i32 0, i32 1
  %len46 = bitcast %union.anon.5* %dl45 to i16*
  %38 = load i16, i16* %len46, align 2
  %conv47 = zext i16 %38 to i32
  %39 = load i32, i32* %code, align 4
  %40 = load %struct.ct_data*, %struct.ct_data** %dtree.addr, align 4
  %arrayidx48 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %40, i32 %39
  %fc49 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx48, i32 0, i32 0
  %code50 = bitcast %union.anon.5* %fc49 to i16*
  %41 = load i16, i16* %code50, align 2
  %conv51 = zext i16 %41 to i32
  call void @send_bits(i32 %conv51, i32 %conv47)
  %42 = load i32, i32* %code, align 4
  %arrayidx52 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i32 0, i32 %42
  %43 = load i32, i32* %arrayidx52, align 4
  store i32 %43, i32* %extra, align 4
  %44 = load i32, i32* %extra, align 4
  %cmp53 = icmp ne i32 %44, 0
  br i1 %cmp53, label %if.then55, label %if.end58

if.then55:                                        ; preds = %cond.end
  %45 = load i32, i32* %code, align 4
  %arrayidx56 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i32 0, i32 %45
  %46 = load i32, i32* %arrayidx56, align 4
  %47 = load i32, i32* %dist, align 4
  %sub57 = sub i32 %47, %46
  store i32 %sub57, i32* %dist, align 4
  %48 = load i32, i32* %extra, align 4
  %49 = load i32, i32* %dist, align 4
  call void @send_bits(i32 %49, i32 %48)
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %cond.end
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then9
  %50 = load i8, i8* %flag, align 1
  %conv60 = zext i8 %50 to i32
  %shr61 = ashr i32 %conv60, 1
  %conv62 = trunc i32 %shr61 to i8
  store i8 %conv62, i8* %flag, align 1
  br label %do.cond

do.cond:                                          ; preds = %if.end59
  %51 = load i32, i32* %lx, align 4
  %52 = load i32, i32* @last_lit, align 4
  %cmp63 = icmp ult i32 %51, %52
  br i1 %cmp63, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end65

if.end65:                                         ; preds = %do.end, %entry
  %53 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 4
  %arrayidx66 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %53, i32 256
  %dl67 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx66, i32 0, i32 1
  %len68 = bitcast %union.anon.5* %dl67 to i16*
  %54 = load i16, i16* %len68, align 2
  %conv69 = zext i16 %54 to i32
  %55 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 4
  %arrayidx70 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %55, i32 256
  %fc71 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx70, i32 0, i32 0
  %code72 = bitcast %union.anon.5* %fc71 to i16*
  %56 = load i16, i16* %code72, align 2
  %conv73 = zext i16 %56 to i32
  call void @send_bits(i32 %conv73, i32 %conv69)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @send_all_trees(i32 %lcodes, i32 %dcodes, i32 %blcodes) #0 {
entry:
  %blcodes.addr = alloca i32, align 4
  %dcodes.addr = alloca i32, align 4
  %lcodes.addr = alloca i32, align 4
  %rank = alloca i32, align 4
  store i32 %blcodes, i32* %blcodes.addr, align 4
  store i32 %dcodes, i32* %dcodes.addr, align 4
  store i32 %lcodes, i32* %lcodes.addr, align 4
  %0 = load i32, i32* %lcodes.addr, align 4
  %sub = sub nsw i32 %0, 257
  call void @send_bits(i32 %sub, i32 5)
  %1 = load i32, i32* %dcodes.addr, align 4
  %sub1 = sub nsw i32 %1, 1
  call void @send_bits(i32 %sub1, i32 5)
  %2 = load i32, i32* %blcodes.addr, align 4
  %sub2 = sub nsw i32 %2, 4
  call void @send_bits(i32 %sub2, i32 4)
  store i32 0, i32* %rank, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %rank, align 4
  %4 = load i32, i32* %blcodes.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %rank, align 4
  %arrayidx = getelementptr inbounds [19 x i8], [19 x i8]* @bl_order, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %idxprom = zext i8 %6 to i32
  %arrayidx3 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %idxprom
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx3, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  %7 = load i16, i16* %len, align 2
  %conv = zext i16 %7 to i32
  call void @send_bits(i32 %conv, i32 3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %rank, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %rank, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %lcodes.addr, align 4
  %sub4 = sub nsw i32 %9, 1
  call void @send_tree(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 0), i32 %sub4)
  %10 = load i32, i32* %dcodes.addr, align 4
  %sub5 = sub nsw i32 %10, 1
  call void @send_tree(%struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 0), i32 %sub5)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @send_tree(%struct.ct_data* %tree, i32 %max_code) #0 {
entry:
  %max_code.addr = alloca i32, align 4
  %tree.addr = alloca %struct.ct_data*, align 4
  %n = alloca i32, align 4
  %prevlen = alloca i32, align 4
  %curlen = alloca i32, align 4
  %nextlen = alloca i32, align 4
  %count = alloca i32, align 4
  %max_count = alloca i32, align 4
  %min_count = alloca i32, align 4
  store i32 %max_code, i32* %max_code.addr, align 4
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 4
  store i32 -1, i32* %prevlen, align 4
  %0 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx = getelementptr inbounds %struct.ct_data, %struct.ct_data* %0, i32 0
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 1
  %len = bitcast %union.anon.5* %dl to i16*
  %1 = load i16, i16* %len, align 2
  %conv = zext i16 %1 to i32
  store i32 %conv, i32* %nextlen, align 4
  store i32 0, i32* %count, align 4
  store i32 7, i32* %max_count, align 4
  store i32 4, i32* %min_count, align 4
  %2 = load i32, i32* %nextlen, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 138, i32* %max_count, align 4
  store i32 3, i32* %min_count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %n, align 4
  %4 = load i32, i32* %max_code.addr, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %nextlen, align 4
  store i32 %5, i32* %curlen, align 4
  %6 = load i32, i32* %n, align 4
  %add = add nsw i32 %6, 1
  %7 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %7, i32 %add
  %dl5 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx4, i32 0, i32 1
  %len6 = bitcast %union.anon.5* %dl5 to i16*
  %8 = load i16, i16* %len6, align 2
  %conv7 = zext i16 %8 to i32
  store i32 %conv7, i32* %nextlen, align 4
  %9 = load i32, i32* %count, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %count, align 4
  %10 = load i32, i32* %max_count, align 4
  %cmp8 = icmp slt i32 %inc, %10
  br i1 %cmp8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %11 = load i32, i32* %curlen, align 4
  %12 = load i32, i32* %nextlen, align 4
  %cmp10 = icmp eq i32 %11, %12
  br i1 %cmp10, label %if.then12, label %if.else

if.then12:                                        ; preds = %land.lhs.true
  br label %for.inc

if.else:                                          ; preds = %land.lhs.true, %for.body
  %13 = load i32, i32* %count, align 4
  %14 = load i32, i32* %min_count, align 4
  %cmp13 = icmp slt i32 %13, %14
  br i1 %cmp13, label %if.then15, label %if.else24

if.then15:                                        ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then15
  %15 = load i32, i32* %curlen, align 4
  %arrayidx16 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %15
  %dl17 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx16, i32 0, i32 1
  %len18 = bitcast %union.anon.5* %dl17 to i16*
  %16 = load i16, i16* %len18, align 2
  %conv19 = zext i16 %16 to i32
  %17 = load i32, i32* %curlen, align 4
  %arrayidx20 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %17
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx20, i32 0, i32 0
  %code = bitcast %union.anon.5* %fc to i16*
  %18 = load i16, i16* %code, align 2
  %conv21 = zext i16 %18 to i32
  call void @send_bits(i32 %conv21, i32 %conv19)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %19 = load i32, i32* %count, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %count, align 4
  %cmp22 = icmp ne i32 %dec, 0
  br i1 %cmp22, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end56

if.else24:                                        ; preds = %if.else
  %20 = load i32, i32* %curlen, align 4
  %cmp25 = icmp ne i32 %20, 0
  br i1 %cmp25, label %if.then27, label %if.else43

if.then27:                                        ; preds = %if.else24
  %21 = load i32, i32* %curlen, align 4
  %22 = load i32, i32* %prevlen, align 4
  %cmp28 = icmp ne i32 %21, %22
  br i1 %cmp28, label %if.then30, label %if.end40

if.then30:                                        ; preds = %if.then27
  %23 = load i32, i32* %curlen, align 4
  %arrayidx31 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %23
  %dl32 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx31, i32 0, i32 1
  %len33 = bitcast %union.anon.5* %dl32 to i16*
  %24 = load i16, i16* %len33, align 2
  %conv34 = zext i16 %24 to i32
  %25 = load i32, i32* %curlen, align 4
  %arrayidx35 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 %25
  %fc36 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx35, i32 0, i32 0
  %code37 = bitcast %union.anon.5* %fc36 to i16*
  %26 = load i16, i16* %code37, align 2
  %conv38 = zext i16 %26 to i32
  call void @send_bits(i32 %conv38, i32 %conv34)
  %27 = load i32, i32* %count, align 4
  %dec39 = add nsw i32 %27, -1
  store i32 %dec39, i32* %count, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then30, %if.then27
  %28 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 16, i32 1, i32 0), align 2
  %conv41 = zext i16 %28 to i32
  %29 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 16, i32 0, i32 0), align 2
  %conv42 = zext i16 %29 to i32
  call void @send_bits(i32 %conv42, i32 %conv41)
  %30 = load i32, i32* %count, align 4
  %sub = sub nsw i32 %30, 3
  call void @send_bits(i32 %sub, i32 2)
  br label %if.end55

if.else43:                                        ; preds = %if.else24
  %31 = load i32, i32* %count, align 4
  %cmp44 = icmp sle i32 %31, 10
  br i1 %cmp44, label %if.then46, label %if.else50

if.then46:                                        ; preds = %if.else43
  %32 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 17, i32 1, i32 0), align 2
  %conv47 = zext i16 %32 to i32
  %33 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 17, i32 0, i32 0), align 2
  %conv48 = zext i16 %33 to i32
  call void @send_bits(i32 %conv48, i32 %conv47)
  %34 = load i32, i32* %count, align 4
  %sub49 = sub nsw i32 %34, 3
  call void @send_bits(i32 %sub49, i32 3)
  br label %if.end54

if.else50:                                        ; preds = %if.else43
  %35 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 18, i32 1, i32 0), align 2
  %conv51 = zext i16 %35 to i32
  %36 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 18, i32 0, i32 0), align 2
  %conv52 = zext i16 %36 to i32
  call void @send_bits(i32 %conv52, i32 %conv51)
  %37 = load i32, i32* %count, align 4
  %sub53 = sub nsw i32 %37, 11
  call void @send_bits(i32 %sub53, i32 7)
  br label %if.end54

if.end54:                                         ; preds = %if.else50, %if.then46
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end40
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %do.end
  br label %if.end57

if.end57:                                         ; preds = %if.end56
  store i32 0, i32* %count, align 4
  %38 = load i32, i32* %curlen, align 4
  store i32 %38, i32* %prevlen, align 4
  %39 = load i32, i32* %nextlen, align 4
  %cmp58 = icmp eq i32 %39, 0
  br i1 %cmp58, label %if.then60, label %if.else61

if.then60:                                        ; preds = %if.end57
  store i32 138, i32* %max_count, align 4
  store i32 3, i32* %min_count, align 4
  br label %if.end67

if.else61:                                        ; preds = %if.end57
  %40 = load i32, i32* %curlen, align 4
  %41 = load i32, i32* %nextlen, align 4
  %cmp62 = icmp eq i32 %40, %41
  br i1 %cmp62, label %if.then64, label %if.else65

if.then64:                                        ; preds = %if.else61
  store i32 6, i32* %max_count, align 4
  store i32 3, i32* %min_count, align 4
  br label %if.end66

if.else65:                                        ; preds = %if.else61
  store i32 7, i32* %max_count, align 4
  store i32 4, i32* %min_count, align 4
  br label %if.end66

if.end66:                                         ; preds = %if.else65, %if.then64
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then60
  br label %for.inc

for.inc:                                          ; preds = %if.end67, %if.then12
  %42 = load i32, i32* %n, align 4
  %inc68 = add nsw i32 %42, 1
  store i32 %inc68, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind
define i32 @ct_tally(i32 %dist, i32 %lc) #0 {
entry:
  %retval = alloca i32, align 4
  %lc.addr = alloca i32, align 4
  %dist.addr = alloca i32, align 4
  %out_length = alloca i32, align 4
  %in_length = alloca i32, align 4
  %dcode = alloca i32, align 4
  store i32 %lc, i32* %lc.addr, align 4
  store i32 %dist, i32* %dist.addr, align 4
  %0 = load i32, i32* %lc.addr, align 4
  %conv = trunc i32 %0 to i8
  %1 = load i32, i32* @last_lit, align 4
  %inc = add i32 %1, 1
  store i32 %inc, i32* @last_lit, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %1
  store i8 %conv, i8* %arrayidx, align 1
  %2 = load i32, i32* %dist.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %lc.addr, align 4
  %arrayidx2 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 %3
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx2, i32 0, i32 0
  %freq = bitcast %union.anon.5* %fc to i16*
  %4 = load i16, i16* %freq, align 2
  %inc3 = add i16 %4, 1
  store i16 %inc3, i16* %freq, align 2
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %dist.addr, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %dist.addr, align 4
  %6 = load i32, i32* %lc.addr, align 4
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %7 to i32
  %add = add nsw i32 %conv5, 256
  %add6 = add nsw i32 %add, 1
  %arrayidx7 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 %add6
  %fc8 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx7, i32 0, i32 0
  %freq9 = bitcast %union.anon.5* %fc8 to i16*
  %8 = load i16, i16* %freq9, align 2
  %inc10 = add i16 %8, 1
  store i16 %inc10, i16* %freq9, align 2
  %9 = load i32, i32* %dist.addr, align 4
  %cmp11 = icmp slt i32 %9, 256
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %10 = load i32, i32* %dist.addr, align 4
  %arrayidx13 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %11 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %12 = load i32, i32* %dist.addr, align 4
  %shr = ashr i32 %12, 7
  %add15 = add nsw i32 256, %shr
  %arrayidx16 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i32 0, i32 %add15
  %13 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %13 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv14, %cond.true ], [ %conv17, %cond.false ]
  %arrayidx18 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 %cond
  %fc19 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx18, i32 0, i32 0
  %freq20 = bitcast %union.anon.5* %fc19 to i16*
  %14 = load i16, i16* %freq20, align 2
  %inc21 = add i16 %14, 1
  store i16 %inc21, i16* %freq20, align 2
  %15 = load i32, i32* %dist.addr, align 4
  %conv22 = trunc i32 %15 to i16
  %16 = load i32, i32* @last_dist, align 4
  %inc23 = add i32 %16, 1
  store i32 %inc23, i32* @last_dist, align 4
  %arrayidx24 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i32 0, i32 %16
  store i16 %conv22, i16* %arrayidx24, align 2
  %17 = load i8, i8* @flag_bit, align 1
  %conv25 = zext i8 %17 to i32
  %18 = load i8, i8* @flags, align 1
  %conv26 = zext i8 %18 to i32
  %or = or i32 %conv26, %conv25
  %conv27 = trunc i32 %or to i8
  store i8 %conv27, i8* @flags, align 1
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %19 = load i8, i8* @flag_bit, align 1
  %conv28 = zext i8 %19 to i32
  %shl = shl i32 %conv28, 1
  %conv29 = trunc i32 %shl to i8
  store i8 %conv29, i8* @flag_bit, align 1
  %20 = load i32, i32* @last_lit, align 4
  %and = and i32 %20, 7
  %cmp30 = icmp eq i32 %and, 0
  br i1 %cmp30, label %if.then32, label %if.end35

if.then32:                                        ; preds = %if.end
  %21 = load i8, i8* @flags, align 1
  %22 = load i32, i32* @last_flags, align 4
  %inc33 = add i32 %22, 1
  store i32 %inc33, i32* @last_flags, align 4
  %arrayidx34 = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i32 0, i32 %22
  store i8 %21, i8* %arrayidx34, align 1
  store i8 0, i8* @flags, align 1
  store i8 1, i8* @flag_bit, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %if.end
  %23 = load i32, i32* @level, align 4
  %cmp36 = icmp sgt i32 %23, 2
  br i1 %cmp36, label %land.lhs.true, label %if.end62

land.lhs.true:                                    ; preds = %if.end35
  %24 = load i32, i32* @last_lit, align 4
  %and38 = and i32 %24, 4095
  %cmp39 = icmp eq i32 %and38, 0
  br i1 %cmp39, label %if.then41, label %if.end62

if.then41:                                        ; preds = %land.lhs.true
  %25 = load i32, i32* @last_lit, align 4
  %mul = mul i32 %25, 8
  store i32 %mul, i32* %out_length, align 4
  %26 = load i32, i32* @strstart, align 4
  %27 = load i32, i32* @block_start, align 4
  %sub = sub i32 %26, %27
  store i32 %sub, i32* %in_length, align 4
  store i32 0, i32* %dcode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then41
  %28 = load i32, i32* %dcode, align 4
  %cmp42 = icmp slt i32 %28, 30
  br i1 %cmp42, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %dcode, align 4
  %arrayidx44 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 %29
  %fc45 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx44, i32 0, i32 0
  %freq46 = bitcast %union.anon.5* %fc45 to i16*
  %30 = load i16, i16* %freq46, align 2
  %conv47 = zext i16 %30 to i32
  %31 = load i32, i32* %dcode, align 4
  %arrayidx48 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i32 0, i32 %31
  %32 = load i32, i32* %arrayidx48, align 4
  %add49 = add nsw i32 5, %32
  %mul50 = mul i32 %conv47, %add49
  %33 = load i32, i32* %out_length, align 4
  %add51 = add i32 %33, %mul50
  store i32 %add51, i32* %out_length, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %dcode, align 4
  %inc52 = add nsw i32 %34, 1
  store i32 %inc52, i32* %dcode, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load i32, i32* %out_length, align 4
  %shr53 = lshr i32 %35, 3
  store i32 %shr53, i32* %out_length, align 4
  %36 = load i32, i32* @last_dist, align 4
  %37 = load i32, i32* @last_lit, align 4
  %div = udiv i32 %37, 2
  %cmp54 = icmp ult i32 %36, %div
  br i1 %cmp54, label %land.lhs.true56, label %if.end61

land.lhs.true56:                                  ; preds = %for.end
  %38 = load i32, i32* %out_length, align 4
  %39 = load i32, i32* %in_length, align 4
  %div57 = udiv i32 %39, 2
  %cmp58 = icmp ult i32 %38, %div57
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %land.lhs.true56
  store i32 1, i32* %retval, align 4
  br label %return

if.end61:                                         ; preds = %land.lhs.true56, %for.end
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %land.lhs.true, %if.end35
  %40 = load i32, i32* @last_lit, align 4
  %cmp63 = icmp eq i32 %40, 32767
  br i1 %cmp63, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end62
  %41 = load i32, i32* @last_dist, align 4
  %cmp65 = icmp eq i32 %41, 32768
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end62
  %42 = phi i1 [ true, %if.end62 ], [ %cmp65, %lor.rhs ]
  %lor.ext = zext i1 %42 to i32
  store i32 %lor.ext, i32* %retval, align 4
  br label %return

return:                                           ; preds = %lor.end, %if.then60
  %43 = load i32, i32* %retval, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind
define i32 @unlzh(i32 %in, i32 %out) #0 {
entry:
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* %in.addr, align 4
  store i32 %0, i32* @ifd, align 4
  %1 = load i32, i32* %out.addr, align 4
  store i32 %1, i32* @ofd, align 4
  call void @decode_start()
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* @done, align 4
  %tobool = icmp ne i32 %2, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @decode(i32 8192, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0))
  store i32 %call, i32* %n, align 4
  %3 = load i32, i32* @test, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %4 = load i32, i32* %n, align 4
  %cmp = icmp ugt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* %n, align 4
  %6 = load i32, i32* %out.addr, align 4
  call void @write_buf(i32 %6, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

; Function Attrs: noinline nounwind
define internal void @decode_start() #0 {
entry:
  call void @huf_decode_start()
  store i32 0, i32* @j, align 4
  store i32 0, i32* @done, align 4
  ret void
}

; Function Attrs: noinline nounwind
define internal void @huf_decode_start() #0 {
entry:
  call void @init_getbits()
  store i32 0, i32* @blocksize, align 4
  ret void
}

; Function Attrs: noinline nounwind
define internal void @init_getbits() #0 {
entry:
  store i16 0, i16* @bitbuf, align 2
  store i32 0, i32* @subbitbuf, align 4
  store i32 0, i32* @bitcount, align 4
  call void @fillbuf(i32 16)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @fillbuf(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i16, i16* @bitbuf, align 2
  %conv = zext i16 %1 to i32
  %shl = shl i32 %conv, %0
  %conv1 = trunc i32 %shl to i16
  store i16 %conv1, i16* @bitbuf, align 2
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* @bitcount, align 4
  %cmp = icmp sgt i32 %2, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* @subbitbuf, align 4
  %5 = load i32, i32* @bitcount, align 4
  %6 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %6, %5
  store i32 %sub, i32* %n.addr, align 4
  %shl3 = shl i32 %4, %sub
  %7 = load i16, i16* @bitbuf, align 2
  %conv4 = zext i16 %7 to i32
  %or = or i32 %conv4, %shl3
  %conv5 = trunc i32 %or to i16
  store i16 %conv5, i16* @bitbuf, align 2
  %8 = load i32, i32* @inptr, align 4
  %9 = load i32, i32* @insize, align 4
  %cmp6 = icmp ult i32 %8, %9
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %10 = load i32, i32* @inptr, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv8 = zext i8 %11 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 1)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv8, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* @subbitbuf, align 4
  %12 = load i32, i32* @subbitbuf, align 4
  %cmp9 = icmp eq i32 %12, -1
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 0, i32* @subbitbuf, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  store i32 8, i32* @bitcount, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i32, i32* @subbitbuf, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* @bitcount, align 4
  %sub11 = sub nsw i32 %15, %14
  store i32 %sub11, i32* @bitcount, align 4
  %shr = lshr i32 %13, %sub11
  %16 = load i16, i16* @bitbuf, align 2
  %conv12 = zext i16 %16 to i32
  %or13 = or i32 %conv12, %shr
  %conv14 = trunc i32 %or13 to i16
  store i16 %conv14, i16* @bitbuf, align 2
  ret void
}

; Function Attrs: noinline nounwind
define internal i32 @decode(i32 %count, i8* %buffer) #0 {
entry:
  %retval = alloca i32, align 4
  %buffer.addr = alloca i8*, align 4
  %count.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  store i32 %count, i32* %count.addr, align 4
  store i32 0, i32* %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* @j, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* @j, align 4
  %cmp = icmp sge i32 %dec, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* @decode.i, align 4
  %2 = load i8*, i8** %buffer.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %1
  %3 = load i8, i8* %arrayidx, align 1
  %4 = load i32, i32* %r, align 4
  %5 = load i8*, i8** %buffer.addr, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %5, i32 %4
  store i8 %3, i8* %arrayidx1, align 1
  %6 = load i32, i32* @decode.i, align 4
  %add = add i32 %6, 1
  %and = and i32 %add, 8191
  store i32 %and, i32* @decode.i, align 4
  %7 = load i32, i32* %r, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %r, align 4
  %8 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp eq i32 %inc, %8
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %9 = load i32, i32* %r, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.cond

for.cond:                                         ; preds = %if.end33, %while.end
  %call = call i32 @decode_c()
  store i32 %call, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %cmp3 = icmp eq i32 %10, 510
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %for.cond
  store i32 1, i32* @done, align 4
  %11 = load i32, i32* %r, align 4
  store i32 %11, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %for.cond
  %12 = load i32, i32* %c, align 4
  %cmp6 = icmp ule i32 %12, 255
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end5
  %13 = load i32, i32* %c, align 4
  %conv = trunc i32 %13 to i8
  %14 = load i32, i32* %r, align 4
  %15 = load i8*, i8** %buffer.addr, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %15, i32 %14
  store i8 %conv, i8* %arrayidx8, align 1
  %16 = load i32, i32* %r, align 4
  %inc9 = add i32 %16, 1
  store i32 %inc9, i32* %r, align 4
  %17 = load i32, i32* %count.addr, align 4
  %cmp10 = icmp eq i32 %inc9, %17
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then7
  %18 = load i32, i32* %r, align 4
  store i32 %18, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.then7
  br label %if.end33

if.else:                                          ; preds = %if.end5
  %19 = load i32, i32* %c, align 4
  %sub = sub i32 %19, 253
  store i32 %sub, i32* @j, align 4
  %20 = load i32, i32* %r, align 4
  %call14 = call i32 @decode_p()
  %sub15 = sub i32 %20, %call14
  %sub16 = sub i32 %sub15, 1
  %and17 = and i32 %sub16, 8191
  store i32 %and17, i32* @decode.i, align 4
  br label %while.cond18

while.cond18:                                     ; preds = %if.end31, %if.else
  %21 = load i32, i32* @j, align 4
  %dec19 = add nsw i32 %21, -1
  store i32 %dec19, i32* @j, align 4
  %cmp20 = icmp sge i32 %dec19, 0
  br i1 %cmp20, label %while.body22, label %while.end32

while.body22:                                     ; preds = %while.cond18
  %22 = load i32, i32* @decode.i, align 4
  %23 = load i8*, i8** %buffer.addr, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %23, i32 %22
  %24 = load i8, i8* %arrayidx23, align 1
  %25 = load i32, i32* %r, align 4
  %26 = load i8*, i8** %buffer.addr, align 4
  %arrayidx24 = getelementptr inbounds i8, i8* %26, i32 %25
  store i8 %24, i8* %arrayidx24, align 1
  %27 = load i32, i32* @decode.i, align 4
  %add25 = add i32 %27, 1
  %and26 = and i32 %add25, 8191
  store i32 %and26, i32* @decode.i, align 4
  %28 = load i32, i32* %r, align 4
  %inc27 = add i32 %28, 1
  store i32 %inc27, i32* %r, align 4
  %29 = load i32, i32* %count.addr, align 4
  %cmp28 = icmp eq i32 %inc27, %29
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %while.body22
  %30 = load i32, i32* %r, align 4
  store i32 %30, i32* %retval, align 4
  br label %return

if.end31:                                         ; preds = %while.body22
  br label %while.cond18

while.end32:                                      ; preds = %while.cond18
  br label %if.end33

if.end33:                                         ; preds = %while.end32, %if.end13
  br label %for.cond

return:                                           ; preds = %if.then30, %if.then12, %if.then4, %if.then
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind
define internal i32 @decode_c() #0 {
entry:
  %retval = alloca i32, align 4
  %j = alloca i32, align 4
  %mask = alloca i32, align 4
  %0 = load i32, i32* @blocksize, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end3

if.then:                                          ; preds = %entry
  %call = call i32 @getbits(i32 16)
  store i32 %call, i32* @blocksize, align 4
  %1 = load i32, i32* @blocksize, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i32 510, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  call void @read_pt_len(i32 19, i32 5, i32 3)
  call void @read_c_len()
  call void @read_pt_len(i32 14, i32 4, i32 -1)
  br label %if.end3

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i32, i32* @blocksize, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* @blocksize, align 4
  %3 = load i16, i16* @bitbuf, align 2
  %conv = zext i16 %3 to i32
  %shr = ashr i32 %conv, 4
  %arrayidx = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i32 0, i32 %shr
  %4 = load i16, i16* %arrayidx, align 2
  %conv4 = zext i16 %4 to i32
  store i32 %conv4, i32* %j, align 4
  %5 = load i32, i32* %j, align 4
  %cmp5 = icmp uge i32 %5, 510
  br i1 %cmp5, label %if.then7, label %if.end18

if.then7:                                         ; preds = %if.end3
  store i32 8, i32* %mask, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then7
  %6 = load i16, i16* @bitbuf, align 2
  %conv8 = zext i16 %6 to i32
  %7 = load i32, i32* %mask, align 4
  %and = and i32 %conv8, %7
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then9, label %if.else

if.then9:                                         ; preds = %do.body
  %8 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %8
  %9 = load i16, i16* %arrayidx10, align 2
  %conv11 = zext i16 %9 to i32
  store i32 %conv11, i32* %j, align 4
  br label %if.end14

if.else:                                          ; preds = %do.body
  %10 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %10
  %11 = load i16, i16* %arrayidx12, align 2
  %conv13 = zext i16 %11 to i32
  store i32 %conv13, i32* %j, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then9
  %12 = load i32, i32* %mask, align 4
  %shr15 = lshr i32 %12, 1
  store i32 %shr15, i32* %mask, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end14
  %13 = load i32, i32* %j, align 4
  %cmp16 = icmp uge i32 %13, 510
  br i1 %cmp16, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end, %if.end3
  %14 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %14
  %15 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %15 to i32
  call void @fillbuf(i32 %conv20)
  %16 = load i32, i32* %j, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end18, %if.then2
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind
define internal i32 @getbits(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i16, i16* @bitbuf, align 2
  %conv = zext i16 %0 to i32
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub i32 16, %1
  %shr = ashr i32 %conv, %sub
  store i32 %shr, i32* %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  call void @fillbuf(i32 %2)
  %3 = load i32, i32* %x, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind
define internal void @read_pt_len(i32 %nn, i32 %nbit, i32 %i_special) #0 {
entry:
  %i_special.addr = alloca i32, align 4
  %nbit.addr = alloca i32, align 4
  %nn.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %n = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %i_special, i32* %i_special.addr, align 4
  store i32 %nbit, i32* %nbit.addr, align 4
  store i32 %nn, i32* %nn.addr, align 4
  %0 = load i32, i32* %nbit.addr, align 4
  %call = call i32 @getbits(i32 %0)
  store i32 %call, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %nbit.addr, align 4
  %call1 = call i32 @getbits(i32 %2)
  store i32 %call1, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %nn.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i32 0, i32 %5
  store i8 0, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %7 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %7, 256
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %8 = load i32, i32* %c, align 4
  %conv = trunc i32 %8 to i16
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i32 0, i32 %9
  store i16 %conv, i16* %arrayidx6, align 2
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %10 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %10, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  br label %if.end46

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end37, %if.else
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n, align 4
  %cmp10 = icmp slt i32 %11, %12
  br i1 %cmp10, label %while.body, label %while.end38

while.body:                                       ; preds = %while.cond
  %13 = load i16, i16* @bitbuf, align 2
  %conv12 = zext i16 %13 to i32
  %shr = ashr i32 %conv12, 13
  store i32 %shr, i32* %c, align 4
  %14 = load i32, i32* %c, align 4
  %cmp13 = icmp eq i32 %14, 7
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %while.body
  store i32 4096, i32* %mask, align 4
  br label %while.cond16

while.cond16:                                     ; preds = %while.body18, %if.then15
  %15 = load i32, i32* %mask, align 4
  %16 = load i16, i16* @bitbuf, align 2
  %conv17 = zext i16 %16 to i32
  %and = and i32 %15, %conv17
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %while.body18, label %while.end

while.body18:                                     ; preds = %while.cond16
  %17 = load i32, i32* %mask, align 4
  %shr19 = lshr i32 %17, 1
  store i32 %shr19, i32* %mask, align 4
  %18 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %18, 1
  store i32 %inc20, i32* %c, align 4
  br label %while.cond16

while.end:                                        ; preds = %while.cond16
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %19 = load i32, i32* %c, align 4
  %cmp21 = icmp slt i32 %19, 7
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %20 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %20, 3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 3, %cond.true ], [ %sub, %cond.false ]
  call void @fillbuf(i32 %cond)
  %21 = load i32, i32* %c, align 4
  %conv23 = trunc i32 %21 to i8
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i32 0, i32 %22
  store i8 %conv23, i8* %arrayidx25, align 1
  %23 = load i32, i32* %i, align 4
  %24 = load i32, i32* %i_special.addr, align 4
  %cmp26 = icmp eq i32 %23, %24
  br i1 %cmp26, label %if.then28, label %if.end37

if.then28:                                        ; preds = %cond.end
  %call29 = call i32 @getbits(i32 2)
  store i32 %call29, i32* %c, align 4
  br label %while.cond30

while.cond30:                                     ; preds = %while.body33, %if.then28
  %25 = load i32, i32* %c, align 4
  %dec = add nsw i32 %25, -1
  store i32 %dec, i32* %c, align 4
  %cmp31 = icmp sge i32 %dec, 0
  br i1 %cmp31, label %while.body33, label %while.end36

while.body33:                                     ; preds = %while.cond30
  %26 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %26, 1
  store i32 %inc34, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i32 0, i32 %26
  store i8 0, i8* %arrayidx35, align 1
  br label %while.cond30

while.end36:                                      ; preds = %while.cond30
  br label %if.end37

if.end37:                                         ; preds = %while.end36, %cond.end
  br label %while.cond

while.end38:                                      ; preds = %while.cond
  br label %while.cond39

while.cond39:                                     ; preds = %while.body42, %while.end38
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %nn.addr, align 4
  %cmp40 = icmp slt i32 %27, %28
  br i1 %cmp40, label %while.body42, label %while.end45

while.body42:                                     ; preds = %while.cond39
  %29 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %29, 1
  store i32 %inc43, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i32 0, i32 %29
  store i8 0, i8* %arrayidx44, align 1
  br label %while.cond39

while.end45:                                      ; preds = %while.cond39
  %30 = load i32, i32* %nn.addr, align 4
  call void @make_table(i32 %30, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @pt_len, i32 0, i32 0), i32 8, i16* getelementptr inbounds ([256 x i16], [256 x i16]* @pt_table, i32 0, i32 0))
  br label %if.end46

if.end46:                                         ; preds = %while.end45, %for.end9
  ret void
}

; Function Attrs: noinline nounwind
define internal void @make_table(i32 %nchar, i8* %bitlen, i32 %tablebits, i16* %table) #0 {
entry:
  %table.addr = alloca i16*, align 4
  %tablebits.addr = alloca i32, align 4
  %bitlen.addr = alloca i8*, align 4
  %nchar.addr = alloca i32, align 4
  %count = alloca [17 x i16], align 2
  %weight = alloca [17 x i16], align 2
  %start = alloca [18 x i16], align 2
  %p = alloca i16*, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  %ch = alloca i32, align 4
  %jutbits = alloca i32, align 4
  %avail = alloca i32, align 4
  %nextcode = alloca i32, align 4
  %mask = alloca i32, align 4
  store i16* %table, i16** %table.addr, align 4
  store i32 %tablebits, i32* %tablebits.addr, align 4
  store i8* %bitlen, i8** %bitlen.addr, align 4
  store i32 %nchar, i32* %nchar.addr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ule i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x i16], [17 x i16]* %count, i32 0, i32 %1
  store i16 0, i16* %arrayidx, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %nchar.addr, align 4
  %cmp2 = icmp ult i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end9

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %bitlen.addr, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i32 %5
  %7 = load i8, i8* %arrayidx4, align 1
  %idxprom = zext i8 %7 to i32
  %arrayidx5 = getelementptr inbounds [17 x i16], [17 x i16]* %count, i32 0, i32 %idxprom
  %8 = load i16, i16* %arrayidx5, align 2
  %inc6 = add i16 %8, 1
  store i16 %inc6, i16* %arrayidx5, align 2
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %9 = load i32, i32* %i, align 4
  %inc8 = add i32 %9, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond1

for.end9:                                         ; preds = %for.cond1
  %arrayidx10 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 1
  store i16 0, i16* %arrayidx10, align 2
  store i32 1, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc20, %for.end9
  %10 = load i32, i32* %i, align 4
  %cmp12 = icmp ule i32 %10, 16
  br i1 %cmp12, label %for.body13, label %for.end22

for.body13:                                       ; preds = %for.cond11
  %11 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %11
  %12 = load i16, i16* %arrayidx14, align 2
  %conv = zext i16 %12 to i32
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [17 x i16], [17 x i16]* %count, i32 0, i32 %13
  %14 = load i16, i16* %arrayidx15, align 2
  %conv16 = zext i16 %14 to i32
  %15 = load i32, i32* %i, align 4
  %sub = sub i32 16, %15
  %shl = shl i32 %conv16, %sub
  %add = add nsw i32 %conv, %shl
  %conv17 = trunc i32 %add to i16
  %16 = load i32, i32* %i, align 4
  %add18 = add i32 %16, 1
  %arrayidx19 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %add18
  store i16 %conv17, i16* %arrayidx19, align 2
  br label %for.inc20

for.inc20:                                        ; preds = %for.body13
  %17 = load i32, i32* %i, align 4
  %inc21 = add i32 %17, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond11

for.end22:                                        ; preds = %for.cond11
  %arrayidx23 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 17
  %18 = load i16, i16* %arrayidx23, align 2
  %conv24 = zext i16 %18 to i32
  %and = and i32 %conv24, 65535
  %cmp25 = icmp ne i32 %and, 0
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %for.end22
  call void @error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.91, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end22
  %19 = load i32, i32* %tablebits.addr, align 4
  %sub27 = sub nsw i32 16, %19
  store i32 %sub27, i32* %jutbits, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc39, %if.end
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %tablebits.addr, align 4
  %cmp29 = icmp ule i32 %20, %21
  br i1 %cmp29, label %for.body31, label %for.end41

for.body31:                                       ; preds = %for.cond28
  %22 = load i32, i32* %jutbits, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %23
  %24 = load i16, i16* %arrayidx32, align 2
  %conv33 = zext i16 %24 to i32
  %shr = ashr i32 %conv33, %22
  %conv34 = trunc i32 %shr to i16
  store i16 %conv34, i16* %arrayidx32, align 2
  %25 = load i32, i32* %tablebits.addr, align 4
  %26 = load i32, i32* %i, align 4
  %sub35 = sub i32 %25, %26
  %shl36 = shl i32 1, %sub35
  %conv37 = trunc i32 %shl36 to i16
  %27 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds [17 x i16], [17 x i16]* %weight, i32 0, i32 %27
  store i16 %conv37, i16* %arrayidx38, align 2
  br label %for.inc39

for.inc39:                                        ; preds = %for.body31
  %28 = load i32, i32* %i, align 4
  %inc40 = add i32 %28, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond28

for.end41:                                        ; preds = %for.cond28
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end41
  %29 = load i32, i32* %i, align 4
  %cmp42 = icmp ule i32 %29, 16
  br i1 %cmp42, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %30 = load i32, i32* %i, align 4
  %sub44 = sub i32 16, %30
  %shl45 = shl i32 1, %sub44
  %conv46 = trunc i32 %shl45 to i16
  %31 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [17 x i16], [17 x i16]* %weight, i32 0, i32 %31
  store i16 %conv46, i16* %arrayidx47, align 2
  %32 = load i32, i32* %i, align 4
  %inc48 = add i32 %32, 1
  store i32 %inc48, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %33 = load i32, i32* %tablebits.addr, align 4
  %add49 = add nsw i32 %33, 1
  %arrayidx50 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %add49
  %34 = load i16, i16* %arrayidx50, align 2
  %conv51 = zext i16 %34 to i32
  %35 = load i32, i32* %jutbits, align 4
  %shr52 = ashr i32 %conv51, %35
  store i32 %shr52, i32* %i, align 4
  %36 = load i32, i32* %i, align 4
  %cmp53 = icmp ne i32 %36, 0
  br i1 %cmp53, label %if.then55, label %if.end64

if.then55:                                        ; preds = %while.end
  %37 = load i32, i32* %tablebits.addr, align 4
  %shl56 = shl i32 1, %37
  store i32 %shl56, i32* %k, align 4
  br label %while.cond57

while.cond57:                                     ; preds = %while.body60, %if.then55
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %k, align 4
  %cmp58 = icmp ne i32 %38, %39
  br i1 %cmp58, label %while.body60, label %while.end63

while.body60:                                     ; preds = %while.cond57
  %40 = load i32, i32* %i, align 4
  %inc61 = add i32 %40, 1
  store i32 %inc61, i32* %i, align 4
  %41 = load i16*, i16** %table.addr, align 4
  %arrayidx62 = getelementptr inbounds i16, i16* %41, i32 %40
  store i16 0, i16* %arrayidx62, align 2
  br label %while.cond57

while.end63:                                      ; preds = %while.cond57
  br label %if.end64

if.end64:                                         ; preds = %while.end63, %while.end
  %42 = load i32, i32* %nchar.addr, align 4
  store i32 %42, i32* %avail, align 4
  %43 = load i32, i32* %tablebits.addr, align 4
  %sub65 = sub nsw i32 15, %43
  %shl66 = shl i32 1, %sub65
  store i32 %shl66, i32* %mask, align 4
  store i32 0, i32* %ch, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc128, %if.end64
  %44 = load i32, i32* %ch, align 4
  %45 = load i32, i32* %nchar.addr, align 4
  %cmp68 = icmp ult i32 %44, %45
  br i1 %cmp68, label %for.body70, label %for.end130

for.body70:                                       ; preds = %for.cond67
  %46 = load i32, i32* %ch, align 4
  %47 = load i8*, i8** %bitlen.addr, align 4
  %arrayidx71 = getelementptr inbounds i8, i8* %47, i32 %46
  %48 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %48 to i32
  store i32 %conv72, i32* %len, align 4
  %cmp73 = icmp eq i32 %conv72, 0
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %for.body70
  br label %for.inc128

if.end76:                                         ; preds = %for.body70
  %49 = load i32, i32* %len, align 4
  %arrayidx77 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %49
  %50 = load i16, i16* %arrayidx77, align 2
  %conv78 = zext i16 %50 to i32
  %51 = load i32, i32* %len, align 4
  %arrayidx79 = getelementptr inbounds [17 x i16], [17 x i16]* %weight, i32 0, i32 %51
  %52 = load i16, i16* %arrayidx79, align 2
  %conv80 = zext i16 %52 to i32
  %add81 = add nsw i32 %conv78, %conv80
  store i32 %add81, i32* %nextcode, align 4
  %53 = load i32, i32* %len, align 4
  %54 = load i32, i32* %tablebits.addr, align 4
  %cmp82 = icmp ule i32 %53, %54
  br i1 %cmp82, label %if.then84, label %if.else

if.then84:                                        ; preds = %if.end76
  %55 = load i32, i32* %len, align 4
  %arrayidx85 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %55
  %56 = load i16, i16* %arrayidx85, align 2
  %conv86 = zext i16 %56 to i32
  store i32 %conv86, i32* %i, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc93, %if.then84
  %57 = load i32, i32* %i, align 4
  %58 = load i32, i32* %nextcode, align 4
  %cmp88 = icmp ult i32 %57, %58
  br i1 %cmp88, label %for.body90, label %for.end95

for.body90:                                       ; preds = %for.cond87
  %59 = load i32, i32* %ch, align 4
  %conv91 = trunc i32 %59 to i16
  %60 = load i32, i32* %i, align 4
  %61 = load i16*, i16** %table.addr, align 4
  %arrayidx92 = getelementptr inbounds i16, i16* %61, i32 %60
  store i16 %conv91, i16* %arrayidx92, align 2
  br label %for.inc93

for.inc93:                                        ; preds = %for.body90
  %62 = load i32, i32* %i, align 4
  %inc94 = add i32 %62, 1
  store i32 %inc94, i32* %i, align 4
  br label %for.cond87

for.end95:                                        ; preds = %for.cond87
  br label %if.end125

if.else:                                          ; preds = %if.end76
  %63 = load i32, i32* %len, align 4
  %arrayidx96 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %63
  %64 = load i16, i16* %arrayidx96, align 2
  %conv97 = zext i16 %64 to i32
  store i32 %conv97, i32* %k, align 4
  %65 = load i32, i32* %k, align 4
  %66 = load i32, i32* %jutbits, align 4
  %shr98 = lshr i32 %65, %66
  %67 = load i16*, i16** %table.addr, align 4
  %arrayidx99 = getelementptr inbounds i16, i16* %67, i32 %shr98
  store i16* %arrayidx99, i16** %p, align 4
  %68 = load i32, i32* %len, align 4
  %69 = load i32, i32* %tablebits.addr, align 4
  %sub100 = sub i32 %68, %69
  store i32 %sub100, i32* %i, align 4
  br label %while.cond101

while.cond101:                                    ; preds = %if.end121, %if.else
  %70 = load i32, i32* %i, align 4
  %cmp102 = icmp ne i32 %70, 0
  br i1 %cmp102, label %while.body104, label %while.end123

while.body104:                                    ; preds = %while.cond101
  %71 = load i16*, i16** %p, align 4
  %72 = load i16, i16* %71, align 2
  %conv105 = zext i16 %72 to i32
  %cmp106 = icmp eq i32 %conv105, 0
  br i1 %cmp106, label %if.then108, label %if.end113

if.then108:                                       ; preds = %while.body104
  %73 = load i32, i32* %avail, align 4
  %arrayidx109 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %73
  store i16 0, i16* %arrayidx109, align 2
  %74 = load i32, i32* %avail, align 4
  %arrayidx110 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %74
  store i16 0, i16* %arrayidx110, align 2
  %75 = load i32, i32* %avail, align 4
  %inc111 = add i32 %75, 1
  store i32 %inc111, i32* %avail, align 4
  %conv112 = trunc i32 %75 to i16
  %76 = load i16*, i16** %p, align 4
  store i16 %conv112, i16* %76, align 2
  br label %if.end113

if.end113:                                        ; preds = %if.then108, %while.body104
  %77 = load i32, i32* %k, align 4
  %78 = load i32, i32* %mask, align 4
  %and114 = and i32 %77, %78
  %tobool = icmp ne i32 %and114, 0
  br i1 %tobool, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.end113
  %79 = load i16*, i16** %p, align 4
  %80 = load i16, i16* %79, align 2
  %idxprom116 = zext i16 %80 to i32
  %arrayidx117 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %idxprom116
  store i16* %arrayidx117, i16** %p, align 4
  br label %if.end121

if.else118:                                       ; preds = %if.end113
  %81 = load i16*, i16** %p, align 4
  %82 = load i16, i16* %81, align 2
  %idxprom119 = zext i16 %82 to i32
  %arrayidx120 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %idxprom119
  store i16* %arrayidx120, i16** %p, align 4
  br label %if.end121

if.end121:                                        ; preds = %if.else118, %if.then115
  %83 = load i32, i32* %k, align 4
  %shl122 = shl i32 %83, 1
  store i32 %shl122, i32* %k, align 4
  %84 = load i32, i32* %i, align 4
  %dec = add i32 %84, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond101

while.end123:                                     ; preds = %while.cond101
  %85 = load i32, i32* %ch, align 4
  %conv124 = trunc i32 %85 to i16
  %86 = load i16*, i16** %p, align 4
  store i16 %conv124, i16* %86, align 2
  br label %if.end125

if.end125:                                        ; preds = %while.end123, %for.end95
  %87 = load i32, i32* %nextcode, align 4
  %conv126 = trunc i32 %87 to i16
  %88 = load i32, i32* %len, align 4
  %arrayidx127 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i32 0, i32 %88
  store i16 %conv126, i16* %arrayidx127, align 2
  br label %for.inc128

for.inc128:                                       ; preds = %if.end125, %if.then75
  %89 = load i32, i32* %ch, align 4
  %inc129 = add i32 %89, 1
  store i32 %inc129, i32* %ch, align 4
  br label %for.cond67

for.end130:                                       ; preds = %for.cond67
  ret void
}

; Function Attrs: noinline nounwind
define internal void @read_c_len() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %n = alloca i32, align 4
  %mask = alloca i32, align 4
  %call = call i32 @getbits(i32 9)
  store i32 %call, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i32 @getbits(i32 9)
  store i32 %call1, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %1, 510
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %2
  store i8 0, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %4, 4096
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %c, align 4
  %conv = trunc i32 %5 to i16
  %6 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i32 0, i32 %6
  store i16 %conv, i16* %arrayidx6, align 2
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %7 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %7, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  br label %if.end66

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end57, %if.else
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %n, align 4
  %cmp10 = icmp slt i32 %8, %9
  br i1 %cmp10, label %while.body, label %while.end58

while.body:                                       ; preds = %while.cond
  %10 = load i16, i16* @bitbuf, align 2
  %conv12 = zext i16 %10 to i32
  %shr = ashr i32 %conv12, 8
  %arrayidx13 = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i32 0, i32 %shr
  %11 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %11 to i32
  store i32 %conv14, i32* %c, align 4
  %12 = load i32, i32* %c, align 4
  %cmp15 = icmp sge i32 %12, 19
  br i1 %cmp15, label %if.then17, label %if.end28

if.then17:                                        ; preds = %while.body
  store i32 128, i32* %mask, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then17
  %13 = load i16, i16* @bitbuf, align 2
  %conv18 = zext i16 %13 to i32
  %14 = load i32, i32* %mask, align 4
  %and = and i32 %conv18, %14
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then19, label %if.else22

if.then19:                                        ; preds = %do.body
  %15 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %15
  %16 = load i16, i16* %arrayidx20, align 2
  %conv21 = zext i16 %16 to i32
  store i32 %conv21, i32* %c, align 4
  br label %if.end

if.else22:                                        ; preds = %do.body
  %17 = load i32, i32* %c, align 4
  %arrayidx23 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %17
  %18 = load i16, i16* %arrayidx23, align 2
  %conv24 = zext i16 %18 to i32
  store i32 %conv24, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.else22, %if.then19
  %19 = load i32, i32* %mask, align 4
  %shr25 = lshr i32 %19, 1
  store i32 %shr25, i32* %mask, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %20 = load i32, i32* %c, align 4
  %cmp26 = icmp sge i32 %20, 19
  br i1 %cmp26, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end28

if.end28:                                         ; preds = %do.end, %while.body
  %21 = load i32, i32* %c, align 4
  %arrayidx29 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %22 to i32
  call void @fillbuf(i32 %conv30)
  %23 = load i32, i32* %c, align 4
  %cmp31 = icmp sle i32 %23, 2
  br i1 %cmp31, label %if.then33, label %if.else53

if.then33:                                        ; preds = %if.end28
  %24 = load i32, i32* %c, align 4
  %cmp34 = icmp eq i32 %24, 0
  br i1 %cmp34, label %if.then36, label %if.else37

if.then36:                                        ; preds = %if.then33
  store i32 1, i32* %c, align 4
  br label %if.end46

if.else37:                                        ; preds = %if.then33
  %25 = load i32, i32* %c, align 4
  %cmp38 = icmp eq i32 %25, 1
  br i1 %cmp38, label %if.then40, label %if.else42

if.then40:                                        ; preds = %if.else37
  %call41 = call i32 @getbits(i32 4)
  %add = add i32 %call41, 3
  store i32 %add, i32* %c, align 4
  br label %if.end45

if.else42:                                        ; preds = %if.else37
  %call43 = call i32 @getbits(i32 9)
  %add44 = add i32 %call43, 20
  store i32 %add44, i32* %c, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.else42, %if.then40
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then36
  br label %while.cond47

while.cond47:                                     ; preds = %while.body50, %if.end46
  %26 = load i32, i32* %c, align 4
  %dec = add nsw i32 %26, -1
  store i32 %dec, i32* %c, align 4
  %cmp48 = icmp sge i32 %dec, 0
  br i1 %cmp48, label %while.body50, label %while.end

while.body50:                                     ; preds = %while.cond47
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  %arrayidx52 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %27
  store i8 0, i8* %arrayidx52, align 1
  br label %while.cond47

while.end:                                        ; preds = %while.cond47
  br label %if.end57

if.else53:                                        ; preds = %if.end28
  %28 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %28, 2
  %conv54 = trunc i32 %sub to i8
  %29 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %29, 1
  store i32 %inc55, i32* %i, align 4
  %arrayidx56 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %29
  store i8 %conv54, i8* %arrayidx56, align 1
  br label %if.end57

if.end57:                                         ; preds = %if.else53, %while.end
  br label %while.cond

while.end58:                                      ; preds = %while.cond
  br label %while.cond59

while.cond59:                                     ; preds = %while.body62, %while.end58
  %30 = load i32, i32* %i, align 4
  %cmp60 = icmp slt i32 %30, 510
  br i1 %cmp60, label %while.body62, label %while.end65

while.body62:                                     ; preds = %while.cond59
  %31 = load i32, i32* %i, align 4
  %inc63 = add nsw i32 %31, 1
  store i32 %inc63, i32* %i, align 4
  %arrayidx64 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %31
  store i8 0, i8* %arrayidx64, align 1
  br label %while.cond59

while.end65:                                      ; preds = %while.cond59
  call void @make_table(i32 510, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 12, i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %while.end65, %for.end9
  ret void
}

; Function Attrs: noinline nounwind
define internal i32 @decode_p() #0 {
entry:
  %j = alloca i32, align 4
  %mask = alloca i32, align 4
  %0 = load i16, i16* @bitbuf, align 2
  %conv = zext i16 %0 to i32
  %shr = ashr i32 %conv, 8
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i32 0, i32 %shr
  %1 = load i16, i16* %arrayidx, align 2
  %conv1 = zext i16 %1 to i32
  store i32 %conv1, i32* %j, align 4
  %2 = load i32, i32* %j, align 4
  %cmp = icmp uge i32 %2, 14
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %entry
  store i32 128, i32* %mask, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %3 = load i16, i16* @bitbuf, align 2
  %conv3 = zext i16 %3 to i32
  %4 = load i32, i32* %mask, align 4
  %and = and i32 %conv3, %4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then4, label %if.else

if.then4:                                         ; preds = %do.body
  %5 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i32 0, i32 32768), i32 %5
  %6 = load i16, i16* %arrayidx5, align 2
  %conv6 = zext i16 %6 to i32
  store i32 %conv6, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %do.body
  %7 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %7
  %8 = load i16, i16* %arrayidx7, align 2
  %conv8 = zext i16 %8 to i32
  store i32 %conv8, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %9 = load i32, i32* %mask, align 4
  %shr9 = lshr i32 %9, 1
  store i32 %shr9, i32* %mask, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %10 = load i32, i32* %j, align 4
  %cmp10 = icmp uge i32 %10, 14
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end12

if.end12:                                         ; preds = %do.end, %entry
  %11 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i32 0, i32 %11
  %12 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %12 to i32
  call void @fillbuf(i32 %conv14)
  %13 = load i32, i32* %j, align 4
  %cmp15 = icmp ne i32 %13, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end12
  %14 = load i32, i32* %j, align 4
  %sub = sub i32 %14, 1
  %shl = shl i32 1, %sub
  %15 = load i32, i32* %j, align 4
  %sub18 = sub i32 %15, 1
  %call = call i32 @getbits(i32 %sub18)
  %add = add i32 %shl, %call
  store i32 %add, i32* %j, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.end12
  %16 = load i32, i32* %j, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind
define i32 @unlzw(i32 %in, i32 %out) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %stackp = alloca i8*, align 4
  %code = alloca i32, align 4
  %finchar = alloca i32, align 4
  %oldcode = alloca i32, align 4
  %incode = alloca i32, align 4
  %inbits = alloca i32, align 4
  %posbits = alloca i32, align 4
  %outpos = alloca i32, align 4
  %bitmask = alloca i32, align 4
  %free_ent = alloca i32, align 4
  %maxcode = alloca i32, align 4
  %maxmaxcode = alloca i32, align 4
  %n_bits = alloca i32, align 4
  %rsize = alloca i32, align 4
  %i = alloca i32, align 4
  %e = alloca i32, align 4
  %o = alloca i32, align 4
  %p = alloca i8*, align 4
  %i158 = alloca i32, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* @inptr, align 4
  %1 = load i32, i32* @insize, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* @inptr, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* @maxbits, align 4
  %4 = load i32, i32* @maxbits, align 4
  %and = and i32 %4, 128
  store i32 %and, i32* @block_mode, align 4
  %5 = load i32, i32* @maxbits, align 4
  %and1 = and i32 %5, 96
  %cmp2 = icmp ne i32 %and1, 0
  br i1 %cmp2, label %if.then, label %if.end13

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* @quiet, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %7 = load i32, i32* @maxbits, align 4
  %and5 = and i32 %7, 96
  %8 = load i8*, i8** @progname, align 4
  %call6 = call %struct._iobuf* @__iob_func()
  %arrayidx7 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call6, i32 2
  %call8 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx7, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.94, i32 0, i32 0), i8* %8, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i32 %and5)
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %9 = load i32, i32* @exit_code, align 4
  %cmp9 = icmp eq i32 %9, 0
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 2, i32* @exit_code, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %cond.end
  %10 = load i32, i32* @maxbits, align 4
  %and14 = and i32 %10, 31
  store i32 %and14, i32* @maxbits, align 4
  %11 = load i32, i32* @maxbits, align 4
  %shl = shl i32 1, %11
  store i32 %shl, i32* %maxmaxcode, align 4
  %12 = load i32, i32* @maxbits, align 4
  %cmp15 = icmp sgt i32 %12, 16
  br i1 %cmp15, label %if.then17, label %if.end21

if.then17:                                        ; preds = %if.end13
  %13 = load i32, i32* @maxbits, align 4
  %14 = load i8*, i8** @progname, align 4
  %call18 = call %struct._iobuf* @__iob_func()
  %arrayidx19 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call18, i32 2
  %call20 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.95, i32 0, i32 0), i8* %14, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i32 %13, i32 16)
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end13
  %15 = load i32, i32* @insize, align 4
  store i32 %15, i32* %rsize, align 4
  store i32 9, i32* %n_bits, align 4
  store i32 511, i32* %maxcode, align 4
  %16 = load i32, i32* %n_bits, align 4
  %shl22 = shl i32 1, %16
  %sub = sub nsw i32 %shl22, 1
  store i32 %sub, i32* %bitmask, align 4
  store i32 -1, i32* %oldcode, align 4
  store i32 0, i32* %finchar, align 4
  store i32 0, i32* %outpos, align 4
  %17 = load i32, i32* @inptr, align 4
  %shl23 = shl i32 %17, 3
  store i32 %shl23, i32* %posbits, align 4
  %18 = load i32, i32* @block_mode, align 4
  %tobool24 = icmp ne i32 %18, 0
  %cond25 = select i1 %tobool24, i32 257, i32 256
  store i32 %cond25, i32* %free_ent, align 4
  call void @llvm.memset.p0i8.i32(i8* bitcast ([65536 x i16]* @prev to i8*), i8 0, i32 256, i32 2, i1 false)
  store i32 255, i32* %code, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end21
  %19 = load i32, i32* %code, align 4
  %cmp26 = icmp sge i32 %19, 0
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i32, i32* %code, align 4
  %conv28 = trunc i32 %20 to i8
  %21 = load i32, i32* %code, align 4
  %arrayidx29 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %21
  store i8 %conv28, i8* %arrayidx29, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %code, align 4
  %dec = add nsw i32 %22, -1
  store i32 %dec, i32* %code, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond203, %for.end
  br label %resetbuf

resetbuf:                                         ; preds = %if.then115, %if.end82, %do.body
  %23 = load i32, i32* @insize, align 4
  %24 = load i32, i32* %posbits, align 4
  %shr = ashr i32 %24, 3
  store i32 %shr, i32* %o, align 4
  %sub30 = sub i32 %23, %shr
  store i32 %sub30, i32* %e, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc37, %resetbuf
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %e, align 4
  %cmp32 = icmp slt i32 %25, %26
  br i1 %cmp32, label %for.body34, label %for.end39

for.body34:                                       ; preds = %for.cond31
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %o, align 4
  %add = add nsw i32 %27, %28
  %arrayidx35 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %add
  %29 = load i8, i8* %arrayidx35, align 1
  %30 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %30
  store i8 %29, i8* %arrayidx36, align 1
  br label %for.inc37

for.inc37:                                        ; preds = %for.body34
  %31 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %31, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond31

for.end39:                                        ; preds = %for.cond31
  %32 = load i32, i32* %e, align 4
  store i32 %32, i32* @insize, align 4
  store i32 0, i32* %posbits, align 4
  %33 = load i32, i32* @insize, align 4
  %cmp40 = icmp ult i32 %33, 64
  br i1 %cmp40, label %if.then42, label %if.end50

if.then42:                                        ; preds = %for.end39
  %34 = load i32, i32* @insize, align 4
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %34
  %35 = load i32, i32* %in.addr, align 4
  %call43 = call i32 @spec_read(i32 %35, i8* %add.ptr, i32 32768)
  store i32 %call43, i32* %rsize, align 4
  %cmp44 = icmp eq i32 %call43, -1
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.then42
  call void @read_error()
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %if.then42
  %36 = load i32, i32* %rsize, align 4
  %37 = load i32, i32* @insize, align 4
  %add48 = add i32 %37, %36
  store i32 %add48, i32* @insize, align 4
  %38 = load i32, i32* %rsize, align 4
  %39 = load i32, i32* @bytes_in, align 4
  %add49 = add i32 %39, %38
  store i32 %add49, i32* @bytes_in, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.end47, %for.end39
  %40 = load i32, i32* %rsize, align 4
  %cmp51 = icmp ne i32 %40, 0
  br i1 %cmp51, label %cond.true53, label %cond.false56

cond.true53:                                      ; preds = %if.end50
  %41 = load i32, i32* @insize, align 4
  %42 = load i32, i32* @insize, align 4
  %43 = load i32, i32* %n_bits, align 4
  %rem = urem i32 %42, %43
  %sub54 = sub i32 %41, %rem
  %shl55 = shl i32 %sub54, 3
  br label %cond.end60

cond.false56:                                     ; preds = %if.end50
  %44 = load i32, i32* @insize, align 4
  %shl57 = shl i32 %44, 3
  %45 = load i32, i32* %n_bits, align 4
  %sub58 = sub nsw i32 %45, 1
  %sub59 = sub nsw i32 %shl57, %sub58
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false56, %cond.true53
  %cond61 = phi i32 [ %shl55, %cond.true53 ], [ %sub59, %cond.false56 ]
  store i32 %cond61, i32* %inbits, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end201, %if.end107, %cond.end60
  %46 = load i32, i32* %inbits, align 4
  %47 = load i32, i32* %posbits, align 4
  %cmp62 = icmp sgt i32 %46, %47
  br i1 %cmp62, label %while.body, label %while.end202

while.body:                                       ; preds = %while.cond
  %48 = load i32, i32* %free_ent, align 4
  %49 = load i32, i32* %maxcode, align 4
  %cmp64 = icmp sgt i32 %48, %49
  br i1 %cmp64, label %if.then66, label %if.end85

if.then66:                                        ; preds = %while.body
  %50 = load i32, i32* %posbits, align 4
  %sub67 = sub nsw i32 %50, 1
  %51 = load i32, i32* %n_bits, align 4
  %shl68 = shl i32 %51, 3
  %52 = load i32, i32* %posbits, align 4
  %sub69 = sub nsw i32 %52, 1
  %53 = load i32, i32* %n_bits, align 4
  %shl70 = shl i32 %53, 3
  %add71 = add nsw i32 %sub69, %shl70
  %54 = load i32, i32* %n_bits, align 4
  %shl72 = shl i32 %54, 3
  %rem73 = srem i32 %add71, %shl72
  %sub74 = sub nsw i32 %shl68, %rem73
  %add75 = add nsw i32 %sub67, %sub74
  store i32 %add75, i32* %posbits, align 4
  %55 = load i32, i32* %n_bits, align 4
  %inc76 = add nsw i32 %55, 1
  store i32 %inc76, i32* %n_bits, align 4
  %56 = load i32, i32* %n_bits, align 4
  %57 = load i32, i32* @maxbits, align 4
  %cmp77 = icmp eq i32 %56, %57
  br i1 %cmp77, label %if.then79, label %if.else

if.then79:                                        ; preds = %if.then66
  %58 = load i32, i32* %maxmaxcode, align 4
  store i32 %58, i32* %maxcode, align 4
  br label %if.end82

if.else:                                          ; preds = %if.then66
  %59 = load i32, i32* %n_bits, align 4
  %shl80 = shl i32 1, %59
  %sub81 = sub nsw i32 %shl80, 1
  store i32 %sub81, i32* %maxcode, align 4
  br label %if.end82

if.end82:                                         ; preds = %if.else, %if.then79
  %60 = load i32, i32* %n_bits, align 4
  %shl83 = shl i32 1, %60
  %sub84 = sub nsw i32 %shl83, 1
  store i32 %sub84, i32* %bitmask, align 4
  br label %resetbuf

if.end85:                                         ; preds = %while.body
  %61 = load i32, i32* %posbits, align 4
  %shr86 = ashr i32 %61, 3
  %arrayidx87 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %shr86
  store i8* %arrayidx87, i8** %p, align 4
  %62 = load i8*, i8** %p, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %62, i32 0
  %63 = load i8, i8* %arrayidx88, align 1
  %conv89 = zext i8 %63 to i32
  %64 = load i8*, i8** %p, align 4
  %arrayidx90 = getelementptr inbounds i8, i8* %64, i32 1
  %65 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %65 to i32
  %shl92 = shl i32 %conv91, 8
  %or = or i32 %conv89, %shl92
  %66 = load i8*, i8** %p, align 4
  %arrayidx93 = getelementptr inbounds i8, i8* %66, i32 2
  %67 = load i8, i8* %arrayidx93, align 1
  %conv94 = zext i8 %67 to i32
  %shl95 = shl i32 %conv94, 16
  %or96 = or i32 %or, %shl95
  %68 = load i32, i32* %posbits, align 4
  %and97 = and i32 %68, 7
  %shr98 = ashr i32 %or96, %and97
  %69 = load i32, i32* %bitmask, align 4
  %and99 = and i32 %shr98, %69
  store i32 %and99, i32* %code, align 4
  %70 = load i32, i32* %n_bits, align 4
  %71 = load i32, i32* %posbits, align 4
  %add100 = add nsw i32 %71, %70
  store i32 %add100, i32* %posbits, align 4
  %72 = load i32, i32* %oldcode, align 4
  %cmp101 = icmp eq i32 %72, -1
  br i1 %cmp101, label %if.then103, label %if.end111

if.then103:                                       ; preds = %if.end85
  %73 = load i32, i32* %code, align 4
  %cmp104 = icmp sge i32 %73, 256
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.then103
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.96, i32 0, i32 0))
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.then103
  %74 = load i32, i32* %code, align 4
  store i32 %74, i32* %oldcode, align 4
  store i32 %74, i32* %finchar, align 4
  %conv108 = trunc i32 %74 to i8
  %75 = load i32, i32* %outpos, align 4
  %inc109 = add nsw i32 %75, 1
  store i32 %inc109, i32* %outpos, align 4
  %arrayidx110 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %75
  store i8 %conv108, i8* %arrayidx110, align 1
  br label %while.cond

if.end111:                                        ; preds = %if.end85
  %76 = load i32, i32* %code, align 4
  %cmp112 = icmp eq i32 %76, 256
  br i1 %cmp112, label %land.lhs.true, label %if.end127

land.lhs.true:                                    ; preds = %if.end111
  %77 = load i32, i32* @block_mode, align 4
  %tobool114 = icmp ne i32 %77, 0
  br i1 %tobool114, label %if.then115, label %if.end127

if.then115:                                       ; preds = %land.lhs.true
  call void @llvm.memset.p0i8.i32(i8* bitcast ([65536 x i16]* @prev to i8*), i8 0, i32 256, i32 2, i1 false)
  store i32 256, i32* %free_ent, align 4
  %78 = load i32, i32* %posbits, align 4
  %sub116 = sub nsw i32 %78, 1
  %79 = load i32, i32* %n_bits, align 4
  %shl117 = shl i32 %79, 3
  %80 = load i32, i32* %posbits, align 4
  %sub118 = sub nsw i32 %80, 1
  %81 = load i32, i32* %n_bits, align 4
  %shl119 = shl i32 %81, 3
  %add120 = add nsw i32 %sub118, %shl119
  %82 = load i32, i32* %n_bits, align 4
  %shl121 = shl i32 %82, 3
  %rem122 = srem i32 %add120, %shl121
  %sub123 = sub nsw i32 %shl117, %rem122
  %add124 = add nsw i32 %sub116, %sub123
  store i32 %add124, i32* %posbits, align 4
  store i32 9, i32* %n_bits, align 4
  store i32 511, i32* %maxcode, align 4
  %83 = load i32, i32* %n_bits, align 4
  %shl125 = shl i32 1, %83
  %sub126 = sub nsw i32 %shl125, 1
  store i32 %sub126, i32* %bitmask, align 4
  br label %resetbuf

if.end127:                                        ; preds = %land.lhs.true, %if.end111
  %84 = load i32, i32* %code, align 4
  store i32 %84, i32* %incode, align 4
  store i8* bitcast (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i32 0, i32 32767) to i8*), i8** %stackp, align 4
  %85 = load i32, i32* %code, align 4
  %86 = load i32, i32* %free_ent, align 4
  %cmp128 = icmp sge i32 %85, %86
  br i1 %cmp128, label %if.then130, label %if.end145

if.then130:                                       ; preds = %if.end127
  %87 = load i32, i32* %code, align 4
  %88 = load i32, i32* %free_ent, align 4
  %cmp131 = icmp sgt i32 %87, %88
  br i1 %cmp131, label %if.then133, label %if.end143

if.then133:                                       ; preds = %if.then130
  %89 = load i32, i32* @test, align 4
  %tobool134 = icmp ne i32 %89, 0
  br i1 %tobool134, label %if.end140, label %land.lhs.true135

land.lhs.true135:                                 ; preds = %if.then133
  %90 = load i32, i32* %outpos, align 4
  %cmp136 = icmp sgt i32 %90, 0
  br i1 %cmp136, label %if.then138, label %if.end140

if.then138:                                       ; preds = %land.lhs.true135
  %91 = load i32, i32* %outpos, align 4
  %92 = load i32, i32* %out.addr, align 4
  call void @write_buf(i32 %92, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 %91)
  %93 = load i32, i32* %outpos, align 4
  %94 = load i32, i32* @bytes_out, align 4
  %add139 = add i32 %94, %93
  store i32 %add139, i32* @bytes_out, align 4
  br label %if.end140

if.end140:                                        ; preds = %if.then138, %land.lhs.true135, %if.then133
  %95 = load i32, i32* @to_stdout, align 4
  %tobool141 = icmp ne i32 %95, 0
  %cond142 = select i1 %tobool141, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3.97, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4.98, i32 0, i32 0)
  call void @error(i8* %cond142)
  br label %if.end143

if.end143:                                        ; preds = %if.end140, %if.then130
  %96 = load i32, i32* %finchar, align 4
  %conv144 = trunc i32 %96 to i8
  %97 = load i8*, i8** %stackp, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %97, i32 -1
  store i8* %incdec.ptr, i8** %stackp, align 4
  store i8 %conv144, i8* %incdec.ptr, align 1
  %98 = load i32, i32* %oldcode, align 4
  store i32 %98, i32* %code, align 4
  br label %if.end145

if.end145:                                        ; preds = %if.end143, %if.end127
  br label %while.cond146

while.cond146:                                    ; preds = %while.body149, %if.end145
  %99 = load i32, i32* %code, align 4
  %cmp147 = icmp uge i32 %99, 256
  br i1 %cmp147, label %while.body149, label %while.end

while.body149:                                    ; preds = %while.cond146
  %100 = load i32, i32* %code, align 4
  %arrayidx150 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %100
  %101 = load i8, i8* %arrayidx150, align 1
  %102 = load i8*, i8** %stackp, align 4
  %incdec.ptr151 = getelementptr inbounds i8, i8* %102, i32 -1
  store i8* %incdec.ptr151, i8** %stackp, align 4
  store i8 %101, i8* %incdec.ptr151, align 1
  %103 = load i32, i32* %code, align 4
  %arrayidx152 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %103
  %104 = load i16, i16* %arrayidx152, align 2
  %conv153 = zext i16 %104 to i32
  store i32 %conv153, i32* %code, align 4
  br label %while.cond146

while.end:                                        ; preds = %while.cond146
  %105 = load i32, i32* %code, align 4
  %arrayidx154 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %105
  %106 = load i8, i8* %arrayidx154, align 1
  %conv155 = zext i8 %106 to i32
  store i32 %conv155, i32* %finchar, align 4
  %conv156 = trunc i32 %conv155 to i8
  %107 = load i8*, i8** %stackp, align 4
  %incdec.ptr157 = getelementptr inbounds i8, i8* %107, i32 -1
  store i8* %incdec.ptr157, i8** %stackp, align 4
  store i8 %conv156, i8* %incdec.ptr157, align 1
  %108 = load i32, i32* %outpos, align 4
  %109 = load i8*, i8** %stackp, align 4
  %sub.ptr.rhs.cast = ptrtoint i8* %109 to i32
  %sub.ptr.sub = sub i32 ptrtoint (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i32 0, i32 32767) to i32), %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %i158, align 4
  %add159 = add nsw i32 %108, %sub.ptr.sub
  %cmp160 = icmp sge i32 %add159, 16384
  br i1 %cmp160, label %if.then162, label %if.else189

if.then162:                                       ; preds = %while.end
  br label %do.body163

do.body163:                                       ; preds = %do.cond, %if.then162
  %110 = load i32, i32* %i158, align 4
  %111 = load i32, i32* %outpos, align 4
  %sub164 = sub nsw i32 16384, %111
  %cmp165 = icmp sgt i32 %110, %sub164
  br i1 %cmp165, label %if.then167, label %if.end169

if.then167:                                       ; preds = %do.body163
  %112 = load i32, i32* %outpos, align 4
  %sub168 = sub nsw i32 16384, %112
  store i32 %sub168, i32* %i158, align 4
  br label %if.end169

if.end169:                                        ; preds = %if.then167, %do.body163
  %113 = load i32, i32* %i158, align 4
  %cmp170 = icmp sgt i32 %113, 0
  br i1 %cmp170, label %if.then172, label %if.end175

if.then172:                                       ; preds = %if.end169
  %114 = load i32, i32* %outpos, align 4
  %add.ptr173 = getelementptr inbounds i8, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 %114
  %115 = load i8*, i8** %stackp, align 4
  %116 = load i32, i32* %i158, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %add.ptr173, i8* %115, i32 %116, i32 1, i1 false)
  %117 = load i32, i32* %i158, align 4
  %118 = load i32, i32* %outpos, align 4
  %add174 = add nsw i32 %118, %117
  store i32 %add174, i32* %outpos, align 4
  br label %if.end175

if.end175:                                        ; preds = %if.then172, %if.end169
  %119 = load i32, i32* %outpos, align 4
  %cmp176 = icmp sge i32 %119, 16384
  br i1 %cmp176, label %if.then178, label %if.end183

if.then178:                                       ; preds = %if.end175
  %120 = load i32, i32* @test, align 4
  %tobool179 = icmp ne i32 %120, 0
  br i1 %tobool179, label %if.end182, label %if.then180

if.then180:                                       ; preds = %if.then178
  %121 = load i32, i32* %outpos, align 4
  %122 = load i32, i32* %out.addr, align 4
  call void @write_buf(i32 %122, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 %121)
  %123 = load i32, i32* %outpos, align 4
  %124 = load i32, i32* @bytes_out, align 4
  %add181 = add i32 %124, %123
  store i32 %add181, i32* @bytes_out, align 4
  br label %if.end182

if.end182:                                        ; preds = %if.then180, %if.then178
  store i32 0, i32* %outpos, align 4
  br label %if.end183

if.end183:                                        ; preds = %if.end182, %if.end175
  %125 = load i32, i32* %i158, align 4
  %126 = load i8*, i8** %stackp, align 4
  %add.ptr184 = getelementptr inbounds i8, i8* %126, i32 %125
  store i8* %add.ptr184, i8** %stackp, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end183
  %127 = load i8*, i8** %stackp, align 4
  %sub.ptr.rhs.cast185 = ptrtoint i8* %127 to i32
  %sub.ptr.sub186 = sub i32 ptrtoint (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i32 0, i32 32767) to i32), %sub.ptr.rhs.cast185
  store i32 %sub.ptr.sub186, i32* %i158, align 4
  %cmp187 = icmp sgt i32 %sub.ptr.sub186, 0
  br i1 %cmp187, label %do.body163, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end192

if.else189:                                       ; preds = %while.end
  %128 = load i32, i32* %outpos, align 4
  %add.ptr190 = getelementptr inbounds i8, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 %128
  %129 = load i8*, i8** %stackp, align 4
  %130 = load i32, i32* %i158, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %add.ptr190, i8* %129, i32 %130, i32 1, i1 false)
  %131 = load i32, i32* %i158, align 4
  %132 = load i32, i32* %outpos, align 4
  %add191 = add nsw i32 %132, %131
  store i32 %add191, i32* %outpos, align 4
  br label %if.end192

if.end192:                                        ; preds = %if.else189, %do.end
  %133 = load i32, i32* %free_ent, align 4
  store i32 %133, i32* %code, align 4
  %134 = load i32, i32* %maxmaxcode, align 4
  %cmp193 = icmp slt i32 %133, %134
  br i1 %cmp193, label %if.then195, label %if.end201

if.then195:                                       ; preds = %if.end192
  %135 = load i32, i32* %oldcode, align 4
  %conv196 = trunc i32 %135 to i16
  %136 = load i32, i32* %code, align 4
  %arrayidx197 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i32 0, i32 %136
  store i16 %conv196, i16* %arrayidx197, align 2
  %137 = load i32, i32* %finchar, align 4
  %conv198 = trunc i32 %137 to i8
  %138 = load i32, i32* %code, align 4
  %arrayidx199 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %138
  store i8 %conv198, i8* %arrayidx199, align 1
  %139 = load i32, i32* %code, align 4
  %add200 = add nsw i32 %139, 1
  store i32 %add200, i32* %free_ent, align 4
  br label %if.end201

if.end201:                                        ; preds = %if.then195, %if.end192
  %140 = load i32, i32* %incode, align 4
  store i32 %140, i32* %oldcode, align 4
  br label %while.cond

while.end202:                                     ; preds = %while.cond
  br label %do.cond203

do.cond203:                                       ; preds = %while.end202
  %141 = load i32, i32* %rsize, align 4
  %cmp204 = icmp ne i32 %141, 0
  br i1 %cmp204, label %do.body, label %do.end206

do.end206:                                        ; preds = %do.cond203
  %142 = load i32, i32* @test, align 4
  %tobool207 = icmp ne i32 %142, 0
  br i1 %tobool207, label %if.end213, label %land.lhs.true208

land.lhs.true208:                                 ; preds = %do.end206
  %143 = load i32, i32* %outpos, align 4
  %cmp209 = icmp sgt i32 %143, 0
  br i1 %cmp209, label %if.then211, label %if.end213

if.then211:                                       ; preds = %land.lhs.true208
  %144 = load i32, i32* %outpos, align 4
  %145 = load i32, i32* %out.addr, align 4
  call void @write_buf(i32 %145, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 %144)
  %146 = load i32, i32* %outpos, align 4
  %147 = load i32, i32* @bytes_out, align 4
  %add212 = add i32 %147, %146
  store i32 %add212, i32* @bytes_out, align 4
  br label %if.end213

if.end213:                                        ; preds = %if.then211, %land.lhs.true208, %do.end206
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end213, %if.then17
  %148 = load i32, i32* %retval, align 4
  ret i32 %148
}

; Function Attrs: noinline nounwind
define i32 @unpack(i32 %in, i32 %out) #0 {
entry:
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %eob = alloca i32, align 4
  %peek = alloca i32, align 4
  %peek_mask = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* %in.addr, align 4
  store i32 %0, i32* @ifd, align 4
  %1 = load i32, i32* %out.addr, align 4
  store i32 %1, i32* @ofd, align 4
  call void @read_tree()
  call void @build_tree.103()
  store i32 0, i32* @valid, align 4
  store i32 0, i32* @bitbuf.104, align 4
  %2 = load i32, i32* @peek_bits, align 4
  %shl = shl i32 1, %2
  %sub = sub nsw i32 %shl, 1
  store i32 %sub, i32* %peek_mask, align 4
  %3 = load i32, i32* @max_len, align 4
  %arrayidx = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %sub1 = sub nsw i32 %4, 1
  store i32 %sub1, i32* %eob, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end53, %entry
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %for.cond
  %5 = load i32, i32* @valid, align 4
  %6 = load i32, i32* @peek_bits, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* @bitbuf.104, align 4
  %shl2 = shl i32 %7, 8
  %8 = load i32, i32* @inptr, align 4
  %9 = load i32, i32* @insize, align 4
  %cmp3 = icmp ult i32 %8, %9
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %10 = load i32, i32* @inptr, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx4 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %10
  %11 = load i8, i8* %arrayidx4, align 1
  %conv = zext i8 %11 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ]
  %or = or i32 %shl2, %cond
  store i32 %or, i32* @bitbuf.104, align 4
  %12 = load i32, i32* @valid, align 4
  %add = add nsw i32 %12, 8
  store i32 %add, i32* @valid, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i32, i32* @bitbuf.104, align 4
  %14 = load i32, i32* @valid, align 4
  %15 = load i32, i32* @peek_bits, align 4
  %sub5 = sub nsw i32 %14, %15
  %shr = lshr i32 %13, %sub5
  %16 = load i32, i32* %peek_mask, align 4
  %and = and i32 %shr, %16
  store i32 %and, i32* %peek, align 4
  %17 = load i32, i32* %peek, align 4
  %arrayidx6 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %17
  %18 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %18 to i32
  store i32 %conv7, i32* %len, align 4
  %19 = load i32, i32* %len, align 4
  %cmp8 = icmp sgt i32 %19, 0
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %20 = load i32, i32* @peek_bits, align 4
  %21 = load i32, i32* %len, align 4
  %sub10 = sub nsw i32 %20, %21
  %22 = load i32, i32* %peek, align 4
  %shr11 = lshr i32 %22, %sub10
  store i32 %shr11, i32* %peek, align 4
  br label %if.end

if.else:                                          ; preds = %while.end
  %23 = load i32, i32* %peek_mask, align 4
  store i32 %23, i32* %mask, align 4
  %24 = load i32, i32* @peek_bits, align 4
  store i32 %24, i32* %len, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.else
  %25 = load i32, i32* %len, align 4
  %inc12 = add nsw i32 %25, 1
  store i32 %inc12, i32* %len, align 4
  %26 = load i32, i32* %mask, align 4
  %shl13 = shl i32 %26, 1
  %add14 = add i32 %shl13, 1
  store i32 %add14, i32* %mask, align 4
  br label %while.cond15

while.cond15:                                     ; preds = %cond.end28, %do.body
  %27 = load i32, i32* @valid, align 4
  %28 = load i32, i32* %len, align 4
  %cmp16 = icmp slt i32 %27, %28
  br i1 %cmp16, label %while.body18, label %while.end32

while.body18:                                     ; preds = %while.cond15
  %29 = load i32, i32* @bitbuf.104, align 4
  %shl19 = shl i32 %29, 8
  %30 = load i32, i32* @inptr, align 4
  %31 = load i32, i32* @insize, align 4
  %cmp20 = icmp ult i32 %30, %31
  br i1 %cmp20, label %cond.true22, label %cond.false26

cond.true22:                                      ; preds = %while.body18
  %32 = load i32, i32* @inptr, align 4
  %inc23 = add i32 %32, 1
  store i32 %inc23, i32* @inptr, align 4
  %arrayidx24 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %32
  %33 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %33 to i32
  br label %cond.end28

cond.false26:                                     ; preds = %while.body18
  %call27 = call i32 @fill_inbuf(i32 0)
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false26, %cond.true22
  %cond29 = phi i32 [ %conv25, %cond.true22 ], [ %call27, %cond.false26 ]
  %or30 = or i32 %shl19, %cond29
  store i32 %or30, i32* @bitbuf.104, align 4
  %34 = load i32, i32* @valid, align 4
  %add31 = add nsw i32 %34, 8
  store i32 %add31, i32* @valid, align 4
  br label %while.cond15

while.end32:                                      ; preds = %while.cond15
  %35 = load i32, i32* @bitbuf.104, align 4
  %36 = load i32, i32* @valid, align 4
  %37 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %36, %37
  %shr34 = lshr i32 %35, %sub33
  %38 = load i32, i32* %mask, align 4
  %and35 = and i32 %shr34, %38
  store i32 %and35, i32* %peek, align 4
  br label %do.cond

do.cond:                                          ; preds = %while.end32
  %39 = load i32, i32* %peek, align 4
  %40 = load i32, i32* %len, align 4
  %arrayidx36 = getelementptr inbounds [26 x i32], [26 x i32]* @parents, i32 0, i32 %40
  %41 = load i32, i32* %arrayidx36, align 4
  %cmp37 = icmp ult i32 %39, %41
  br i1 %cmp37, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  %42 = load i32, i32* %peek, align 4
  %43 = load i32, i32* %eob, align 4
  %cmp39 = icmp eq i32 %42, %43
  br i1 %cmp39, label %land.lhs.true, label %if.end44

land.lhs.true:                                    ; preds = %if.end
  %44 = load i32, i32* %len, align 4
  %45 = load i32, i32* @max_len, align 4
  %cmp41 = icmp eq i32 %44, %45
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %land.lhs.true
  br label %for.end

if.end44:                                         ; preds = %land.lhs.true, %if.end
  %46 = load i32, i32* %peek, align 4
  %47 = load i32, i32* %len, align 4
  %arrayidx45 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i32 0, i32 %47
  %48 = load i32, i32* %arrayidx45, align 4
  %add46 = add i32 %46, %48
  %arrayidx47 = getelementptr inbounds [256 x i8], [256 x i8]* @literal, i32 0, i32 %add46
  %49 = load i8, i8* %arrayidx47, align 1
  %50 = load i32, i32* @outcnt, align 4
  %inc48 = add i32 %50, 1
  store i32 %inc48, i32* @outcnt, align 4
  %arrayidx49 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %50
  store i8 %49, i8* %arrayidx49, align 1
  %51 = load i32, i32* @outcnt, align 4
  %cmp50 = icmp eq i32 %51, 32768
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.end44
  call void @flush_window()
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.end44
  %52 = load i32, i32* %len, align 4
  %53 = load i32, i32* @valid, align 4
  %sub54 = sub nsw i32 %53, %52
  store i32 %sub54, i32* @valid, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then43
  call void @flush_window()
  %54 = load i32, i32* @orig_len, align 4
  %55 = load i32, i32* @bytes_out, align 4
  %cmp55 = icmp ne i32 %54, %55
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %for.end
  call void @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.105, i32 0, i32 0))
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %for.end
  ret i32 0
}

; Function Attrs: noinline nounwind
define internal void @read_tree() #0 {
entry:
  %len = alloca i32, align 4
  %base = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* @orig_len, align 4
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* @orig_len, align 4
  %shl = shl i32 %1, 8
  %2 = load i32, i32* @inptr, align 4
  %3 = load i32, i32* @insize, align 4
  %cmp1 = icmp ult i32 %2, %3
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %4 = load i32, i32* @inptr, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %call = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ]
  %or = or i32 %shl, %cond
  store i32 %or, i32* @orig_len, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %6 = load i32, i32* %n, align 4
  %inc2 = add nsw i32 %6, 1
  store i32 %inc2, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @inptr, align 4
  %8 = load i32, i32* @insize, align 4
  %cmp3 = icmp ult i32 %7, %8
  br i1 %cmp3, label %cond.true5, label %cond.false9

cond.true5:                                       ; preds = %for.end
  %9 = load i32, i32* @inptr, align 4
  %inc6 = add i32 %9, 1
  store i32 %inc6, i32* @inptr, align 4
  %arrayidx7 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %9
  %10 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %10 to i32
  br label %cond.end11

cond.false9:                                      ; preds = %for.end
  %call10 = call i32 @fill_inbuf(i32 0)
  br label %cond.end11

cond.end11:                                       ; preds = %cond.false9, %cond.true5
  %cond12 = phi i32 [ %conv8, %cond.true5 ], [ %call10, %cond.false9 ]
  store i32 %cond12, i32* @max_len, align 4
  %11 = load i32, i32* @max_len, align 4
  %cmp13 = icmp sgt i32 %11, 25
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end11
  call void @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1.101, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end11
  store i32 0, i32* %n, align 4
  store i32 1, i32* %len, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc31, %if.end
  %12 = load i32, i32* %len, align 4
  %13 = load i32, i32* @max_len, align 4
  %cmp16 = icmp sle i32 %12, %13
  br i1 %cmp16, label %for.body18, label %for.end33

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* @inptr, align 4
  %15 = load i32, i32* @insize, align 4
  %cmp19 = icmp ult i32 %14, %15
  br i1 %cmp19, label %cond.true21, label %cond.false25

cond.true21:                                      ; preds = %for.body18
  %16 = load i32, i32* @inptr, align 4
  %inc22 = add i32 %16, 1
  store i32 %inc22, i32* @inptr, align 4
  %arrayidx23 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %16
  %17 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %17 to i32
  br label %cond.end27

cond.false25:                                     ; preds = %for.body18
  %call26 = call i32 @fill_inbuf(i32 0)
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false25, %cond.true21
  %cond28 = phi i32 [ %conv24, %cond.true21 ], [ %call26, %cond.false25 ]
  %18 = load i32, i32* %len, align 4
  %arrayidx29 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %18
  store i32 %cond28, i32* %arrayidx29, align 4
  %19 = load i32, i32* %len, align 4
  %arrayidx30 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx30, align 4
  %21 = load i32, i32* %n, align 4
  %add = add nsw i32 %21, %20
  store i32 %add, i32* %n, align 4
  br label %for.inc31

for.inc31:                                        ; preds = %cond.end27
  %22 = load i32, i32* %len, align 4
  %inc32 = add nsw i32 %22, 1
  store i32 %inc32, i32* %len, align 4
  br label %for.cond15

for.end33:                                        ; preds = %for.cond15
  %23 = load i32, i32* %n, align 4
  %cmp34 = icmp sgt i32 %23, 256
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end33
  call void @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2.102, i32 0, i32 0))
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end33
  %24 = load i32, i32* @max_len, align 4
  %arrayidx38 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  store i32 0, i32* %base, align 4
  store i32 1, i32* %len, align 4
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc65, %if.end37
  %26 = load i32, i32* %len, align 4
  %27 = load i32, i32* @max_len, align 4
  %cmp41 = icmp sle i32 %26, %27
  br i1 %cmp41, label %for.body43, label %for.end67

for.body43:                                       ; preds = %for.cond40
  %28 = load i32, i32* %base, align 4
  %29 = load i32, i32* %len, align 4
  %arrayidx44 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i32 0, i32 %29
  store i32 %28, i32* %arrayidx44, align 4
  %30 = load i32, i32* %len, align 4
  %arrayidx45 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %30
  %31 = load i32, i32* %arrayidx45, align 4
  store i32 %31, i32* %n, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc63, %for.body43
  %32 = load i32, i32* %n, align 4
  %cmp47 = icmp sgt i32 %32, 0
  br i1 %cmp47, label %for.body49, label %for.end64

for.body49:                                       ; preds = %for.cond46
  %33 = load i32, i32* @inptr, align 4
  %34 = load i32, i32* @insize, align 4
  %cmp50 = icmp ult i32 %33, %34
  br i1 %cmp50, label %cond.true52, label %cond.false56

cond.true52:                                      ; preds = %for.body49
  %35 = load i32, i32* @inptr, align 4
  %inc53 = add i32 %35, 1
  store i32 %inc53, i32* @inptr, align 4
  %arrayidx54 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %35
  %36 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %36 to i32
  br label %cond.end58

cond.false56:                                     ; preds = %for.body49
  %call57 = call i32 @fill_inbuf(i32 0)
  br label %cond.end58

cond.end58:                                       ; preds = %cond.false56, %cond.true52
  %cond59 = phi i32 [ %conv55, %cond.true52 ], [ %call57, %cond.false56 ]
  %conv60 = trunc i32 %cond59 to i8
  %37 = load i32, i32* %base, align 4
  %inc61 = add nsw i32 %37, 1
  store i32 %inc61, i32* %base, align 4
  %arrayidx62 = getelementptr inbounds [256 x i8], [256 x i8]* @literal, i32 0, i32 %37
  store i8 %conv60, i8* %arrayidx62, align 1
  br label %for.inc63

for.inc63:                                        ; preds = %cond.end58
  %38 = load i32, i32* %n, align 4
  %dec = add nsw i32 %38, -1
  store i32 %dec, i32* %n, align 4
  br label %for.cond46

for.end64:                                        ; preds = %for.cond46
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %39 = load i32, i32* %len, align 4
  %inc66 = add nsw i32 %39, 1
  store i32 %inc66, i32* %len, align 4
  br label %for.cond40

for.end67:                                        ; preds = %for.cond40
  %40 = load i32, i32* @max_len, align 4
  %arrayidx68 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %40
  %41 = load i32, i32* %arrayidx68, align 4
  %inc69 = add nsw i32 %41, 1
  store i32 %inc69, i32* %arrayidx68, align 4
  ret void
}

; Function Attrs: noinline nounwind
define internal void @build_tree.103() #0 {
entry:
  %nodes = alloca i32, align 4
  %len = alloca i32, align 4
  %prefixp = alloca i8*, align 4
  %prefixes = alloca i32, align 4
  store i32 0, i32* %nodes, align 4
  %0 = load i32, i32* @max_len, align 4
  store i32 %0, i32* %len, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %len, align 4
  %cmp = icmp sge i32 %1, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %nodes, align 4
  %shr = ashr i32 %2, 1
  store i32 %shr, i32* %nodes, align 4
  %3 = load i32, i32* %nodes, align 4
  %4 = load i32, i32* %len, align 4
  %arrayidx = getelementptr inbounds [26 x i32], [26 x i32]* @parents, i32 0, i32 %4
  store i32 %3, i32* %arrayidx, align 4
  %5 = load i32, i32* %nodes, align 4
  %6 = load i32, i32* %len, align 4
  %arrayidx1 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %7, %5
  store i32 %sub, i32* %arrayidx1, align 4
  %8 = load i32, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  %10 = load i32, i32* %nodes, align 4
  %add = add nsw i32 %10, %9
  store i32 %add, i32* %nodes, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %len, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %len, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* @max_len, align 4
  %cmp3 = icmp sle i32 %12, 12
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %13 = load i32, i32* @max_len, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ 12, %cond.false ]
  store i32 %cond, i32* @peek_bits, align 4
  %14 = load i32, i32* @peek_bits, align 4
  %shl = shl i32 1, %14
  %arrayidx4 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %shl
  store i8* %arrayidx4, i8** %prefixp, align 4
  store i32 1, i32* %len, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %cond.end
  %15 = load i32, i32* %len, align 4
  %16 = load i32, i32* @peek_bits, align 4
  %cmp6 = icmp sle i32 %15, %16
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond5
  %17 = load i32, i32* %len, align 4
  %arrayidx8 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx8, align 4
  %19 = load i32, i32* @peek_bits, align 4
  %20 = load i32, i32* %len, align 4
  %sub9 = sub nsw i32 %19, %20
  %shl10 = shl i32 %18, %sub9
  store i32 %shl10, i32* %prefixes, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body7
  %21 = load i32, i32* %prefixes, align 4
  %dec11 = add nsw i32 %21, -1
  store i32 %dec11, i32* %prefixes, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i32, i32* %len, align 4
  %conv = trunc i32 %22 to i8
  %23 = load i8*, i8** %prefixp, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 -1
  store i8* %incdec.ptr, i8** %prefixp, align 4
  store i8 %conv, i8* %incdec.ptr, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc12

for.inc12:                                        ; preds = %while.end
  %24 = load i32, i32* %len, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %len, align 4
  br label %for.cond5

for.end13:                                        ; preds = %for.cond5
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %for.end13
  %25 = load i8*, i8** %prefixp, align 4
  %cmp15 = icmp ugt i8* %25, getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0)
  br i1 %cmp15, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %26 = load i8*, i8** %prefixp, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr18, i8** %prefixp, align 4
  store i8 0, i8* %incdec.ptr18, align 1
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  ret void
}

; Function Attrs: noinline nounwind
define i32 @check_zipfile(i32 %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %h = alloca i8*, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* @inptr, align 4
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %0
  store i8* %add.ptr, i8** %h, align 4
  %1 = load i32, i32* %in.addr, align 4
  store i32 %1, i32* @ifd, align 4
  %2 = load i8*, i8** %h, align 4
  %add.ptr1 = getelementptr inbounds i8, i8* %2, i32 26
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr1, i32 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i16
  %conv2 = zext i16 %conv to i32
  %4 = load i8*, i8** %h, align 4
  %add.ptr3 = getelementptr inbounds i8, i8* %4, i32 26
  %arrayidx4 = getelementptr inbounds i8, i8* %add.ptr3, i32 1
  %5 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %5 to i16
  %conv6 = zext i16 %conv5 to i32
  %shl = shl i32 %conv6, 8
  %or = or i32 %conv2, %shl
  %add = add nsw i32 30, %or
  %6 = load i8*, i8** %h, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %6, i32 28
  %arrayidx8 = getelementptr inbounds i8, i8* %add.ptr7, i32 0
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i16
  %conv10 = zext i16 %conv9 to i32
  %8 = load i8*, i8** %h, align 4
  %add.ptr11 = getelementptr inbounds i8, i8* %8, i32 28
  %arrayidx12 = getelementptr inbounds i8, i8* %add.ptr11, i32 1
  %9 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %9 to i16
  %conv14 = zext i16 %conv13 to i32
  %shl15 = shl i32 %conv14, 8
  %or16 = or i32 %conv10, %shl15
  %add17 = add nsw i32 %add, %or16
  %10 = load i32, i32* @inptr, align 4
  %add18 = add i32 %10, %add17
  store i32 %add18, i32* @inptr, align 4
  %11 = load i32, i32* @inptr, align 4
  %12 = load i32, i32* @insize, align 4
  %cmp = icmp ugt i32 %11, %12
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %13 = load i8*, i8** %h, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %13, i32 0
  %14 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %14 to i16
  %conv22 = zext i16 %conv21 to i32
  %15 = load i8*, i8** %h, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %15, i32 1
  %16 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %16 to i16
  %conv25 = zext i16 %conv24 to i32
  %shl26 = shl i32 %conv25, 8
  %or27 = or i32 %conv22, %shl26
  %17 = load i8*, i8** %h, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %17, i32 2
  %arrayidx29 = getelementptr inbounds i8, i8* %add.ptr28, i32 0
  %18 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %18 to i16
  %conv31 = zext i16 %conv30 to i32
  %19 = load i8*, i8** %h, align 4
  %add.ptr32 = getelementptr inbounds i8, i8* %19, i32 2
  %arrayidx33 = getelementptr inbounds i8, i8* %add.ptr32, i32 1
  %20 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %20 to i16
  %conv35 = zext i16 %conv34 to i32
  %shl36 = shl i32 %conv35, 8
  %or37 = or i32 %conv31, %shl36
  %shl38 = shl i32 %or37, 16
  %or39 = or i32 %or27, %shl38
  %cmp40 = icmp ne i32 %or39, 67324752
  br i1 %cmp40, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %21 = load i8*, i8** @progname, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx42 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call43 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx42, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.108, i32 0, i32 0), i8* %21, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %22 = load i8*, i8** %h, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %22, i32 8
  %23 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %23 to i32
  store i32 %conv45, i32* @method, align 4
  %24 = load i32, i32* @method, align 4
  %cmp46 = icmp ne i32 %24, 0
  br i1 %cmp46, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %if.end
  %25 = load i32, i32* @method, align 4
  %cmp48 = icmp ne i32 %25, 8
  br i1 %cmp48, label %if.then50, label %if.end54

if.then50:                                        ; preds = %land.lhs.true
  %26 = load i8*, i8** @progname, align 4
  %call51 = call %struct._iobuf* @__iob_func()
  %arrayidx52 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call51, i32 2
  %call53 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx52, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1.109, i32 0, i32 0), i8* %26, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %land.lhs.true, %if.end
  %27 = load i8*, i8** %h, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %27, i32 6
  %28 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %28 to i32
  %and = and i32 %conv56, 1
  store i32 %and, i32* @decrypt, align 4
  %cmp57 = icmp ne i32 %and, 0
  br i1 %cmp57, label %if.then59, label %if.end63

if.then59:                                        ; preds = %if.end54
  %29 = load i8*, i8** @progname, align 4
  %call60 = call %struct._iobuf* @__iob_func()
  %arrayidx61 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call60, i32 2
  %call62 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx61, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2.110, i32 0, i32 0), i8* %29, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %retval, align 4
  br label %return

if.end63:                                         ; preds = %if.end54
  %30 = load i8*, i8** %h, align 4
  %arrayidx64 = getelementptr inbounds i8, i8* %30, i32 6
  %31 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %31 to i32
  %and66 = and i32 %conv65, 8
  %cmp67 = icmp ne i32 %and66, 0
  %conv68 = zext i1 %cmp67 to i32
  store i32 %conv68, i32* @ext_header, align 4
  store i32 1, i32* @pkzip, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end63, %if.then59, %if.then50, %if.then
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: noinline nounwind
define i32 @unzip(i32 %in, i32 %out) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %orig_crc = alloca i32, align 4
  %orig_len = alloca i32, align 4
  %n = alloca i32, align 4
  %buf = alloca [16 x i8], align 1
  %res = alloca i32, align 4
  %n44 = alloca i32, align 4
  %c = alloca i8, align 1
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  store i32 0, i32* %orig_crc, align 4
  store i32 0, i32* %orig_len, align 4
  %0 = load i32, i32* %in.addr, align 4
  store i32 %0, i32* @ifd, align 4
  %1 = load i32, i32* %out.addr, align 4
  store i32 %1, i32* @ofd, align 4
  %call = call i32 @updcrc(i8* null, i32 0)
  %2 = load i32, i32* @pkzip, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @ext_header, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 14), align 1
  %conv = zext i8 %4 to i16
  %conv2 = zext i16 %conv to i32
  %5 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 15), align 1
  %conv3 = zext i8 %5 to i16
  %conv4 = zext i16 %conv3 to i32
  %shl = shl i32 %conv4, 8
  %or = or i32 %conv2, %shl
  %6 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 16), align 1
  %conv5 = zext i8 %6 to i16
  %conv6 = zext i16 %conv5 to i32
  %7 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 17), align 1
  %conv7 = zext i8 %7 to i16
  %conv8 = zext i16 %conv7 to i32
  %shl9 = shl i32 %conv8, 8
  %or10 = or i32 %conv6, %shl9
  %shl11 = shl i32 %or10, 16
  %or12 = or i32 %or, %shl11
  store i32 %or12, i32* %orig_crc, align 4
  %8 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 22), align 1
  %conv13 = zext i8 %8 to i16
  %conv14 = zext i16 %conv13 to i32
  %9 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 23), align 1
  %conv15 = zext i8 %9 to i16
  %conv16 = zext i16 %conv15 to i32
  %shl17 = shl i32 %conv16, 8
  %or18 = or i32 %conv14, %shl17
  %10 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 24), align 1
  %conv19 = zext i8 %10 to i16
  %conv20 = zext i16 %conv19 to i32
  %11 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 25), align 1
  %conv21 = zext i8 %11 to i16
  %conv22 = zext i16 %conv21 to i32
  %shl23 = shl i32 %conv22, 8
  %or24 = or i32 %conv20, %shl23
  %shl25 = shl i32 %or24, 16
  %or26 = or i32 %or18, %shl25
  store i32 %or26, i32* %orig_len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %12 = load i32, i32* @method, align 4
  %cmp = icmp eq i32 %12, 8
  br i1 %cmp, label %if.then28, label %if.else38

if.then28:                                        ; preds = %if.end
  %call29 = call i32 @inflate()
  store i32 %call29, i32* %res, align 4
  %13 = load i32, i32* %res, align 4
  %cmp30 = icmp eq i32 %13, 3
  br i1 %cmp30, label %if.then32, label %if.else

if.then32:                                        ; preds = %if.then28
  call void @error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3.113, i32 0, i32 0))
  br label %if.end37

if.else:                                          ; preds = %if.then28
  %14 = load i32, i32* %res, align 4
  %cmp33 = icmp ne i32 %14, 0
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.else
  call void @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4.114, i32 0, i32 0))
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then32
  br label %if.end110

if.else38:                                        ; preds = %if.end
  %15 = load i32, i32* @pkzip, align 4
  %tobool39 = icmp ne i32 %15, 0
  br i1 %tobool39, label %land.lhs.true40, label %if.else108

land.lhs.true40:                                  ; preds = %if.else38
  %16 = load i32, i32* @method, align 4
  %cmp41 = icmp eq i32 %16, 0
  br i1 %cmp41, label %if.then43, label %if.else108

if.then43:                                        ; preds = %land.lhs.true40
  %17 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 22), align 1
  %conv45 = zext i8 %17 to i16
  %conv46 = zext i16 %conv45 to i32
  %18 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 23), align 1
  %conv47 = zext i8 %18 to i16
  %conv48 = zext i16 %conv47 to i32
  %shl49 = shl i32 %conv48, 8
  %or50 = or i32 %conv46, %shl49
  %19 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 24), align 1
  %conv51 = zext i8 %19 to i16
  %conv52 = zext i16 %conv51 to i32
  %20 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 25), align 1
  %conv53 = zext i8 %20 to i16
  %conv54 = zext i16 %conv53 to i32
  %shl55 = shl i32 %conv54, 8
  %or56 = or i32 %conv52, %shl55
  %shl57 = shl i32 %or56, 16
  %or58 = or i32 %or50, %shl57
  store i32 %or58, i32* %n44, align 4
  %21 = load i32, i32* %n44, align 4
  %22 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 18), align 1
  %conv59 = zext i8 %22 to i16
  %conv60 = zext i16 %conv59 to i32
  %23 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 19), align 1
  %conv61 = zext i8 %23 to i16
  %conv62 = zext i16 %conv61 to i32
  %shl63 = shl i32 %conv62, 8
  %or64 = or i32 %conv60, %shl63
  %24 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 20), align 1
  %conv65 = zext i8 %24 to i16
  %conv66 = zext i16 %conv65 to i32
  %25 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 21), align 1
  %conv67 = zext i8 %25 to i16
  %conv68 = zext i16 %conv67 to i32
  %shl69 = shl i32 %conv68, 8
  %or70 = or i32 %conv66, %shl69
  %shl71 = shl i32 %or70, 16
  %or72 = or i32 %or64, %shl71
  %26 = load i32, i32* @decrypt, align 4
  %tobool73 = icmp ne i32 %26, 0
  %cond = select i1 %tobool73, i32 12, i32 0
  %sub = sub i32 %or72, %cond
  %cmp74 = icmp ne i32 %21, %sub
  br i1 %cmp74, label %if.then76, label %if.end93

if.then76:                                        ; preds = %if.then43
  %27 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 18), align 1
  %conv77 = zext i8 %27 to i16
  %conv78 = zext i16 %conv77 to i32
  %28 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 19), align 1
  %conv79 = zext i8 %28 to i16
  %conv80 = zext i16 %conv79 to i32
  %shl81 = shl i32 %conv80, 8
  %or82 = or i32 %conv78, %shl81
  %29 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 20), align 1
  %conv83 = zext i8 %29 to i16
  %conv84 = zext i16 %conv83 to i32
  %30 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 21), align 1
  %conv85 = zext i8 %30 to i16
  %conv86 = zext i16 %conv85 to i32
  %shl87 = shl i32 %conv86, 8
  %or88 = or i32 %conv84, %shl87
  %shl89 = shl i32 %or88, 16
  %or90 = or i32 %or82, %shl89
  %31 = load i32, i32* %n44, align 4
  %call91 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call91, i32 2
  %call92 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.115, i32 0, i32 0), i32 %31, i32 %or90)
  call void @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6.116, i32 0, i32 0))
  br label %if.end93

if.end93:                                         ; preds = %if.then76, %if.then43
  br label %while.cond

while.cond:                                       ; preds = %if.end107, %if.end93
  %32 = load i32, i32* %n44, align 4
  %dec = add i32 %32, -1
  store i32 %dec, i32* %n44, align 4
  %tobool94 = icmp ne i32 %32, 0
  br i1 %tobool94, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load i32, i32* @inptr, align 4
  %34 = load i32, i32* @insize, align 4
  %cmp95 = icmp ult i32 %33, %34
  br i1 %cmp95, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %35 = load i32, i32* @inptr, align 4
  %inc = add i32 %35, 1
  store i32 %inc, i32* @inptr, align 4
  %arrayidx97 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %35
  %36 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %36 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %call99 = call i32 @fill_inbuf(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond100 = phi i32 [ %conv98, %cond.true ], [ %call99, %cond.false ]
  %conv101 = trunc i32 %cond100 to i8
  store i8 %conv101, i8* %c, align 1
  %37 = load i8, i8* %c, align 1
  %38 = load i32, i32* @outcnt, align 4
  %inc102 = add i32 %38, 1
  store i32 %inc102, i32* @outcnt, align 4
  %arrayidx103 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i32 0, i32 %38
  store i8 %37, i8* %arrayidx103, align 1
  %39 = load i32, i32* @outcnt, align 4
  %cmp104 = icmp eq i32 %39, 32768
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %cond.end
  call void @flush_window()
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %cond.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @flush_window()
  br label %if.end109

if.else108:                                       ; preds = %land.lhs.true40, %if.else38
  call void @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7.117, i32 0, i32 0))
  br label %if.end109

if.end109:                                        ; preds = %if.else108, %while.end
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.end37
  %40 = load i32, i32* @pkzip, align 4
  %tobool111 = icmp ne i32 %40, 0
  br i1 %tobool111, label %if.else176, label %if.then112

if.then112:                                       ; preds = %if.end110
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then112
  %41 = load i32, i32* %n, align 4
  %cmp113 = icmp slt i32 %41, 8
  br i1 %cmp113, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %42 = load i32, i32* @inptr, align 4
  %43 = load i32, i32* @insize, align 4
  %cmp115 = icmp ult i32 %42, %43
  br i1 %cmp115, label %cond.true117, label %cond.false121

cond.true117:                                     ; preds = %for.body
  %44 = load i32, i32* @inptr, align 4
  %inc118 = add i32 %44, 1
  store i32 %inc118, i32* @inptr, align 4
  %arrayidx119 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %44
  %45 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %45 to i32
  br label %cond.end123

cond.false121:                                    ; preds = %for.body
  %call122 = call i32 @fill_inbuf(i32 0)
  br label %cond.end123

cond.end123:                                      ; preds = %cond.false121, %cond.true117
  %cond124 = phi i32 [ %conv120, %cond.true117 ], [ %call122, %cond.false121 ]
  %conv125 = trunc i32 %cond124 to i8
  %46 = load i32, i32* %n, align 4
  %arrayidx126 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 %46
  store i8 %conv125, i8* %arrayidx126, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end123
  %47 = load i32, i32* %n, align 4
  %inc127 = add nsw i32 %47, 1
  store i32 %inc127, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx128 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %48 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %48 to i16
  %conv130 = zext i16 %conv129 to i32
  %arrayidx131 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 1
  %49 = load i8, i8* %arrayidx131, align 1
  %conv132 = zext i8 %49 to i16
  %conv133 = zext i16 %conv132 to i32
  %shl134 = shl i32 %conv133, 8
  %or135 = or i32 %conv130, %shl134
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %arrayidx136 = getelementptr inbounds i8, i8* %add.ptr, i32 0
  %50 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %50 to i16
  %conv138 = zext i16 %conv137 to i32
  %arraydecay139 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr140 = getelementptr inbounds i8, i8* %arraydecay139, i32 2
  %arrayidx141 = getelementptr inbounds i8, i8* %add.ptr140, i32 1
  %51 = load i8, i8* %arrayidx141, align 1
  %conv142 = zext i8 %51 to i16
  %conv143 = zext i16 %conv142 to i32
  %shl144 = shl i32 %conv143, 8
  %or145 = or i32 %conv138, %shl144
  %shl146 = shl i32 %or145, 16
  %or147 = or i32 %or135, %shl146
  store i32 %or147, i32* %orig_crc, align 4
  %arraydecay148 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr149 = getelementptr inbounds i8, i8* %arraydecay148, i32 4
  %arrayidx150 = getelementptr inbounds i8, i8* %add.ptr149, i32 0
  %52 = load i8, i8* %arrayidx150, align 1
  %conv151 = zext i8 %52 to i16
  %conv152 = zext i16 %conv151 to i32
  %arraydecay153 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr154 = getelementptr inbounds i8, i8* %arraydecay153, i32 4
  %arrayidx155 = getelementptr inbounds i8, i8* %add.ptr154, i32 1
  %53 = load i8, i8* %arrayidx155, align 1
  %conv156 = zext i8 %53 to i16
  %conv157 = zext i16 %conv156 to i32
  %shl158 = shl i32 %conv157, 8
  %or159 = or i32 %conv152, %shl158
  %arraydecay160 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr161 = getelementptr inbounds i8, i8* %arraydecay160, i32 4
  %add.ptr162 = getelementptr inbounds i8, i8* %add.ptr161, i32 2
  %arrayidx163 = getelementptr inbounds i8, i8* %add.ptr162, i32 0
  %54 = load i8, i8* %arrayidx163, align 1
  %conv164 = zext i8 %54 to i16
  %conv165 = zext i16 %conv164 to i32
  %arraydecay166 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr167 = getelementptr inbounds i8, i8* %arraydecay166, i32 4
  %add.ptr168 = getelementptr inbounds i8, i8* %add.ptr167, i32 2
  %arrayidx169 = getelementptr inbounds i8, i8* %add.ptr168, i32 1
  %55 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %55 to i16
  %conv171 = zext i16 %conv170 to i32
  %shl172 = shl i32 %conv171, 8
  %or173 = or i32 %conv165, %shl172
  %shl174 = shl i32 %or173, 16
  %or175 = or i32 %or159, %shl174
  store i32 %or175, i32* %orig_len, align 4
  br label %if.end255

if.else176:                                       ; preds = %if.end110
  %56 = load i32, i32* @ext_header, align 4
  %tobool177 = icmp ne i32 %56, 0
  br i1 %tobool177, label %if.then178, label %if.end254

if.then178:                                       ; preds = %if.else176
  store i32 0, i32* %n, align 4
  br label %for.cond179

for.cond179:                                      ; preds = %for.inc195, %if.then178
  %57 = load i32, i32* %n, align 4
  %cmp180 = icmp slt i32 %57, 16
  br i1 %cmp180, label %for.body182, label %for.end197

for.body182:                                      ; preds = %for.cond179
  %58 = load i32, i32* @inptr, align 4
  %59 = load i32, i32* @insize, align 4
  %cmp183 = icmp ult i32 %58, %59
  br i1 %cmp183, label %cond.true185, label %cond.false189

cond.true185:                                     ; preds = %for.body182
  %60 = load i32, i32* @inptr, align 4
  %inc186 = add i32 %60, 1
  store i32 %inc186, i32* @inptr, align 4
  %arrayidx187 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([32832 x i8]* @inbuf to [0 x i8]*), i32 0, i32 %60
  %61 = load i8, i8* %arrayidx187, align 1
  %conv188 = zext i8 %61 to i32
  br label %cond.end191

cond.false189:                                    ; preds = %for.body182
  %call190 = call i32 @fill_inbuf(i32 0)
  br label %cond.end191

cond.end191:                                      ; preds = %cond.false189, %cond.true185
  %cond192 = phi i32 [ %conv188, %cond.true185 ], [ %call190, %cond.false189 ]
  %conv193 = trunc i32 %cond192 to i8
  %62 = load i32, i32* %n, align 4
  %arrayidx194 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 %62
  store i8 %conv193, i8* %arrayidx194, align 1
  br label %for.inc195

for.inc195:                                       ; preds = %cond.end191
  %63 = load i32, i32* %n, align 4
  %inc196 = add nsw i32 %63, 1
  store i32 %inc196, i32* %n, align 4
  br label %for.cond179

for.end197:                                       ; preds = %for.cond179
  %arraydecay198 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr199 = getelementptr inbounds i8, i8* %arraydecay198, i32 4
  %arrayidx200 = getelementptr inbounds i8, i8* %add.ptr199, i32 0
  %64 = load i8, i8* %arrayidx200, align 1
  %conv201 = zext i8 %64 to i16
  %conv202 = zext i16 %conv201 to i32
  %arraydecay203 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr204 = getelementptr inbounds i8, i8* %arraydecay203, i32 4
  %arrayidx205 = getelementptr inbounds i8, i8* %add.ptr204, i32 1
  %65 = load i8, i8* %arrayidx205, align 1
  %conv206 = zext i8 %65 to i16
  %conv207 = zext i16 %conv206 to i32
  %shl208 = shl i32 %conv207, 8
  %or209 = or i32 %conv202, %shl208
  %arraydecay210 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr211 = getelementptr inbounds i8, i8* %arraydecay210, i32 4
  %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr211, i32 2
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr212, i32 0
  %66 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %66 to i16
  %conv215 = zext i16 %conv214 to i32
  %arraydecay216 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr217 = getelementptr inbounds i8, i8* %arraydecay216, i32 4
  %add.ptr218 = getelementptr inbounds i8, i8* %add.ptr217, i32 2
  %arrayidx219 = getelementptr inbounds i8, i8* %add.ptr218, i32 1
  %67 = load i8, i8* %arrayidx219, align 1
  %conv220 = zext i8 %67 to i16
  %conv221 = zext i16 %conv220 to i32
  %shl222 = shl i32 %conv221, 8
  %or223 = or i32 %conv215, %shl222
  %shl224 = shl i32 %or223, 16
  %or225 = or i32 %or209, %shl224
  store i32 %or225, i32* %orig_crc, align 4
  %arraydecay226 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr227 = getelementptr inbounds i8, i8* %arraydecay226, i32 12
  %arrayidx228 = getelementptr inbounds i8, i8* %add.ptr227, i32 0
  %68 = load i8, i8* %arrayidx228, align 1
  %conv229 = zext i8 %68 to i16
  %conv230 = zext i16 %conv229 to i32
  %arraydecay231 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr232 = getelementptr inbounds i8, i8* %arraydecay231, i32 12
  %arrayidx233 = getelementptr inbounds i8, i8* %add.ptr232, i32 1
  %69 = load i8, i8* %arrayidx233, align 1
  %conv234 = zext i8 %69 to i16
  %conv235 = zext i16 %conv234 to i32
  %shl236 = shl i32 %conv235, 8
  %or237 = or i32 %conv230, %shl236
  %arraydecay238 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr239 = getelementptr inbounds i8, i8* %arraydecay238, i32 12
  %add.ptr240 = getelementptr inbounds i8, i8* %add.ptr239, i32 2
  %arrayidx241 = getelementptr inbounds i8, i8* %add.ptr240, i32 0
  %70 = load i8, i8* %arrayidx241, align 1
  %conv242 = zext i8 %70 to i16
  %conv243 = zext i16 %conv242 to i32
  %arraydecay244 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %add.ptr245 = getelementptr inbounds i8, i8* %arraydecay244, i32 12
  %add.ptr246 = getelementptr inbounds i8, i8* %add.ptr245, i32 2
  %arrayidx247 = getelementptr inbounds i8, i8* %add.ptr246, i32 1
  %71 = load i8, i8* %arrayidx247, align 1
  %conv248 = zext i8 %71 to i16
  %conv249 = zext i16 %conv248 to i32
  %shl250 = shl i32 %conv249, 8
  %or251 = or i32 %conv243, %shl250
  %shl252 = shl i32 %or251, 16
  %or253 = or i32 %or237, %shl252
  store i32 %or253, i32* %orig_len, align 4
  br label %if.end254

if.end254:                                        ; preds = %for.end197, %if.else176
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %for.end
  %72 = load i32, i32* %orig_crc, align 4
  %call256 = call i32 @updcrc(i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 0)
  %cmp257 = icmp ne i32 %72, %call256
  br i1 %cmp257, label %if.then259, label %if.end260

if.then259:                                       ; preds = %if.end255
  call void @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.118, i32 0, i32 0))
  br label %if.end260

if.end260:                                        ; preds = %if.then259, %if.end255
  %73 = load i32, i32* %orig_len, align 4
  %74 = load i32, i32* @bytes_out, align 4
  %cmp261 = icmp ne i32 %73, %74
  br i1 %cmp261, label %if.then263, label %if.end264

if.then263:                                       ; preds = %if.end260
  call void @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9.119, i32 0, i32 0))
  br label %if.end264

if.end264:                                        ; preds = %if.then263, %if.end260
  %75 = load i32, i32* @pkzip, align 4
  %tobool265 = icmp ne i32 %75, 0
  br i1 %tobool265, label %land.lhs.true266, label %if.end314

land.lhs.true266:                                 ; preds = %if.end264
  %76 = load i32, i32* @inptr, align 4
  %add = add i32 %76, 4
  %77 = load i32, i32* @insize, align 4
  %cmp267 = icmp ult i32 %add, %77
  br i1 %cmp267, label %land.lhs.true269, label %if.end314

land.lhs.true269:                                 ; preds = %land.lhs.true266
  %78 = load i32, i32* @inptr, align 4
  %add.ptr270 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %78
  %arrayidx271 = getelementptr inbounds i8, i8* %add.ptr270, i32 0
  %79 = load i8, i8* %arrayidx271, align 1
  %conv272 = zext i8 %79 to i16
  %conv273 = zext i16 %conv272 to i32
  %80 = load i32, i32* @inptr, align 4
  %add.ptr274 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %80
  %arrayidx275 = getelementptr inbounds i8, i8* %add.ptr274, i32 1
  %81 = load i8, i8* %arrayidx275, align 1
  %conv276 = zext i8 %81 to i16
  %conv277 = zext i16 %conv276 to i32
  %shl278 = shl i32 %conv277, 8
  %or279 = or i32 %conv273, %shl278
  %82 = load i32, i32* @inptr, align 4
  %add.ptr280 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %82
  %add.ptr281 = getelementptr inbounds i8, i8* %add.ptr280, i32 2
  %arrayidx282 = getelementptr inbounds i8, i8* %add.ptr281, i32 0
  %83 = load i8, i8* %arrayidx282, align 1
  %conv283 = zext i8 %83 to i16
  %conv284 = zext i16 %conv283 to i32
  %84 = load i32, i32* @inptr, align 4
  %add.ptr285 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %84
  %add.ptr286 = getelementptr inbounds i8, i8* %add.ptr285, i32 2
  %arrayidx287 = getelementptr inbounds i8, i8* %add.ptr286, i32 1
  %85 = load i8, i8* %arrayidx287, align 1
  %conv288 = zext i8 %85 to i16
  %conv289 = zext i16 %conv288 to i32
  %shl290 = shl i32 %conv289, 8
  %or291 = or i32 %conv284, %shl290
  %shl292 = shl i32 %or291, 16
  %or293 = or i32 %or279, %shl292
  %cmp294 = icmp eq i32 %or293, 67324752
  br i1 %cmp294, label %if.then296, label %if.end314

if.then296:                                       ; preds = %land.lhs.true269
  %86 = load i32, i32* @to_stdout, align 4
  %tobool297 = icmp ne i32 %86, 0
  br i1 %tobool297, label %if.then298, label %if.else309

if.then298:                                       ; preds = %if.then296
  %87 = load i32, i32* @quiet, align 4
  %tobool299 = icmp ne i32 %87, 0
  br i1 %tobool299, label %if.end304, label %if.then300

if.then300:                                       ; preds = %if.then298
  %88 = load i8*, i8** @progname, align 4
  %call301 = call %struct._iobuf* @__iob_func()
  %arrayidx302 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call301, i32 2
  %call303 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx302, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.10.120, i32 0, i32 0), i8* %88, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  br label %if.end304

if.end304:                                        ; preds = %if.then300, %if.then298
  %89 = load i32, i32* @exit_code, align 4
  %cmp305 = icmp eq i32 %89, 0
  br i1 %cmp305, label %if.then307, label %if.end308

if.then307:                                       ; preds = %if.end304
  store i32 2, i32* @exit_code, align 4
  br label %if.end308

if.end308:                                        ; preds = %if.then307, %if.end304
  br label %if.end313

if.else309:                                       ; preds = %if.then296
  %90 = load i8*, i8** @progname, align 4
  %call310 = call %struct._iobuf* @__iob_func()
  %arrayidx311 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call310, i32 2
  %call312 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx311, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11.121, i32 0, i32 0), i8* %90, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i32 1, i32* @exit_code, align 4
  store i32 0, i32* @pkzip, align 4
  store i32 0, i32* @ext_header, align 4
  store i32 1, i32* %retval, align 4
  br label %return

if.end313:                                        ; preds = %if.end308
  br label %if.end314

if.end314:                                        ; preds = %if.end313, %land.lhs.true269, %land.lhs.true266, %if.end264
  store i32 0, i32* @pkzip, align 4
  store i32 0, i32* @ext_header, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end314, %if.else309
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

; Function Attrs: noinline nounwind
define i32 @copy(i32 %in, i32 %out) #0 {
entry:
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %call = call i32* @_errno()
  store i32 0, i32* %call, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @insize, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %1 = load i32, i32* @insize, align 4
  %cmp1 = icmp ne i32 %1, -1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %2 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %2, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %3 = load i32, i32* @insize, align 4
  %4 = load i32, i32* %out.addr, align 4
  call void @write_buf(i32 %4, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %3)
  %5 = load i32, i32* @insize, align 4
  %6 = load i32, i32* @bytes_out, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* @bytes_out, align 4
  %7 = load i32, i32* %in.addr, align 4
  %call2 = call i32 @spec_read(i32 %7, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 32768)
  store i32 %call2, i32* @insize, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %8 = load i32, i32* @insize, align 4
  %cmp3 = icmp eq i32 %8, -1
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end
  %call4 = call i32* @_errno()
  %9 = load i32, i32* %call4, align 4
  %cmp5 = icmp ne i32 %9, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @read_error()
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.end
  %10 = load i32, i32* @bytes_out, align 4
  store i32 %10, i32* @bytes_in, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind
define void @write_buf(i32 %fd, i8* %buf, i32 %cnt) #0 {
entry:
  %cnt.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %fd.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %cnt, i32* %cnt.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %fd, i32* %fd.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* %cnt.addr, align 4
  %1 = load i8*, i8** %buf.addr, align 4
  %2 = load i32, i32* %fd.addr, align 4
  %call = call i32 @spec_write(i32 %2, i8* %1, i32 %0)
  store i32 %call, i32* %n, align 4
  %3 = load i32, i32* %cnt.addr, align 4
  %cmp = icmp ne i32 %call, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %n, align 4
  %cmp1 = icmp eq i32 %4, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  call void @write_error()
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %5 = load i32, i32* %n, align 4
  %6 = load i32, i32* %cnt.addr, align 4
  %sub = sub i32 %6, %5
  store i32 %sub, i32* %cnt.addr, align 4
  %7 = load i8*, i8** %buf.addr, align 4
  %8 = load i32, i32* %n, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 %8
  store i8* %add.ptr, i8** %buf.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind
define void @write_error() #0 {
entry:
  %0 = load i8*, i8** @progname, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.126, i32 0, i32 0), i8* %0)
  call void @perror(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ofname, i32 0, i32 0))
  call void @abort_gzip()
  ret void
}

declare dllimport void @perror(i8*) #2

; Function Attrs: noinline nounwind
define void @read_error() #0 {
entry:
  %0 = load i8*, i8** @progname, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.129, i32 0, i32 0), i8* %0)
  %call2 = call i32* @_errno()
  %1 = load i32, i32* %call2, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @perror(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx4 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call5 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.130, i32 0, i32 0), i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @abort_gzip()
  ret void
}

; Function Attrs: noinline nounwind
define i32 @updcrc(i8* %s, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %c, align 4
  br label %if.end4

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @updcrc.crc, align 4
  store i32 %1, i32* %c, align 4
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then1
  %3 = load i32, i32* %c, align 4
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  %xor = xor i32 %3, %conv
  %and = and i32 %xor, 255
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([256 x i32]* @crc_32_tab to [0 x i32]*), i32 0, i32 %and
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 8
  %xor2 = xor i32 %6, %shr
  store i32 %xor2, i32* %c, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %8 = load i32, i32* %n.addr, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool3 = icmp ne i32 %dec, 0
  br i1 %tobool3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end, %if.else
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %9 = load i32, i32* %c, align 4
  store i32 %9, i32* @updcrc.crc, align 4
  %10 = load i32, i32* %c, align 4
  %xor5 = xor i32 %10, -1
  ret i32 %xor5
}

; Function Attrs: noinline nounwind
define void @clear_bufs() #0 {
entry:
  store i32 0, i32* @outcnt, align 4
  store i32 0, i32* @inptr, align 4
  store i32 0, i32* @insize, align 4
  store i32 0, i32* @bytes_out, align 4
  store i32 0, i32* @bytes_in, align 4
  ret void
}

; Function Attrs: noinline nounwind
define i32 @fill_inbuf(i32 %eof_ok) #0 {
entry:
  %retval = alloca i32, align 4
  %eof_ok.addr = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %eof_ok, i32* %eof_ok.addr, align 4
  store i32 0, i32* @insize, align 4
  %call = call i32* @_errno()
  store i32 0, i32* %call, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* @insize, align 4
  %sub = sub i32 32768, %0
  %1 = load i32, i32* @insize, align 4
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), i32 %1
  %2 = load i32, i32* @ifd, align 4
  %call1 = call i32 @spec_read(i32 %2, i8* %add.ptr, i32 %sub)
  store i32 %call1, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body
  %4 = load i32, i32* %len, align 4
  %cmp2 = icmp eq i32 %4, -1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.body
  br label %do.end

if.end:                                           ; preds = %lor.lhs.false
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* @insize, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* @insize, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %7 = load i32, i32* @insize, align 4
  %cmp3 = icmp ult i32 %7, 32768
  br i1 %cmp3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then
  %8 = load i32, i32* @insize, align 4
  %cmp4 = icmp eq i32 %8, 0
  br i1 %cmp4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %do.end
  %9 = load i32, i32* %eof_ok.addr, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.then5
  call void @read_error()
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %do.end
  %10 = load i32, i32* @insize, align 4
  %11 = load i32, i32* @bytes_in, align 4
  %add9 = add i32 %11, %10
  store i32 %add9, i32* @bytes_in, align 4
  store i32 1, i32* @inptr, align 4
  %12 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i32 0, i32 0), align 1
  %conv = zext i8 %12 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end8, %if.then6
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind
define void @flush_outbuf() #0 {
entry:
  %0 = load i32, i32* @outcnt, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @outcnt, align 4
  %2 = load i32, i32* @ofd, align 4
  call void @write_buf(i32 %2, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i32 0, i32 0), i32 %1)
  %3 = load i32, i32* @outcnt, align 4
  %4 = load i32, i32* @bytes_out, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* @bytes_out, align 4
  store i32 0, i32* @outcnt, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind
define void @flush_window() #0 {
entry:
  %0 = load i32, i32* @outcnt, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @outcnt, align 4
  %call = call i32 @updcrc(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* @test, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  %3 = load i32, i32* @outcnt, align 4
  %4 = load i32, i32* @ofd, align 4
  call void @write_buf(i32 %4, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i32 0, i32 0), i32 %3)
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %5 = load i32, i32* @outcnt, align 4
  %6 = load i32, i32* @bytes_out, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* @bytes_out, align 4
  store i32 0, i32* @outcnt, align 4
  br label %return

return:                                           ; preds = %if.end2, %if.then
  ret void
}

; Function Attrs: noinline nounwind
define i8* @strlwr(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %t = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  store i8* %0, i8** %t, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %t, align 4
  %2 = load i8, i8* %1, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %t, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %call = call i32 @isupper(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %5 = load i8*, i8** %t, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %sub = sub nsw i32 %conv2, 65
  %add = add nsw i32 %sub, 97
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %7 = load i8*, i8** %t, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %conv3, %cond.false ]
  %conv4 = trunc i32 %cond to i8
  %9 = load i8*, i8** %t, align 4
  store i8 %conv4, i8* %9, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %10 = load i8*, i8** %t, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %t, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i8*, i8** %s.addr, align 4
  ret i8* %11
}

declare dllimport i32 @isupper(i32) #2

; Function Attrs: noinline nounwind
define i8* @gzipbasename(i8* %fname) #0 {
entry:
  %fname.addr = alloca i8*, align 4
  %p = alloca i8*, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load i8*, i8** %fname.addr, align 4
  %call = call i8* @strrchr(i8* %0, i32 47)
  store i8* %call, i8** %p, align 4
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %p, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 1
  store i8* %add.ptr, i8** %fname.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %fname.addr, align 4
  %call1 = call i8* @strrchr(i8* %2, i32 92)
  store i8* %call1, i8** %p, align 4
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %3 = load i8*, i8** %p, align 4
  %add.ptr4 = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %add.ptr4, i8** %fname.addr, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %4 = load i8*, i8** %fname.addr, align 4
  %call6 = call i8* @strrchr(i8* %4, i32 58)
  store i8* %call6, i8** %p, align 4
  %cmp7 = icmp ne i8* %call6, null
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end5
  %5 = load i8*, i8** %p, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %add.ptr9, i8** %fname.addr, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end5
  %6 = load i8*, i8** %fname.addr, align 4
  ret i8* %6
}

declare dllimport i8* @strrchr(i8*, i32) #2

; Function Attrs: noinline nounwind
define void @make_simple_name(i8* %name) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %p = alloca i8*, align 4
  store i8* %name, i8** %name.addr, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i8* @strrchr(i8* %0, i32 46)
  store i8* %call, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.end

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8*, i8** %name.addr, align 4
  %cmp1 = icmp eq i8* %2, %3
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end3
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %5, i32 -1
  store i8* %incdec.ptr4, i8** %p, align 4
  %6 = load i8, i8* %incdec.ptr4, align 1
  %conv = sext i8 %6 to i32
  %cmp5 = icmp eq i32 %conv, 46
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %7 = load i8*, i8** %p, align 4
  store i8 95, i8* %7, align 1
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %8 = load i8*, i8** %p, align 4
  %9 = load i8*, i8** %name.addr, align 4
  %cmp9 = icmp ne i8* %8, %9
  br i1 %cmp9, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then
  ret void
}

; Function Attrs: noinline nounwind
define i8* @add_envopt(i32* %argcp, i8*** %argvp, i8* %env) #0 {
entry:
  %retval = alloca i8*, align 4
  %env.addr = alloca i8*, align 4
  %argvp.addr = alloca i8***, align 4
  %argcp.addr = alloca i32*, align 4
  %p = alloca i8*, align 4
  %oargv = alloca i8**, align 4
  %nargv = alloca i8**, align 4
  %oargc = alloca i32, align 4
  %nargc = alloca i32, align 4
  store i8* %env, i8** %env.addr, align 4
  store i8*** %argvp, i8**** %argvp.addr, align 4
  store i32* %argcp, i32** %argcp.addr, align 4
  %0 = load i32*, i32** %argcp.addr, align 4
  %1 = load i32, i32* %0, align 4
  store i32 %1, i32* %oargc, align 4
  store i32 0, i32* %nargc, align 4
  %2 = load i8*, i8** %env.addr, align 4
  %call = call i8* @getenv(i8* %2)
  store i8* %call, i8** %env.addr, align 4
  %3 = load i8*, i8** %env.addr, align 4
  %cmp = icmp eq i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %env.addr, align 4
  %call1 = call i32 @strlen(i8* %4)
  %add = add i32 %call1, 1
  %call2 = call i8* @xmalloc(i32 %add)
  store i8* %call2, i8** %p, align 4
  %5 = load i8*, i8** %env.addr, align 4
  %6 = load i8*, i8** %p, align 4
  %call3 = call i8* @strcpy(i8* %6, i8* %5)
  store i8* %call3, i8** %env.addr, align 4
  %7 = load i8*, i8** %env.addr, align 4
  store i8* %7, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i8*, i8** %p, align 4
  %9 = load i8, i8* %8, align 1
  %tobool = icmp ne i8 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %p, align 4
  %call4 = call i32 @strspn(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.147, i32 0, i32 0))
  %11 = load i8*, i8** %p, align 4
  %add.ptr = getelementptr inbounds i8, i8* %11, i32 %call4
  store i8* %add.ptr, i8** %p, align 4
  %12 = load i8*, i8** %p, align 4
  %13 = load i8, i8* %12, align 1
  %conv = sext i8 %13 to i32
  %cmp5 = icmp eq i32 %conv, 0
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %for.body
  br label %for.end

if.end8:                                          ; preds = %for.body
  %14 = load i8*, i8** %p, align 4
  %call9 = call i32 @strcspn(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.148, i32 0, i32 0))
  %15 = load i8*, i8** %p, align 4
  %add.ptr10 = getelementptr inbounds i8, i8* %15, i32 %call9
  store i8* %add.ptr10, i8** %p, align 4
  %16 = load i8*, i8** %p, align 4
  %17 = load i8, i8* %16, align 1
  %tobool11 = icmp ne i8 %17, 0
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end8
  %18 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 0, i8* %18, align 1
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end13
  %19 = load i32, i32* %nargc, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %nargc, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then7, %for.cond
  %20 = load i32, i32* %nargc, align 4
  %cmp14 = icmp eq i32 %20, 0
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %for.end
  %21 = load i8*, i8** %env.addr, align 4
  call void @free(i8* %21) #1
  store i8* null, i8** %retval, align 4
  br label %return

if.end17:                                         ; preds = %for.end
  %22 = load i32, i32* %nargc, align 4
  %23 = load i32*, i32** %argcp.addr, align 4
  %24 = load i32, i32* %23, align 4
  %add18 = add nsw i32 %24, %22
  store i32 %add18, i32* %23, align 4
  %25 = load i32*, i32** %argcp.addr, align 4
  %26 = load i32, i32* %25, align 4
  %add19 = add nsw i32 %26, 1
  %call20 = call noalias i8* @calloc(i32 %add19, i32 4) #1
  %27 = bitcast i8* %call20 to i8**
  store i8** %27, i8*** %nargv, align 4
  %28 = load i8**, i8*** %nargv, align 4
  %cmp21 = icmp eq i8** %28, null
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end17
  call void @error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.149, i32 0, i32 0))
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end17
  %29 = load i8***, i8**** %argvp.addr, align 4
  %30 = load i8**, i8*** %29, align 4
  store i8** %30, i8*** %oargv, align 4
  %31 = load i8**, i8*** %nargv, align 4
  %32 = load i8***, i8**** %argvp.addr, align 4
  store i8** %31, i8*** %32, align 4
  %33 = load i32, i32* %oargc, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %oargc, align 4
  %cmp25 = icmp slt i32 %33, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  call void @error(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.150, i32 0, i32 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %if.end24
  %34 = load i8**, i8*** %oargv, align 4
  %incdec.ptr29 = getelementptr inbounds i8*, i8** %34, i32 1
  store i8** %incdec.ptr29, i8*** %oargv, align 4
  %35 = load i8*, i8** %34, align 4
  %36 = load i8**, i8*** %nargv, align 4
  %incdec.ptr30 = getelementptr inbounds i8*, i8** %36, i32 1
  store i8** %incdec.ptr30, i8*** %nargv, align 4
  store i8* %35, i8** %36, align 4
  %37 = load i8*, i8** %env.addr, align 4
  store i8* %37, i8** %p, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc40, %if.end28
  %38 = load i32, i32* %nargc, align 4
  %cmp32 = icmp sgt i32 %38, 0
  br i1 %cmp32, label %for.body34, label %for.end42

for.body34:                                       ; preds = %for.cond31
  %39 = load i8*, i8** %p, align 4
  %call35 = call i32 @strspn(i8* %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4.151, i32 0, i32 0))
  %40 = load i8*, i8** %p, align 4
  %add.ptr36 = getelementptr inbounds i8, i8* %40, i32 %call35
  store i8* %add.ptr36, i8** %p, align 4
  %41 = load i8*, i8** %p, align 4
  %42 = load i8**, i8*** %nargv, align 4
  %incdec.ptr37 = getelementptr inbounds i8*, i8** %42, i32 1
  store i8** %incdec.ptr37, i8*** %nargv, align 4
  store i8* %41, i8** %42, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body34
  %43 = load i8*, i8** %p, align 4
  %incdec.ptr38 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr38, i8** %p, align 4
  %44 = load i8, i8* %43, align 1
  %tobool39 = icmp ne i8 %44, 0
  br i1 %tobool39, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc40

for.inc40:                                        ; preds = %while.end
  %45 = load i32, i32* %nargc, align 4
  %dec41 = add nsw i32 %45, -1
  store i32 %dec41, i32* %nargc, align 4
  br label %for.cond31

for.end42:                                        ; preds = %for.cond31
  br label %while.cond43

while.cond43:                                     ; preds = %while.body46, %for.end42
  %46 = load i32, i32* %oargc, align 4
  %dec44 = add nsw i32 %46, -1
  store i32 %dec44, i32* %oargc, align 4
  %tobool45 = icmp ne i32 %46, 0
  br i1 %tobool45, label %while.body46, label %while.end49

while.body46:                                     ; preds = %while.cond43
  %47 = load i8**, i8*** %oargv, align 4
  %incdec.ptr47 = getelementptr inbounds i8*, i8** %47, i32 1
  store i8** %incdec.ptr47, i8*** %oargv, align 4
  %48 = load i8*, i8** %47, align 4
  %49 = load i8**, i8*** %nargv, align 4
  %incdec.ptr48 = getelementptr inbounds i8*, i8** %49, i32 1
  store i8** %incdec.ptr48, i8*** %nargv, align 4
  store i8* %48, i8** %49, align 4
  br label %while.cond43

while.end49:                                      ; preds = %while.cond43
  %50 = load i8**, i8*** %nargv, align 4
  store i8* null, i8** %50, align 4
  %51 = load i8*, i8** %env.addr, align 4
  store i8* %51, i8** %retval, align 4
  br label %return

return:                                           ; preds = %while.end49, %if.then16, %if.then
  %52 = load i8*, i8** %retval, align 4
  ret i8* %52
}

declare i32 @strlen(i8*) #2

; Function Attrs: noinline nounwind
define i8* @xmalloc(i32 %size) #0 {
entry:
  %size.addr = alloca i32, align 4
  %cp = alloca i8*, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %call = call noalias i8* @malloc(i32 %0) #1
  store i8* %call, i8** %cp, align 4
  %1 = load i8*, i8** %cp, align 4
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11.143, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %cp, align 4
  ret i8* %2
}

; Function Attrs: noinline nounwind
define void @error(i8* %m) #0 {
entry:
  %m.addr = alloca i8*, align 4
  store i8* %m, i8** %m.addr, align 4
  %0 = load i8*, i8** %m.addr, align 4
  %1 = load i8*, i8** @progname, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.146, i32 0, i32 0), i8* %1, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i8* %0)
  call void @abort_gzip()
  ret void
}

declare i8* @strcpy(i8*, i8*) #2

declare dllimport i32 @strspn(i8*, i8*) #2

declare dllimport i32 @strcspn(i8*, i8*) #2

; Function Attrs: argmemonly nounwind
declare dllimport noalias i8* @calloc(i32, i32) #4

; Function Attrs: noinline nounwind
define void @warn(i8* %a, i8* %b) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %a.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %a, i8** %a.addr, align 4
  %0 = load i32, i32* @quiet, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %b.addr, align 4
  %2 = load i8*, i8** %a.addr, align 4
  %3 = load i8*, i8** @progname, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6.154, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0), i8* %2, i8* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @exit_code, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 2, i32* @exit_code, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  ret void
}

; Function Attrs: noinline nounwind
define void @display_ratio(i32 %num, i32 %den, %struct._iobuf* %file) #0 {
entry:
  %file.addr = alloca %struct._iobuf*, align 4
  %den.addr = alloca i32, align 4
  %num.addr = alloca i32, align 4
  %ratio = alloca i32, align 4
  store %struct._iobuf* %file, %struct._iobuf** %file.addr, align 4
  store i32 %den, i32* %den.addr, align 4
  store i32 %num, i32* %num.addr, align 4
  %0 = load i32, i32* %den.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %ratio, align 4
  br label %if.end6

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %den.addr, align 4
  %cmp1 = icmp slt i32 %1, 2147483
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %2 = load i32, i32* %num.addr, align 4
  %mul = mul nsw i32 1000, %2
  %3 = load i32, i32* %den.addr, align 4
  %div = sdiv i32 %mul, %3
  store i32 %div, i32* %ratio, align 4
  br label %if.end

if.else3:                                         ; preds = %if.else
  %4 = load i32, i32* %num.addr, align 4
  %5 = load i32, i32* %den.addr, align 4
  %div4 = sdiv i32 %5, 1000
  %div5 = sdiv i32 %4, %div4
  store i32 %div5, i32* %ratio, align 4
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %6 = load i32, i32* %ratio, align 4
  %cmp7 = icmp slt i32 %6, 0
  br i1 %cmp7, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.end6
  %7 = load %struct._iobuf*, %struct._iobuf** %file.addr, align 4
  %call = call i32 @putc(i32 45, %struct._iobuf* %7)
  %8 = load i32, i32* %ratio, align 4
  %sub = sub nsw i32 0, %8
  store i32 %sub, i32* %ratio, align 4
  br label %if.end11

if.else9:                                         ; preds = %if.end6
  %9 = load %struct._iobuf*, %struct._iobuf** %file.addr, align 4
  %call10 = call i32 @putc(i32 32, %struct._iobuf* %9)
  br label %if.end11

if.end11:                                         ; preds = %if.else9, %if.then8
  %10 = load i32, i32* %ratio, align 4
  %rem = srem i32 %10, 10
  %11 = load i32, i32* %ratio, align 4
  %div12 = sdiv i32 %11, 10
  %12 = load %struct._iobuf*, %struct._iobuf** %file.addr, align 4
  %call13 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %12, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.155, i32 0, i32 0), i32 %div12, i32 %rem)
  ret void
}

declare dllimport i32 @putc(i32, %struct._iobuf*) #2

; Function Attrs: noinline nounwind
define i32 @zip(i32 %in, i32 %out) #0 {
entry:
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %flags = alloca i8, align 1
  %attr = alloca i16, align 2
  %deflate_flags = alloca i16, align 2
  %p = alloca i8*, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  store i8 0, i8* %flags, align 1
  store i16 0, i16* %attr, align 2
  store i16 0, i16* %deflate_flags, align 2
  %0 = load i32, i32* %in.addr, align 4
  store i32 %0, i32* @ifd, align 4
  %1 = load i32, i32* %out.addr, align 4
  store i32 %1, i32* @ofd, align 4
  store i32 0, i32* @outcnt, align 4
  store i32 8, i32* @method, align 4
  %2 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.160, i32 0, i32 0), align 1
  %3 = load i32, i32* @outcnt, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* @outcnt, align 4
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %3
  store i8 %2, i8* %arrayidx, align 1
  %4 = load i32, i32* @outcnt, align 4
  %cmp = icmp eq i32 %4, 16384
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @flush_outbuf()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.161, i32 0, i32 1), align 1
  %6 = load i32, i32* @outcnt, align 4
  %inc1 = add i32 %6, 1
  store i32 %inc1, i32* @outcnt, align 4
  %arrayidx2 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %6
  store i8 %5, i8* %arrayidx2, align 1
  %7 = load i32, i32* @outcnt, align 4
  %cmp3 = icmp eq i32 %7, 16384
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  call void @flush_outbuf()
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %8 = load i32, i32* @outcnt, align 4
  %inc6 = add i32 %8, 1
  store i32 %inc6, i32* @outcnt, align 4
  %arrayidx7 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %8
  store i8 8, i8* %arrayidx7, align 1
  %9 = load i32, i32* @outcnt, align 4
  %cmp8 = icmp eq i32 %9, 16384
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end5
  call void @flush_outbuf()
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end5
  %10 = load i32, i32* @save_orig_name, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end10
  %11 = load i8, i8* %flags, align 1
  %conv = zext i8 %11 to i32
  %or = or i32 %conv, 8
  %conv12 = trunc i32 %or to i8
  store i8 %conv12, i8* %flags, align 1
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end10
  %12 = load i8, i8* %flags, align 1
  %13 = load i32, i32* @outcnt, align 4
  %inc14 = add i32 %13, 1
  store i32 %inc14, i32* @outcnt, align 4
  %arrayidx15 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %13
  store i8 %12, i8* %arrayidx15, align 1
  %14 = load i32, i32* @outcnt, align 4
  %cmp16 = icmp eq i32 %14, 16384
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end13
  call void @flush_outbuf()
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.end13
  %15 = load i32, i32* @outcnt, align 4
  %cmp20 = icmp ult i32 %15, 16382
  br i1 %cmp20, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.end19
  %16 = load i32, i32* @time_stamp, align 4
  %and = and i32 %16, 65535
  %and23 = and i32 %and, 255
  %conv24 = trunc i32 %and23 to i8
  %17 = load i32, i32* @outcnt, align 4
  %inc25 = add i32 %17, 1
  store i32 %inc25, i32* @outcnt, align 4
  %arrayidx26 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %17
  store i8 %conv24, i8* %arrayidx26, align 1
  %18 = load i32, i32* @time_stamp, align 4
  %and27 = and i32 %18, 65535
  %conv28 = trunc i32 %and27 to i16
  %conv29 = zext i16 %conv28 to i32
  %shr = ashr i32 %conv29, 8
  %conv30 = trunc i32 %shr to i8
  %19 = load i32, i32* @outcnt, align 4
  %inc31 = add i32 %19, 1
  store i32 %inc31, i32* @outcnt, align 4
  %arrayidx32 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %19
  store i8 %conv30, i8* %arrayidx32, align 1
  br label %if.end53

if.else:                                          ; preds = %if.end19
  %20 = load i32, i32* @time_stamp, align 4
  %and33 = and i32 %20, 65535
  %and34 = and i32 %and33, 255
  %conv35 = trunc i32 %and34 to i8
  %21 = load i32, i32* @outcnt, align 4
  %inc36 = add i32 %21, 1
  store i32 %inc36, i32* @outcnt, align 4
  %arrayidx37 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %21
  store i8 %conv35, i8* %arrayidx37, align 1
  %22 = load i32, i32* @outcnt, align 4
  %cmp38 = icmp eq i32 %22, 16384
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.else
  call void @flush_outbuf()
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %if.else
  %23 = load i32, i32* @time_stamp, align 4
  %and42 = and i32 %23, 65535
  %conv43 = trunc i32 %and42 to i16
  %conv44 = zext i16 %conv43 to i32
  %shr45 = ashr i32 %conv44, 8
  %conv46 = trunc i32 %shr45 to i8
  %24 = load i32, i32* @outcnt, align 4
  %inc47 = add i32 %24, 1
  store i32 %inc47, i32* @outcnt, align 4
  %arrayidx48 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %24
  store i8 %conv46, i8* %arrayidx48, align 1
  %25 = load i32, i32* @outcnt, align 4
  %cmp49 = icmp eq i32 %25, 16384
  br i1 %cmp49, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.end41
  call void @flush_outbuf()
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %if.end41
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then22
  %26 = load i32, i32* @outcnt, align 4
  %cmp54 = icmp ult i32 %26, 16382
  br i1 %cmp54, label %if.then56, label %if.else69

if.then56:                                        ; preds = %if.end53
  %27 = load i32, i32* @time_stamp, align 4
  %shr57 = lshr i32 %27, 16
  %and58 = and i32 %shr57, 255
  %conv59 = trunc i32 %and58 to i8
  %28 = load i32, i32* @outcnt, align 4
  %inc60 = add i32 %28, 1
  store i32 %inc60, i32* @outcnt, align 4
  %arrayidx61 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %28
  store i8 %conv59, i8* %arrayidx61, align 1
  %29 = load i32, i32* @time_stamp, align 4
  %shr62 = lshr i32 %29, 16
  %conv63 = trunc i32 %shr62 to i16
  %conv64 = zext i16 %conv63 to i32
  %shr65 = ashr i32 %conv64, 8
  %conv66 = trunc i32 %shr65 to i8
  %30 = load i32, i32* @outcnt, align 4
  %inc67 = add i32 %30, 1
  store i32 %inc67, i32* @outcnt, align 4
  %arrayidx68 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %30
  store i8 %conv66, i8* %arrayidx68, align 1
  br label %if.end90

if.else69:                                        ; preds = %if.end53
  %31 = load i32, i32* @time_stamp, align 4
  %shr70 = lshr i32 %31, 16
  %and71 = and i32 %shr70, 255
  %conv72 = trunc i32 %and71 to i8
  %32 = load i32, i32* @outcnt, align 4
  %inc73 = add i32 %32, 1
  store i32 %inc73, i32* @outcnt, align 4
  %arrayidx74 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %32
  store i8 %conv72, i8* %arrayidx74, align 1
  %33 = load i32, i32* @outcnt, align 4
  %cmp75 = icmp eq i32 %33, 16384
  br i1 %cmp75, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else69
  call void @flush_outbuf()
  br label %if.end78

if.end78:                                         ; preds = %if.then77, %if.else69
  %34 = load i32, i32* @time_stamp, align 4
  %shr79 = lshr i32 %34, 16
  %conv80 = trunc i32 %shr79 to i16
  %conv81 = zext i16 %conv80 to i32
  %shr82 = ashr i32 %conv81, 8
  %conv83 = trunc i32 %shr82 to i8
  %35 = load i32, i32* @outcnt, align 4
  %inc84 = add i32 %35, 1
  store i32 %inc84, i32* @outcnt, align 4
  %arrayidx85 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %35
  store i8 %conv83, i8* %arrayidx85, align 1
  %36 = load i32, i32* @outcnt, align 4
  %cmp86 = icmp eq i32 %36, 16384
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.end78
  call void @flush_outbuf()
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %if.end78
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then56
  %call = call i32 @updcrc(i8* null, i32 0)
  store i32 %call, i32* @crc, align 4
  %37 = load i32, i32* %out.addr, align 4
  call void @bi_init(i32 %37)
  call void @ct_init(i16* %attr, i32* @method)
  %38 = load i32, i32* @level, align 4
  call void @lm_init(i32 %38, i16* %deflate_flags)
  %39 = load i16, i16* %deflate_flags, align 2
  %conv91 = trunc i16 %39 to i8
  %40 = load i32, i32* @outcnt, align 4
  %inc92 = add i32 %40, 1
  store i32 %inc92, i32* @outcnt, align 4
  %arrayidx93 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %40
  store i8 %conv91, i8* %arrayidx93, align 1
  %41 = load i32, i32* @outcnt, align 4
  %cmp94 = icmp eq i32 %41, 16384
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.end90
  call void @flush_outbuf()
  br label %if.end97

if.end97:                                         ; preds = %if.then96, %if.end90
  %42 = load i32, i32* @outcnt, align 4
  %inc98 = add i32 %42, 1
  store i32 %inc98, i32* @outcnt, align 4
  %arrayidx99 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %42
  store i8 11, i8* %arrayidx99, align 1
  %43 = load i32, i32* @outcnt, align 4
  %cmp100 = icmp eq i32 %43, 16384
  br i1 %cmp100, label %if.then102, label %if.end103

if.then102:                                       ; preds = %if.end97
  call void @flush_outbuf()
  br label %if.end103

if.end103:                                        ; preds = %if.then102, %if.end97
  %44 = load i32, i32* @save_orig_name, align 4
  %tobool104 = icmp ne i32 %44, 0
  br i1 %tobool104, label %if.then105, label %if.end114

if.then105:                                       ; preds = %if.end103
  %call106 = call i8* @gzipbasename(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @ifname, i32 0, i32 0))
  store i8* %call106, i8** %p, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then105
  %45 = load i8*, i8** %p, align 4
  %46 = load i8, i8* %45, align 1
  %47 = load i32, i32* @outcnt, align 4
  %inc107 = add i32 %47, 1
  store i32 %inc107, i32* @outcnt, align 4
  %arrayidx108 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %47
  store i8 %46, i8* %arrayidx108, align 1
  %48 = load i32, i32* @outcnt, align 4
  %cmp109 = icmp eq i32 %48, 16384
  br i1 %cmp109, label %if.then111, label %if.end112

if.then111:                                       ; preds = %do.body
  call void @flush_outbuf()
  br label %if.end112

if.end112:                                        ; preds = %if.then111, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end112
  %49 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %50 = load i8, i8* %49, align 1
  %tobool113 = icmp ne i8 %50, 0
  br i1 %tobool113, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end114

if.end114:                                        ; preds = %do.end, %if.end103
  %51 = load i32, i32* @outcnt, align 4
  store i32 %51, i32* @header_bytes, align 4
  %call115 = call i32 @deflate()
  %52 = load i32, i32* @outcnt, align 4
  %cmp116 = icmp ult i32 %52, 16382
  br i1 %cmp116, label %if.then118, label %if.else131

if.then118:                                       ; preds = %if.end114
  %53 = load i32, i32* @crc, align 4
  %and119 = and i32 %53, 65535
  %and120 = and i32 %and119, 255
  %conv121 = trunc i32 %and120 to i8
  %54 = load i32, i32* @outcnt, align 4
  %inc122 = add i32 %54, 1
  store i32 %inc122, i32* @outcnt, align 4
  %arrayidx123 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %54
  store i8 %conv121, i8* %arrayidx123, align 1
  %55 = load i32, i32* @crc, align 4
  %and124 = and i32 %55, 65535
  %conv125 = trunc i32 %and124 to i16
  %conv126 = zext i16 %conv125 to i32
  %shr127 = ashr i32 %conv126, 8
  %conv128 = trunc i32 %shr127 to i8
  %56 = load i32, i32* @outcnt, align 4
  %inc129 = add i32 %56, 1
  store i32 %inc129, i32* @outcnt, align 4
  %arrayidx130 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %56
  store i8 %conv128, i8* %arrayidx130, align 1
  br label %if.end152

if.else131:                                       ; preds = %if.end114
  %57 = load i32, i32* @crc, align 4
  %and132 = and i32 %57, 65535
  %and133 = and i32 %and132, 255
  %conv134 = trunc i32 %and133 to i8
  %58 = load i32, i32* @outcnt, align 4
  %inc135 = add i32 %58, 1
  store i32 %inc135, i32* @outcnt, align 4
  %arrayidx136 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %58
  store i8 %conv134, i8* %arrayidx136, align 1
  %59 = load i32, i32* @outcnt, align 4
  %cmp137 = icmp eq i32 %59, 16384
  br i1 %cmp137, label %if.then139, label %if.end140

if.then139:                                       ; preds = %if.else131
  call void @flush_outbuf()
  br label %if.end140

if.end140:                                        ; preds = %if.then139, %if.else131
  %60 = load i32, i32* @crc, align 4
  %and141 = and i32 %60, 65535
  %conv142 = trunc i32 %and141 to i16
  %conv143 = zext i16 %conv142 to i32
  %shr144 = ashr i32 %conv143, 8
  %conv145 = trunc i32 %shr144 to i8
  %61 = load i32, i32* @outcnt, align 4
  %inc146 = add i32 %61, 1
  store i32 %inc146, i32* @outcnt, align 4
  %arrayidx147 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %61
  store i8 %conv145, i8* %arrayidx147, align 1
  %62 = load i32, i32* @outcnt, align 4
  %cmp148 = icmp eq i32 %62, 16384
  br i1 %cmp148, label %if.then150, label %if.end151

if.then150:                                       ; preds = %if.end140
  call void @flush_outbuf()
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %if.end140
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.then118
  %63 = load i32, i32* @outcnt, align 4
  %cmp153 = icmp ult i32 %63, 16382
  br i1 %cmp153, label %if.then155, label %if.else168

if.then155:                                       ; preds = %if.end152
  %64 = load i32, i32* @crc, align 4
  %shr156 = lshr i32 %64, 16
  %and157 = and i32 %shr156, 255
  %conv158 = trunc i32 %and157 to i8
  %65 = load i32, i32* @outcnt, align 4
  %inc159 = add i32 %65, 1
  store i32 %inc159, i32* @outcnt, align 4
  %arrayidx160 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %65
  store i8 %conv158, i8* %arrayidx160, align 1
  %66 = load i32, i32* @crc, align 4
  %shr161 = lshr i32 %66, 16
  %conv162 = trunc i32 %shr161 to i16
  %conv163 = zext i16 %conv162 to i32
  %shr164 = ashr i32 %conv163, 8
  %conv165 = trunc i32 %shr164 to i8
  %67 = load i32, i32* @outcnt, align 4
  %inc166 = add i32 %67, 1
  store i32 %inc166, i32* @outcnt, align 4
  %arrayidx167 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %67
  store i8 %conv165, i8* %arrayidx167, align 1
  br label %if.end189

if.else168:                                       ; preds = %if.end152
  %68 = load i32, i32* @crc, align 4
  %shr169 = lshr i32 %68, 16
  %and170 = and i32 %shr169, 255
  %conv171 = trunc i32 %and170 to i8
  %69 = load i32, i32* @outcnt, align 4
  %inc172 = add i32 %69, 1
  store i32 %inc172, i32* @outcnt, align 4
  %arrayidx173 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %69
  store i8 %conv171, i8* %arrayidx173, align 1
  %70 = load i32, i32* @outcnt, align 4
  %cmp174 = icmp eq i32 %70, 16384
  br i1 %cmp174, label %if.then176, label %if.end177

if.then176:                                       ; preds = %if.else168
  call void @flush_outbuf()
  br label %if.end177

if.end177:                                        ; preds = %if.then176, %if.else168
  %71 = load i32, i32* @crc, align 4
  %shr178 = lshr i32 %71, 16
  %conv179 = trunc i32 %shr178 to i16
  %conv180 = zext i16 %conv179 to i32
  %shr181 = ashr i32 %conv180, 8
  %conv182 = trunc i32 %shr181 to i8
  %72 = load i32, i32* @outcnt, align 4
  %inc183 = add i32 %72, 1
  store i32 %inc183, i32* @outcnt, align 4
  %arrayidx184 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %72
  store i8 %conv182, i8* %arrayidx184, align 1
  %73 = load i32, i32* @outcnt, align 4
  %cmp185 = icmp eq i32 %73, 16384
  br i1 %cmp185, label %if.then187, label %if.end188

if.then187:                                       ; preds = %if.end177
  call void @flush_outbuf()
  br label %if.end188

if.end188:                                        ; preds = %if.then187, %if.end177
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.then155
  %74 = load i32, i32* @outcnt, align 4
  %cmp190 = icmp ult i32 %74, 16382
  br i1 %cmp190, label %if.then192, label %if.else205

if.then192:                                       ; preds = %if.end189
  %75 = load i32, i32* @bytes_in, align 4
  %and193 = and i32 %75, 65535
  %and194 = and i32 %and193, 255
  %conv195 = trunc i32 %and194 to i8
  %76 = load i32, i32* @outcnt, align 4
  %inc196 = add i32 %76, 1
  store i32 %inc196, i32* @outcnt, align 4
  %arrayidx197 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %76
  store i8 %conv195, i8* %arrayidx197, align 1
  %77 = load i32, i32* @bytes_in, align 4
  %and198 = and i32 %77, 65535
  %conv199 = trunc i32 %and198 to i16
  %conv200 = zext i16 %conv199 to i32
  %shr201 = ashr i32 %conv200, 8
  %conv202 = trunc i32 %shr201 to i8
  %78 = load i32, i32* @outcnt, align 4
  %inc203 = add i32 %78, 1
  store i32 %inc203, i32* @outcnt, align 4
  %arrayidx204 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %78
  store i8 %conv202, i8* %arrayidx204, align 1
  br label %if.end226

if.else205:                                       ; preds = %if.end189
  %79 = load i32, i32* @bytes_in, align 4
  %and206 = and i32 %79, 65535
  %and207 = and i32 %and206, 255
  %conv208 = trunc i32 %and207 to i8
  %80 = load i32, i32* @outcnt, align 4
  %inc209 = add i32 %80, 1
  store i32 %inc209, i32* @outcnt, align 4
  %arrayidx210 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %80
  store i8 %conv208, i8* %arrayidx210, align 1
  %81 = load i32, i32* @outcnt, align 4
  %cmp211 = icmp eq i32 %81, 16384
  br i1 %cmp211, label %if.then213, label %if.end214

if.then213:                                       ; preds = %if.else205
  call void @flush_outbuf()
  br label %if.end214

if.end214:                                        ; preds = %if.then213, %if.else205
  %82 = load i32, i32* @bytes_in, align 4
  %and215 = and i32 %82, 65535
  %conv216 = trunc i32 %and215 to i16
  %conv217 = zext i16 %conv216 to i32
  %shr218 = ashr i32 %conv217, 8
  %conv219 = trunc i32 %shr218 to i8
  %83 = load i32, i32* @outcnt, align 4
  %inc220 = add i32 %83, 1
  store i32 %inc220, i32* @outcnt, align 4
  %arrayidx221 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %83
  store i8 %conv219, i8* %arrayidx221, align 1
  %84 = load i32, i32* @outcnt, align 4
  %cmp222 = icmp eq i32 %84, 16384
  br i1 %cmp222, label %if.then224, label %if.end225

if.then224:                                       ; preds = %if.end214
  call void @flush_outbuf()
  br label %if.end225

if.end225:                                        ; preds = %if.then224, %if.end214
  br label %if.end226

if.end226:                                        ; preds = %if.end225, %if.then192
  %85 = load i32, i32* @outcnt, align 4
  %cmp227 = icmp ult i32 %85, 16382
  br i1 %cmp227, label %if.then229, label %if.else242

if.then229:                                       ; preds = %if.end226
  %86 = load i32, i32* @bytes_in, align 4
  %shr230 = lshr i32 %86, 16
  %and231 = and i32 %shr230, 255
  %conv232 = trunc i32 %and231 to i8
  %87 = load i32, i32* @outcnt, align 4
  %inc233 = add i32 %87, 1
  store i32 %inc233, i32* @outcnt, align 4
  %arrayidx234 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %87
  store i8 %conv232, i8* %arrayidx234, align 1
  %88 = load i32, i32* @bytes_in, align 4
  %shr235 = lshr i32 %88, 16
  %conv236 = trunc i32 %shr235 to i16
  %conv237 = zext i16 %conv236 to i32
  %shr238 = ashr i32 %conv237, 8
  %conv239 = trunc i32 %shr238 to i8
  %89 = load i32, i32* @outcnt, align 4
  %inc240 = add i32 %89, 1
  store i32 %inc240, i32* @outcnt, align 4
  %arrayidx241 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %89
  store i8 %conv239, i8* %arrayidx241, align 1
  br label %if.end263

if.else242:                                       ; preds = %if.end226
  %90 = load i32, i32* @bytes_in, align 4
  %shr243 = lshr i32 %90, 16
  %and244 = and i32 %shr243, 255
  %conv245 = trunc i32 %and244 to i8
  %91 = load i32, i32* @outcnt, align 4
  %inc246 = add i32 %91, 1
  store i32 %inc246, i32* @outcnt, align 4
  %arrayidx247 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %91
  store i8 %conv245, i8* %arrayidx247, align 1
  %92 = load i32, i32* @outcnt, align 4
  %cmp248 = icmp eq i32 %92, 16384
  br i1 %cmp248, label %if.then250, label %if.end251

if.then250:                                       ; preds = %if.else242
  call void @flush_outbuf()
  br label %if.end251

if.end251:                                        ; preds = %if.then250, %if.else242
  %93 = load i32, i32* @bytes_in, align 4
  %shr252 = lshr i32 %93, 16
  %conv253 = trunc i32 %shr252 to i16
  %conv254 = zext i16 %conv253 to i32
  %shr255 = ashr i32 %conv254, 8
  %conv256 = trunc i32 %shr255 to i8
  %94 = load i32, i32* @outcnt, align 4
  %inc257 = add i32 %94, 1
  store i32 %inc257, i32* @outcnt, align 4
  %arrayidx258 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i32 0, i32 %94
  store i8 %conv256, i8* %arrayidx258, align 1
  %95 = load i32, i32* @outcnt, align 4
  %cmp259 = icmp eq i32 %95, 16384
  br i1 %cmp259, label %if.then261, label %if.end262

if.then261:                                       ; preds = %if.end251
  call void @flush_outbuf()
  br label %if.end262

if.end262:                                        ; preds = %if.then261, %if.end251
  br label %if.end263

if.end263:                                        ; preds = %if.end262, %if.then229
  %96 = load i32, i32* @header_bytes, align 4
  %add = add i32 %96, 8
  store i32 %add, i32* @header_bytes, align 4
  call void @flush_outbuf()
  ret i32 0
}

; Function Attrs: noinline nounwind
define i32 @file_read(i8* %buf, i32 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %1 = load i8*, i8** %buf.addr, align 4
  %2 = load i32, i32* @ifd, align 4
  %call = call i32 @spec_read(i32 %2, i8* %1, i32 %0)
  store i32 %call, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %len, align 4
  %cmp1 = icmp eq i32 %4, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32, i32* %len, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load i32, i32* %len, align 4
  %7 = load i8*, i8** %buf.addr, align 4
  %call2 = call i32 @updcrc(i8* %7, i32 %6)
  store i32 %call2, i32* @crc, align 4
  %8 = load i32, i32* %len, align 4
  %9 = load i32, i32* @bytes_in, align 4
  %add = add i32 %9, %8
  store i32 %add, i32* @bytes_in, align 4
  %10 = load i32, i32* %len, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

attributes #0 = { noinline nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 3.8.0 (branches/release_38)"}
!1 = !{i32 6, !"Linker Options", !2}
!2 = !{!3, !4, !5, !6, !7, !8}
!3 = !{!"/DEFAULTLIB:msvcrt.lib"}
!4 = !{!"/DEFAULTLIB:oldnames.lib"}
!5 = !{!"/FAILIFMISMATCH:\22_MSC_VER=1600\22"}
!6 = !{!"/FAILIFMISMATCH:\22_ITERATOR_DEBUG_LEVEL=2\22"}
!7 = !{!"/DEFAULTLIB:msvcprtd.lib"}
!8 = !{!"/DEFAULTLIB:uuid.lib"}
